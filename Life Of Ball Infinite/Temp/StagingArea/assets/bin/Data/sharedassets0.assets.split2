ColorSpaceDielectricSpec.w;
    //Instruction 4169
    //MAD
    t16_4.xyz = t16_1.xyz * vec3(t16_24) + t16_4.xyz;
    //Instruction 4170
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 4171
    //MUL
    t16_3.xyz = t16_0.yyy * t16_3.xyz;
    //Instruction 4172
    //MOV
    t0.x = vs_TEXCOORD7;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 4173
    //MUL
    t0.xyz = t16_3.xyz * t0.xxx;
    //Instruction 4174
    //MOV
    SV_Target0.xyz = t0.xyz;
    //Instruction 4175
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4176
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 4516
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4517
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4518
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4519
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4520
    //MOV
    gl_Position = t0;
    //Instruction 4521
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 4522
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 4523
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 4524
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 4525
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 4526
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 4527
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4528
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4529
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4530
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4531
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4532
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4533
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 4534
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 4535
    //MOV
    t1.w = t0.x;
    //Instruction 4536
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 4537
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 4538
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 4539
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 4540
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 4541
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 4542
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 4543
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4544
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4545
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4546
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4547
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4548
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4549
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 4550
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4551
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4552
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4553
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 4554
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 4555
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 4556
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 4557
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 4558
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 4559
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 4560
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 4561
    //MOV
    t2.w = t0.z;
    //Instruction 4562
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 4563
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 4564
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 4565
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 4566
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 4567
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 4568
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 4569
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 4570
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 4571
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 4572
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec3 t0;
mediump vec3 t16_0;
lowp vec3 t10_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_4;
mediump vec3 t16_6;
mediump float t16_11;
mediump float t16_16;
void main()
{
    //Instruction 4460
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 4461
    //MAD
    t16_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 4462
    //MUL
    t16_2.xyz = t16_1.yyy * vs_TEXCOORD3.xyz;
    //Instruction 4463
    //MAD
    t16_1.xyw = t16_1.xxx * vs_TEXCOORD2.xyz + t16_2.xyz;
    //Instruction 4464
    //MAD
    t16_1.xyz = t16_1.zzz * vs_TEXCOORD4.xyz + t16_1.xyw;
    //Instruction 4465
    //DP3
    t16_16 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 4466
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 4467
    //MUL
    t16_1.xyz = vec3(t16_16) * t16_1.xyz;
    //Instruction 4468
    //DP3
    t16_16 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 4469
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 4470
    //MOV
    t16_2.x = vs_TEXCOORD2.w;
    //Instruction 4471
    //MOV
    t16_2.y = vs_TEXCOORD3.w;
    //Instruction 4472
    //MOV
    t16_2.z = vs_TEXCOORD4.w;
    //Instruction 4473
    //MAD
    t16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_16) + t16_2.xyz;
    //Instruction 4474
    //DP3
    t16_16 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 4475
    //MAX
    t16_0.x = max(t16_16, 0.001000);
    //Instruction 4476
    //RSQ
    t16_16 = inversesqrt(t16_0.x);
    //Instruction 4477
    //MUL
    t16_3.xyz = vec3(t16_16) * t16_3.xyz;
    //Instruction 4478
    //DP3
    t16_1.w = dot(t16_1.xyz, t16_3.xyz);
    //Instruction 4479
    //DP3
    t16_1.x = dot(t16_1.xyz, t16_2.xyz);
    //Instruction 4480
    //DP3
    t16_1.y = dot(t16_2.xyz, t16_3.xyz);
    //Instruction 4481
    //MAX
    t16_0.xyz = max(t16_1.yxw, vec3(0.0, 0.0, 0.0));
    //Instruction 4482
    //LOG
    t16_1.x = log2(t16_0.z);
    //Instruction 4483
    //ADD
    t16_6.x = (-_Glossiness) + 1.0;
    //Instruction 4484
    //ADD
    t16_11 = (-t16_6.x) + 1.0;
    //Instruction 4485
    //MAD
    t16_11 = t16_11 * 0.968000 + 0.030000;
    //Instruction 4486
    //LOG
    t16_11 = log2(t16_11);
    //Instruction 4487
    //DIV
    t16_6.y = 10.000000 / t16_11;
    //Instruction 4488
    //MUL
    t16_6.xz = t16_6.xy * t16_6.xy;
    //Instruction 4489
    //MAD
    t16_11 = t16_6.y * t16_6.y + 1.0;
    //Instruction 4490
    //MUL
    t16_1.x = t16_1.x * t16_6.z;
    //Instruction 4491
    //EXP
    t16_1.x = exp2(t16_1.x);
    //Instruction 4492
    //MUL
    t16_1.x = t16_1.x * t16_11;
    //Instruction 4493
    //MUL
    t16_11 = t16_0.x * t16_0.x;
    //Instruction 4494
    //MAD
    t16_6.x = t16_11 * _Glossiness + t16_6.x;
    //Instruction 4495
    //MUL
    t16_6.x = t16_6.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 4496
    //MAD
    t16_0.x = t16_6.x * t16_0.x + 0.000100;
    //Instruction 4497
    //DIV
    t16_0.x = t16_1.x / t16_0.x;
    //Instruction 4498
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4499
    //MAD
    t16_1.xyz = _Color.xyz * t10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 4500
    //MUL
    t16_4.xyz = t10_4.xyz * _Color.xyz;
    //Instruction 4501
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 4502
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    //Instruction 4503
    //MAD
    t16_16 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 4504
    //MAD
    t16_1.xyz = t16_4.xyz * vec3(t16_16) + t16_1.xyz;
    //Instruction 4505
    //SAMPLE_C_LZ
    vec3 txVec15 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec15, 0.0);
    //Instruction 4506
    //ADD
    t16_2.x = (-_LightShadowData.x) + 1.0;
    //Instruction 4507
    //MAD
    t16_16 = t16_16 * t16_2.x + _LightShadowData.x;
    //Instruction 4508
    //MUL
    t16_2.xyz = vec3(t16_16) * _LightColor0.xyz;
    //Instruction 4509
    //MUL
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 4510
    //MUL
    t16_1.xyz = t16_0.yyy * t16_1.xyz;
    //Instruction 4511
    //MOV
    t0.x = vs_TEXCOORD7;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 4512
    //MUL
    t0.xyz = t16_1.xyz * t0.xxx;
    //Instruction 4513
    //MOV
    SV_Target0.xyz = t0.xyz;
    //Instruction 4514
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4515
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec2 vs_TEXCOORD5;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 4303
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4304
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4305
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4306
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4307
    //MOV
    gl_Position = t0;
    //Instruction 4308
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 4309
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 4310
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 4311
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 4312
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 4313
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 4314
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4315
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4316
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4317
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4318
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4319
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4320
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 4321
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 4322
    //MOV
    t1.w = t0.x;
    //Instruction 4323
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 4324
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 4325
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 4326
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 4327
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 4328
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 4329
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 4330
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4331
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4332
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4333
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4334
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4335
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4336
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 4337
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4338
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4339
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4340
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 4341
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 4342
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 4343
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 4344
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 4345
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 4346
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 4347
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 4348
    //MOV
    t2.w = t0.z;
    //Instruction 4349
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 4350
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 4351
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 4352
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 4353
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 4354
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 4355
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 4356
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 4357
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 4358
    //DP4
    t2.x = dot(t16_0, t1);
    //Instruction 4359
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 4360
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 4361
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 4362
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 4363
    //DP4
    t2.y = dot(t16_0, t1);
    //Instruction 4364
    //MOV
    vs_TEXCOORD5.xy = t2.xy;
    //Instruction 4365
    //MUL
    t0 = t1.yyyy * unity_World2Shadow[0][1];
    //Instruction 4366
    //MAD
    t0 = unity_World2Shadow[0][0] * t1.xxxx + t0;
    //Instruction 4367
    //MAD
    t0 = unity_World2Shadow[0][2] * t1.zzzz + t0;
    //Instruction 4368
    //MAD
    t0 = unity_World2Shadow[0][3] * t1.wwww + t0;
    //Instruction 4369
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 4370
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec2 vs_TEXCOORD5;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec3 t0;
mediump vec3 t16_0;
lowp vec3 t10_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_4;
mediump vec3 t16_6;
mediump float t16_11;
mediump float t16_16;
void main()
{
    //Instruction 4245
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 4246
    //MAD
    t16_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 4247
    //MUL
    t16_2.xyz = t16_1.yyy * vs_TEXCOORD3.xyz;
    //Instruction 4248
    //MAD
    t16_1.xyw = t16_1.xxx * vs_TEXCOORD2.xyz + t16_2.xyz;
    //Instruction 4249
    //MAD
    t16_1.xyz = t16_1.zzz * vs_TEXCOORD4.xyz + t16_1.xyw;
    //Instruction 4250
    //DP3
    t16_16 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 4251
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 4252
    //MUL
    t16_1.xyz = vec3(t16_16) * t16_1.xyz;
    //Instruction 4253
    //DP3
    t16_16 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 4254
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 4255
    //MOV
    t16_2.x = vs_TEXCOORD2.w;
    //Instruction 4256
    //MOV
    t16_2.y = vs_TEXCOORD3.w;
    //Instruction 4257
    //MOV
    t16_2.z = vs_TEXCOORD4.w;
    //Instruction 4258
    //MAD
    t16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_16) + t16_2.xyz;
    //Instruction 4259
    //DP3
    t16_16 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 4260
    //MAX
    t16_0.x = max(t16_16, 0.001000);
    //Instruction 4261
    //RSQ
    t16_16 = inversesqrt(t16_0.x);
    //Instruction 4262
    //MUL
    t16_3.xyz = vec3(t16_16) * t16_3.xyz;
    //Instruction 4263
    //DP3
    t16_1.w = dot(t16_1.xyz, t16_3.xyz);
    //Instruction 4264
    //DP3
    t16_1.x = dot(t16_1.xyz, t16_2.xyz);
    //Instruction 4265
    //DP3
    t16_1.y = dot(t16_2.xyz, t16_3.xyz);
    //Instruction 4266
    //MAX
    t16_0.xyz = max(t16_1.yxw, vec3(0.0, 0.0, 0.0));
    //Instruction 4267
    //LOG
    t16_1.x = log2(t16_0.z);
    //Instruction 4268
    //ADD
    t16_6.x = (-_Glossiness) + 1.0;
    //Instruction 4269
    //ADD
    t16_11 = (-t16_6.x) + 1.0;
    //Instruction 4270
    //MAD
    t16_11 = t16_11 * 0.968000 + 0.030000;
    //Instruction 4271
    //LOG
    t16_11 = log2(t16_11);
    //Instruction 4272
    //DIV
    t16_6.y = 10.000000 / t16_11;
    //Instruction 4273
    //MUL
    t16_6.xz = t16_6.xy * t16_6.xy;
    //Instruction 4274
    //MAD
    t16_11 = t16_6.y * t16_6.y + 1.0;
    //Instruction 4275
    //MUL
    t16_1.x = t16_1.x * t16_6.z;
    //Instruction 4276
    //EXP
    t16_1.x = exp2(t16_1.x);
    //Instruction 4277
    //MUL
    t16_1.x = t16_1.x * t16_11;
    //Instruction 4278
    //MUL
    t16_11 = t16_0.x * t16_0.x;
    //Instruction 4279
    //MAD
    t16_6.x = t16_11 * _Glossiness + t16_6.x;
    //Instruction 4280
    //MUL
    t16_6.x = t16_6.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 4281
    //MAD
    t16_0.x = t16_6.x * t16_0.x + 0.000100;
    //Instruction 4282
    //DIV
    t16_0.x = t16_1.x / t16_0.x;
    //Instruction 4283
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4284
    //MAD
    t16_1.xyz = _Color.xyz * t10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 4285
    //MUL
    t16_4.xyz = t10_4.xyz * _Color.xyz;
    //Instruction 4286
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 4287
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    //Instruction 4288
    //MAD
    t16_16 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 4289
    //MAD
    t16_1.xyz = t16_4.xyz * vec3(t16_16) + t16_1.xyz;
    //Instruction 4290
    //SAMPLE_C_LZ
    vec3 txVec19 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec19, 0.0);
    //Instruction 4291
    //ADD
    t16_2.x = (-_LightShadowData.x) + 1.0;
    //Instruction 4292
    //MAD
    t16_16 = t16_16 * t16_2.x + _LightShadowData.x;
    //Instruction 4293
    //SAMPLE
    t10_0.x = texture(_LightTexture0, vs_TEXCOORD5.xy).w;
    //Instruction 4294
    //MUL
    t16_0.x = t16_16 * t10_0.x;
    //Instruction 4295
    //MUL
    t16_2.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 4296
    //MUL
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 4297
    //MUL
    t16_1.xyz = t16_0.yyy * t16_1.xyz;
    //Instruction 4298
    //MOV
    t0.x = vs_TEXCOORD7;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 4299
    //MUL
    t0.xyz = t16_1.xyz * t0.xxx;
    //Instruction 4300
    //MOV
    SV_Target0.xyz = t0.xyz;
    //Instruction 4301
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4302
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" "FOG_EXP2" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "FOG_EXP2" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" "FOG_EXP2" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "FOG_EXP2" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "FOG_EXP2" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "FOG_EXP2" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "FOG_EXP2" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "FOG_EXP2" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "FOG_EXP2" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3"
}
}
 }
 Pass {
  Name "SHADOWCASTER"
  Tags { "LIGHTMODE"="SHADOWCASTER" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  GpuProgramID 133839
Program "vp" {
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
bool tb2;
highp float t6;
highp float t9;
void main()
{
    //Instruction 4575
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4576
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4577
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4578
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4579
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4580
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4581
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 4582
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4583
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4584
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4585
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 4586
    //DP3
    t9 = dot(t0.xyz, t0.xyz);
    //Instruction 4587
    //RSQ
    t9 = inversesqrt(t9);
    //Instruction 4588
    //MUL
    t0.xyz = vec3(t9) * t0.xyz;
    //Instruction 4589
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4590
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 4591
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 4592
    //ADD
    t1.xyz = t1.xyz + _Object2World[3].xyz;
    //Instruction 4593
    //MAD
    t2.xyz = (-t1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 4594
    //DP3
    t9 = dot(t2.xyz, t2.xyz);
    //Instruction 4595
    //RSQ
    t9 = inversesqrt(t9);
    //Instruction 4596
    //MUL
    t2.xyz = vec3(t9) * t2.xyz;
    //Instruction 4597
    //DP3
    t9 = dot(t0.xyz, t2.xyz);
    //Instruction 4598
    //MAD
    t9 = (-t9) * t9 + 1.0;
    //Instruction 4599
    //SQRT
    t9 = sqrt(t9);
    //Instruction 4600
    //MUL
    t9 = t9 * unity_LightShadowBias.z;
    //Instruction 4601
    //MAD
    t0.xyz = (-t0.xyz) * vec3(t9) + t1.xyz;
    //Instruction 4602
    //MUL
    t1 = t0.yyyy * unity_MatrixVP[1];
    //Instruction 4603
    //MAD
    t1 = unity_MatrixVP[0] * t0.xxxx + t1;
    //Instruction 4604
    //MAD
    t0 = unity_MatrixVP[2] * t0.zzzz + t1;
    //Instruction 4605
    //ADD
    t0 = t0 + unity_MatrixVP[3];
    //Instruction 4606
    //MUL
    t1 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4607
    //MAD
    t1 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t1;
    //Instruction 4608
    //MAD
    t1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t1;
    //Instruction 4609
    //ADD
    t1 = t1 + glstate_matrix_mvp[3];
    //Instruction 4610
    //NE
    tb2 = unity_LightShadowBias.z!=0.0;
    //Instruction 4611
    //MOVC
    t0 = (bool(tb2)) ? t0 : t1;
    //Instruction 4612
    //DIV
    t1.x = unity_LightShadowBias.x / t0.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 4613
    //ADD
    t6 = t0.z + t1.x;
    //Instruction 4614
    //MAX
    t1.x = max((-t0.w), t6);
    //Instruction 4615
    //MOV
    gl_Position.xyw = t0.xyw;
    //Instruction 4616
    //ADD
    t0.x = (-t6) + t1.x;
    //Instruction 4617
    //MAD
    gl_Position.z = unity_LightShadowBias.y * t0.x + t6;
    //Instruction 4618
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    //Instruction 4573
    //MOV
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 4574
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
out highp vec3 vs_TEXCOORD0;
highp vec4 t0;
void main()
{
    //Instruction 4380
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4381
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4382
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4383
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4384
    //ADD
    vs_TEXCOORD0.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 4385
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4386
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4387
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4388
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4389
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
in highp vec3 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec4 t0;
void main()
{
    //Instruction 4371
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    //Instruction 4372
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 4373
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 4374
    //MIN
    t0.x = min(t0.x, 0.999000);
    //Instruction 4375
    //MUL
    t0 = t0.xxxx * vec4(1.0, 255.000000, 65025.000000, 16581375.000000);
    //Instruction 4376
    //FRC
    t0 = fract(t0);
    //Instruction 4377
    //MAD
    t0 = (-t0.yzww) * vec4(0.003922, 0.003922, 0.003922, 0.003922) + t0;
    //Instruction 4378
    //MOV
    SV_Target0 = t0;
    //Instruction 4379
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" }
"!!GLES3"
}
}
 }
 Pass {
  Name "DEFERRED"
  Tags { "LIGHTMODE"="Deferred" "RenderType"="Opaque" "PerformanceChecks"="False" }
  GpuProgramID 200435
Program "vp" {
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec3 t1;
mediump float t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 4670
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4671
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4672
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4673
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4674
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 4675
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 4676
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 4677
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4678
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4679
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4680
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4681
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4682
    //ADD
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4683
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 4684
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 4685
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 4686
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4687
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4688
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4689
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4690
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4691
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4692
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 4693
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4694
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4695
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4696
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 4697
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 4698
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 4699
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 4700
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 4701
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 4702
    //MUL
    t16_2 = t0.y * t0.y;
    //Instruction 4703
    //MAD
    t16_2 = t0.x * t0.x + (-t16_2);
    //Instruction 4704
    //MUL
    t16_0 = t0.yzzx * t0.xyzz;
    //Instruction 4705
    //DP4
    t16_3.x = dot(unity_SHBr, t16_0);
    //Instruction 4706
    //DP4
    t16_3.y = dot(unity_SHBg, t16_0);
    //Instruction 4707
    //DP4
    t16_3.z = dot(unity_SHBb, t16_0);
    //Instruction 4708
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_2) + t16_3.xyz;
    //Instruction 4709
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 4710
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp float t10_0;
mediump vec3 t16_1;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_22;
mediump float t16_24;
void main()
{
    //Instruction 4619
    //SAMPLE
    t10_0 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 4620
    //ADD
    t16_1.x = (-_OcclusionStrength) + 1.0;
    //Instruction 4621
    //MAD
    t16_0.w = t10_0 * _OcclusionStrength + t16_1.x;
    //Instruction 4622
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4623
    //MUL
    t16_3.xyz = t10_2.xyz * _Color.xyz;
    //Instruction 4624
    //MAD
    t16_1.xyz = _Color.xyz * t10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 4625
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 4626
    //MAD
    t16_22 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 4627
    //MUL
    t16_0.xyz = vec3(t16_22) * t16_3.xyz;
    //Instruction 4628
    //ADD
    t16_22 = (-t16_22) + _Glossiness;
    //Instruction 4629
    //ADD
    t16_22 = t16_22 + 1.0;
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 4630
    //ADD
    t16_4.xyz = (-t16_1.xyz) + vec3(t16_22);
    //Instruction 4631
    //MOV
    SV_Target0 = t16_0;
    //Instruction 4632
    //MOV
    SV_Target1.xyz = t16_1.xyz;
    //Instruction 4633
    //MOV
    SV_Target1.w = _Glossiness;
    //Instruction 4634
    //DP3
    t16_22 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 4635
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 4636
    //MUL
    t16_2.xyz = vec3(t16_22) * vs_TEXCOORD4.xyz;
    //Instruction 4637
    //MOV
    t16_2.w = 1.0;
    //Instruction 4638
    //MAD
    SV_Target2 = t16_2 * vec4(0.500000, 0.500000, 0.500000, 1.0) + vec4(0.500000, 0.500000, 0.500000, 0.0);
    //Instruction 4639
    //DP4
    t16_5.x = dot(unity_SHAr, t16_2);
    //Instruction 4640
    //DP4
    t16_5.y = dot(unity_SHAg, t16_2);
    //Instruction 4641
    //DP4
    t16_5.z = dot(unity_SHAb, t16_2);
    //Instruction 4642
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    //Instruction 4643
    //MUL
    t16_5.xyz = t16_0.www * t16_5.xyz;
    //Instruction 4644
    //DP3
    t16_22 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 4645
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 4646
    //MUL
    t16_6.xyz = vec3(t16_22) * vs_TEXCOORD1.xyz;
    //Instruction 4647
    //DP3
    t16_3.x = dot(t16_6.xyz, t16_2.xyz);
    //Instruction 4648
    //ADD
    t16_3.x = t16_3.x + t16_3.x;
    //Instruction 4649
    //MAD
    t16_3.xyz = t16_2.xyz * (-t16_3.xxx) + t16_6.xyz;
    //Instruction 4650
    //DP3
    t16_22 = dot(t16_2.xyz, (-t16_6.xyz));
    //Instruction 4651
    //MAX
    t16_24 = max(t16_22, 0.0);
    //Instruction 4652
    //ADD
    t16_22 = (-t16_24) + 1.0;
    //Instruction 4653
    //MUL
    t16_22 = t16_22 * t16_22;
    //Instruction 4654
    //MUL
    t16_22 = t16_22 * t16_22;
    //Instruction 4655
    //MAD
    t16_1.xyz = vec3(t16_22) * t16_4.xyz + t16_1.xyz;
    //Instruction 4656
    //ADD
    t16_22 = (-_Glossiness) + 1.0;
    //Instruction 4657
    //LOG
    t16_22 = log2(t16_22);
    //Instruction 4658
    //MUL
    t16_22 = t16_22 * 0.750000;
    //Instruction 4659
    //EXP
    t16_22 = exp2(t16_22);
    //Instruction 4660
    //MUL
    t16_22 = t16_22 * 7.000000;
    //Instruction 4661
    //SAMPLE_L
    t10_2 = textureLod(unity_SpecCube0, t16_3.xyz, t16_22);
    //Instruction 4662
    //MUL
    t16_22 = t10_2.w * unity_SpecCube0_HDR.x;
    //Instruction 4663
    //MUL
    t16_4.xyz = t10_2.xyz * vec3(t16_22);
    //Instruction 4664
    //MUL
    t16_4.xyz = t16_0.www * t16_4.xyz;
    //Instruction 4665
    //MUL
    t16_1.xyz = t16_1.xyz * t16_4.xyz;
    //Instruction 4666
    //MAD
    t16_1.xyz = t16_5.xyz * t16_0.xyz + t16_1.xyz;
    //Instruction 4667
    //EXP
    SV_Target3.xyz = exp2((-t16_1.xyz));
    //Instruction 4668
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 4669
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec3 t1;
highp vec3 t2;
mediump vec3 t16_3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 4446
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4447
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4448
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4449
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4450
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 4451
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 4452
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 4453
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4454
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4455
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4456
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4457
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4458
    //ADD
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4459
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 4460
    //MUL
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 4461
    //MAD
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    //Instruction 4462
    //MAD
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    //Instruction 4463
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 4464
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 4465
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 4466
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 4467
    //MOV
    vs_TEXCOORD2.w = 0.0;
    //Instruction 4468
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4469
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4470
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4471
    //MUL
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4472
    //MUL
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4473
    //MUL
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4474
    //ADD
    t1.xyz = t1.xyz + t2.xyz;
    //Instruction 4475
    //MUL
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4476
    //MUL
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4477
    //MUL
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4478
    //ADD
    t1.xyz = t1.xyz + t2.xyz;
    //Instruction 4479
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 4480
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 4481
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 4482
    //MUL
    t16_3.xyz = t0.yzx * t1.zxy;
    //Instruction 4483
    //MAD
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    //Instruction 4484
    //MUL
    vs_TEXCOORD3.xyz = t16_3.xyz * in_TANGENT0.www;
    //Instruction 4485
    //MOV
    vs_TEXCOORD3.w = 0.0;
    //Instruction 4486
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 4487
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 4488
    //MUL
    t16_3.x = t1.y * t1.y;
    //Instruction 4489
    //MAD
    t16_3.x = t1.x * t1.x + (-t16_3.x);
    //Instruction 4490
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 4491
    //DP4
    t16_4.x = dot(unity_SHBr, t16_0);
    //Instruction 4492
    //DP4
    t16_4.y = dot(unity_SHBg, t16_0);
    //Instruction 4493
    //DP4
    t16_4.z = dot(unity_SHBb, t16_0);
    //Instruction 4494
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * t16_3.xxx + t16_4.xyz;
    //Instruction 4495
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 4496
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp float t10_0;
mediump vec3 t16_1;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec4 t16_5;
mediump vec3 t16_6;
mediump float t16_22;
mediump float t16_24;
void main()
{
    //Instruction 4390
    //SAMPLE
    t10_0 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 4391
    //ADD
    t16_1.x = (-_OcclusionStrength) + 1.0;
    //Instruction 4392
    //MAD
    t16_0.w = t10_0 * _OcclusionStrength + t16_1.x;
    //Instruction 4393
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4394
    //MUL
    t16_3.xyz = t10_2.xyz * _Color.xyz;
    //Instruction 4395
    //MAD
    t16_1.xyz = _Color.xyz * t10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 4396
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 4397
    //MAD
    t16_22 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 4398
    //MUL
    t16_0.xyz = vec3(t16_22) * t16_3.xyz;
    //Instruction 4399
    //ADD
    t16_22 = (-t16_22) + _Glossiness;
    //Instruction 4400
    //ADD
    t16_22 = t16_22 + 1.0;
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 4401
    //ADD
    t16_4.xyz = (-t16_1.xyz) + vec3(t16_22);
    //Instruction 4402
    //MOV
    SV_Target0 = t16_0;
    //Instruction 4403
    //MOV
    SV_Target1.xyz = t16_1.xyz;
    //Instruction 4404
    //MOV
    SV_Target1.w = _Glossiness;
    //Instruction 4405
    //SAMPLE
    t10_2.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 4406
    //MAD
    t16_5.xyz = t10_2.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 4407
    //MUL
    t16_6.xyz = t16_5.yyy * vs_TEXCOORD3.xyz;
    //Instruction 4408
    //MAD
    t16_5.xyw = t16_5.xxx * vs_TEXCOORD2.xyz + t16_6.xyz;
    //Instruction 4409
    //MAD
    t16_5.xyz = t16_5.zzz * vs_TEXCOORD4.xyz + t16_5.xyw;
    //Instruction 4410
    //DP3
    t16_22 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 4411
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 4412
    //MUL
    t16_2.xyz = vec3(t16_22) * t16_5.xyz;
    //Instruction 4413
    //MOV
    t16_2.w = 1.0;
    //Instruction 4414
    //MAD
    SV_Target2 = t16_2 * vec4(0.500000, 0.500000, 0.500000, 1.0) + vec4(0.500000, 0.500000, 0.500000, 0.0);
    //Instruction 4415
    //DP4
    t16_5.x = dot(unity_SHAr, t16_2);
    //Instruction 4416
    //DP4
    t16_5.y = dot(unity_SHAg, t16_2);
    //Instruction 4417
    //DP4
    t16_5.z = dot(unity_SHAb, t16_2);
    //Instruction 4418
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    //Instruction 4419
    //MUL
    t16_5.xyz = t16_0.www * t16_5.xyz;
    //Instruction 4420
    //DP3
    t16_22 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 4421
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 4422
    //MUL
    t16_6.xyz = vec3(t16_22) * vs_TEXCOORD1.xyz;
    //Instruction 4423
    //DP3
    t16_3.x = dot(t16_6.xyz, t16_2.xyz);
    //Instruction 4424
    //ADD
    t16_3.x = t16_3.x + t16_3.x;
    //Instruction 4425
    //MAD
    t16_3.xyz = t16_2.xyz * (-t16_3.xxx) + t16_6.xyz;
    //Instruction 4426
    //DP3
    t16_22 = dot(t16_2.xyz, (-t16_6.xyz));
    //Instruction 4427
    //MAX
    t16_24 = max(t16_22, 0.0);
    //Instruction 4428
    //ADD
    t16_22 = (-t16_24) + 1.0;
    //Instruction 4429
    //MUL
    t16_22 = t16_22 * t16_22;
    //Instruction 4430
    //MUL
    t16_22 = t16_22 * t16_22;
    //Instruction 4431
    //MAD
    t16_1.xyz = vec3(t16_22) * t16_4.xyz + t16_1.xyz;
    //Instruction 4432
    //ADD
    t16_22 = (-_Glossiness) + 1.0;
    //Instruction 4433
    //LOG
    t16_22 = log2(t16_22);
    //Instruction 4434
    //MUL
    t16_22 = t16_22 * 0.750000;
    //Instruction 4435
    //EXP
    t16_22 = exp2(t16_22);
    //Instruction 4436
    //MUL
    t16_22 = t16_22 * 7.000000;
    //Instruction 4437
    //SAMPLE_L
    t10_2 = textureLod(unity_SpecCube0, t16_3.xyz, t16_22);
    //Instruction 4438
    //MUL
    t16_22 = t10_2.w * unity_SpecCube0_HDR.x;
    //Instruction 4439
    //MUL
    t16_4.xyz = t10_2.xyz * vec3(t16_22);
    //Instruction 4440
    //MUL
    t16_4.xyz = t16_0.www * t16_4.xyz;
    //Instruction 4441
    //MUL
    t16_1.xyz = t16_1.xyz * t16_4.xyz;
    //Instruction 4442
    //MAD
    t16_1.xyz = t16_5.xyz * t16_0.xyz + t16_1.xyz;
    //Instruction 4443
    //EXP
    SV_Target3.xyz = exp2((-t16_1.xyz));
    //Instruction 4444
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 4445
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec3 t1;
mediump float t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 4761
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4762
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4763
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4764
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4765
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 4766
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 4767
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 4768
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4769
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4770
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4771
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4772
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4773
    //ADD
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4774
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 4775
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 4776
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 4777
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4778
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4779
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4780
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4781
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4782
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4783
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 4784
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4785
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4786
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4787
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 4788
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 4789
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 4790
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 4791
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 4792
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 4793
    //MUL
    t16_2 = t0.y * t0.y;
    //Instruction 4794
    //MAD
    t16_2 = t0.x * t0.x + (-t16_2);
    //Instruction 4795
    //MUL
    t16_0 = t0.yzzx * t0.xyzz;
    //Instruction 4796
    //DP4
    t16_3.x = dot(unity_SHBr, t16_0);
    //Instruction 4797
    //DP4
    t16_3.y = dot(unity_SHBg, t16_0);
    //Instruction 4798
    //DP4
    t16_3.z = dot(unity_SHBb, t16_0);
    //Instruction 4799
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_2) + t16_3.xyz;
    //Instruction 4800
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 4801
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp float t10_0;
mediump vec3 t16_1;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_22;
mediump float t16_24;
void main()
{
    //Instruction 4711
    //SAMPLE
    t10_0 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 4712
    //ADD
    t16_1.x = (-_OcclusionStrength) + 1.0;
    //Instruction 4713
    //MAD
    t16_0.w = t10_0 * _OcclusionStrength + t16_1.x;
    //Instruction 4714
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4715
    //MUL
    t16_3.xyz = t10_2.xyz * _Color.xyz;
    //Instruction 4716
    //MAD
    t16_1.xyz = _Color.xyz * t10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 4717
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 4718
    //MAD
    t16_22 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 4719
    //MUL
    t16_0.xyz = vec3(t16_22) * t16_3.xyz;
    //Instruction 4720
    //ADD
    t16_22 = (-t16_22) + _Glossiness;
    //Instruction 4721
    //ADD
    t16_22 = t16_22 + 1.0;
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 4722
    //ADD
    t16_4.xyz = (-t16_1.xyz) + vec3(t16_22);
    //Instruction 4723
    //MOV
    SV_Target0 = t16_0;
    //Instruction 4724
    //MOV
    SV_Target1.xyz = t16_1.xyz;
    //Instruction 4725
    //MOV
    SV_Target1.w = _Glossiness;
    //Instruction 4726
    //DP3
    t16_22 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 4727
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 4728
    //MUL
    t16_2.xyz = vec3(t16_22) * vs_TEXCOORD4.xyz;
    //Instruction 4729
    //MOV
    t16_2.w = 1.0;
    //Instruction 4730
    //MAD
    SV_Target2 = t16_2 * vec4(0.500000, 0.500000, 0.500000, 1.0) + vec4(0.500000, 0.500000, 0.500000, 0.0);
    //Instruction 4731
    //DP4
    t16_5.x = dot(unity_SHAr, t16_2);
    //Instruction 4732
    //DP4
    t16_5.y = dot(unity_SHAg, t16_2);
    //Instruction 4733
    //DP4
    t16_5.z = dot(unity_SHAb, t16_2);
    //Instruction 4734
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    //Instruction 4735
    //MUL
    t16_5.xyz = t16_0.www * t16_5.xyz;
    //Instruction 4736
    //DP3
    t16_22 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 4737
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 4738
    //MUL
    t16_6.xyz = vec3(t16_22) * vs_TEXCOORD1.xyz;
    //Instruction 4739
    //DP3
    t16_3.x = dot(t16_6.xyz, t16_2.xyz);
    //Instruction 4740
    //ADD
    t16_3.x = t16_3.x + t16_3.x;
    //Instruction 4741
    //MAD
    t16_3.xyz = t16_2.xyz * (-t16_3.xxx) + t16_6.xyz;
    //Instruction 4742
    //DP3
    t16_22 = dot(t16_2.xyz, (-t16_6.xyz));
    //Instruction 4743
    //MAX
    t16_24 = max(t16_22, 0.0);
    //Instruction 4744
    //ADD
    t16_22 = (-t16_24) + 1.0;
    //Instruction 4745
    //MUL
    t16_22 = t16_22 * t16_22;
    //Instruction 4746
    //MUL
    t16_22 = t16_22 * t16_22;
    //Instruction 4747
    //MAD
    t16_1.xyz = vec3(t16_22) * t16_4.xyz + t16_1.xyz;
    //Instruction 4748
    //ADD
    t16_22 = (-_Glossiness) + 1.0;
    //Instruction 4749
    //LOG
    t16_22 = log2(t16_22);
    //Instruction 4750
    //MUL
    t16_22 = t16_22 * 0.750000;
    //Instruction 4751
    //EXP
    t16_22 = exp2(t16_22);
    //Instruction 4752
    //MUL
    t16_22 = t16_22 * 7.000000;
    //Instruction 4753
    //SAMPLE_L
    t10_2 = textureLod(unity_SpecCube0, t16_3.xyz, t16_22);
    //Instruction 4754
    //MUL
    t16_22 = t10_2.w * unity_SpecCube0_HDR.x;
    //Instruction 4755
    //MUL
    t16_4.xyz = t10_2.xyz * vec3(t16_22);
    //Instruction 4756
    //MUL
    t16_4.xyz = t16_0.www * t16_4.xyz;
    //Instruction 4757
    //MUL
    t16_1.xyz = t16_1.xyz * t16_4.xyz;
    //Instruction 4758
    //MAD
    SV_Target3.xyz = t16_5.xyz * t16_0.xyz + t16_1.xyz;
    //Instruction 4759
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 4760
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec3 t1;
highp vec3 t2;
mediump vec3 t16_3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 4552
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4553
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4554
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4555
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4556
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 4557
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 4558
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 4559
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4560
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4561
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4562
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4563
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4564
    //ADD
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4565
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 4566
    //MUL
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 4567
    //MAD
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    //Instruction 4568
    //MAD
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    //Instruction 4569
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 4570
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 4571
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 4572
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 4573
    //MOV
    vs_TEXCOORD2.w = 0.0;
    //Instruction 4574
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4575
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4576
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4577
    //MUL
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4578
    //MUL
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4579
    //MUL
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4580
    //ADD
    t1.xyz = t1.xyz + t2.xyz;
    //Instruction 4581
    //MUL
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4582
    //MUL
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4583
    //MUL
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4584
    //ADD
    t1.xyz = t1.xyz + t2.xyz;
    //Instruction 4585
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 4586
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 4587
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 4588
    //MUL
    t16_3.xyz = t0.yzx * t1.zxy;
    //Instruction 4589
    //MAD
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    //Instruction 4590
    //MUL
    vs_TEXCOORD3.xyz = t16_3.xyz * in_TANGENT0.www;
    //Instruction 4591
    //MOV
    vs_TEXCOORD3.w = 0.0;
    //Instruction 4592
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 4593
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 4594
    //MUL
    t16_3.x = t1.y * t1.y;
    //Instruction 4595
    //MAD
    t16_3.x = t1.x * t1.x + (-t16_3.x);
    //Instruction 4596
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 4597
    //DP4
    t16_4.x = dot(unity_SHBr, t16_0);
    //Instruction 4598
    //DP4
    t16_4.y = dot(unity_SHBg, t16_0);
    //Instruction 4599
    //DP4
    t16_4.z = dot(unity_SHBb, t16_0);
    //Instruction 4600
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * t16_3.xxx + t16_4.xyz;
    //Instruction 4601
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 4602
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp float t10_0;
mediump vec3 t16_1;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec4 t16_5;
mediump vec3 t16_6;
mediump float t16_22;
mediump float t16_24;
void main()
{
    //Instruction 4497
    //SAMPLE
    t10_0 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 4498
    //ADD
    t16_1.x = (-_OcclusionStrength) + 1.0;
    //Instruction 4499
    //MAD
    t16_0.w = t10_0 * _OcclusionStrength + t16_1.x;
    //Instruction 4500
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4501
    //MUL
    t16_3.xyz = t10_2.xyz * _Color.xyz;
    //Instruction 4502
    //MAD
    t16_1.xyz = _Color.xyz * t10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 4503
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 4504
    //MAD
    t16_22 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 4505
    //MUL
    t16_0.xyz = vec3(t16_22) * t16_3.xyz;
    //Instruction 4506
    //ADD
    t16_22 = (-t16_22) + _Glossiness;
    //Instruction 4507
    //ADD
    t16_22 = t16_22 + 1.0;
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 4508
    //ADD
    t16_4.xyz = (-t16_1.xyz) + vec3(t16_22);
    //Instruction 4509
    //MOV
    SV_Target0 = t16_0;
    //Instruction 4510
    //MOV
    SV_Target1.xyz = t16_1.xyz;
    //Instruction 4511
    //MOV
    SV_Target1.w = _Glossiness;
    //Instruction 4512
    //SAMPLE
    t10_2.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 4513
    //MAD
    t16_5.xyz = t10_2.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 4514
    //MUL
    t16_6.xyz = t16_5.yyy * vs_TEXCOORD3.xyz;
    //Instruction 4515
    //MAD
    t16_5.xyw = t16_5.xxx * vs_TEXCOORD2.xyz + t16_6.xyz;
    //Instruction 4516
    //MAD
    t16_5.xyz = t16_5.zzz * vs_TEXCOORD4.xyz + t16_5.xyw;
    //Instruction 4517
    //DP3
    t16_22 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 4518
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 4519
    //MUL
    t16_2.xyz = vec3(t16_22) * t16_5.xyz;
    //Instruction 4520
    //MOV
    t16_2.w = 1.0;
    //Instruction 4521
    //MAD
    SV_Target2 = t16_2 * vec4(0.500000, 0.500000, 0.500000, 1.0) + vec4(0.500000, 0.500000, 0.500000, 0.0);
    //Instruction 4522
    //DP4
    t16_5.x = dot(unity_SHAr, t16_2);
    //Instruction 4523
    //DP4
    t16_5.y = dot(unity_SHAg, t16_2);
    //Instruction 4524
    //DP4
    t16_5.z = dot(unity_SHAb, t16_2);
    //Instruction 4525
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    //Instruction 4526
    //MUL
    t16_5.xyz = t16_0.www * t16_5.xyz;
    //Instruction 4527
    //DP3
    t16_22 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 4528
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 4529
    //MUL
    t16_6.xyz = vec3(t16_22) * vs_TEXCOORD1.xyz;
    //Instruction 4530
    //DP3
    t16_3.x = dot(t16_6.xyz, t16_2.xyz);
    //Instruction 4531
    //ADD
    t16_3.x = t16_3.x + t16_3.x;
    //Instruction 4532
    //MAD
    t16_3.xyz = t16_2.xyz * (-t16_3.xxx) + t16_6.xyz;
    //Instruction 4533
    //DP3
    t16_22 = dot(t16_2.xyz, (-t16_6.xyz));
    //Instruction 4534
    //MAX
    t16_24 = max(t16_22, 0.0);
    //Instruction 4535
    //ADD
    t16_22 = (-t16_24) + 1.0;
    //Instruction 4536
    //MUL
    t16_22 = t16_22 * t16_22;
    //Instruction 4537
    //MUL
    t16_22 = t16_22 * t16_22;
    //Instruction 4538
    //MAD
    t16_1.xyz = vec3(t16_22) * t16_4.xyz + t16_1.xyz;
    //Instruction 4539
    //ADD
    t16_22 = (-_Glossiness) + 1.0;
    //Instruction 4540
    //LOG
    t16_22 = log2(t16_22);
    //Instruction 4541
    //MUL
    t16_22 = t16_22 * 0.750000;
    //Instruction 4542
    //EXP
    t16_22 = exp2(t16_22);
    //Instruction 4543
    //MUL
    t16_22 = t16_22 * 7.000000;
    //Instruction 4544
    //SAMPLE_L
    t10_2 = textureLod(unity_SpecCube0, t16_3.xyz, t16_22);
    //Instruction 4545
    //MUL
    t16_22 = t10_2.w * unity_SpecCube0_HDR.x;
    //Instruction 4546
    //MUL
    t16_4.xyz = t10_2.xyz * vec3(t16_22);
    //Instruction 4547
    //MUL
    t16_4.xyz = t16_0.www * t16_4.xyz;
    //Instruction 4548
    //MUL
    t16_1.xyz = t16_1.xyz * t16_4.xyz;
    //Instruction 4549
    //MAD
    SV_Target3.xyz = t16_5.xyz * t16_0.xyz + t16_1.xyz;
    //Instruction 4550
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 4551
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_NORMALMAP" }
"!!GLES3"
}
}
 }
}
SubShader { 
 LOD 150
 Tags { "RenderType"="Opaque" "PerformanceChecks"="False" }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  ZWrite [_ZWrite]
  Blend [_SrcBlend] [_DstBlend]
  GpuProgramID 374778
Program "vp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_Object2World * _glesVertex);
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_10;
  texcoord_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_12;
  n_12 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_13;
  norm_13 = tmpvar_1;
  highp vec4 v_14;
  v_14.x = _World2Object[0].x;
  v_14.y = _World2Object[1].x;
  v_14.z = _World2Object[2].x;
  v_14.w = _World2Object[3].x;
  highp vec4 v_15;
  v_15.x = _World2Object[0].y;
  v_15.y = _World2Object[1].y;
  v_15.z = _World2Object[2].y;
  v_15.w = _World2Object[3].y;
  highp vec4 v_16;
  v_16.x = _World2Object[0].z;
  v_16.y = _World2Object[1].z;
  v_16.z = _World2Object[2].z;
  v_16.w = _World2Object[3].z;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(((
    (v_14.xyz * norm_13.x)
   + 
    (v_15.xyz * norm_13.y)
  ) + (v_16.xyz * norm_13.z)));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_17;
  mediump vec4 normal_19;
  normal_19 = tmpvar_18;
  mediump vec3 x2_20;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, normal_19);
  x1_21.y = dot (unity_SHAg, normal_19);
  x1_21.z = dot (unity_SHAb, normal_19);
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_19.xyzz * normal_19.yzzx);
  x2_20.x = dot (unity_SHBr, tmpvar_22);
  x2_20.y = dot (unity_SHBg, tmpvar_22);
  x2_20.z = dot (unity_SHBb, tmpvar_22);
  tmpvar_8.xyz = ((x2_20 + (unity_SHC.xyz * 
    ((normal_19.x * normal_19.x) - (normal_19.y * normal_19.y))
  )) + x1_21);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = normalize(n_12);
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 c_1;
  mediump vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_5;
  mediump float oneMinusReflectivity_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  oneMinusReflectivity_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_5 = (tmpvar_4 * oneMinusReflectivity_6);
  mediump vec3 tmpvar_8;
  tmpvar_8 = _LightColor0.xyz;
  mediump float tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_9 = tmpvar_10.y;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = -(xlv_TEXCOORD1);
  tmpvar_11 = tmpvar_13;
  tmpvar_12 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_14;
  mediump vec3 worldNormal_15;
  highp vec3 tmpvar_16;
  highp vec3 I_17;
  I_17 = -(tmpvar_11);
  tmpvar_16 = (I_17 - (2.0 * (
    dot (tmpvar_2, I_17)
   * tmpvar_2)));
  worldNormal_15 = tmpvar_16;
  mediump vec4 hdr_18;
  hdr_18 = tmpvar_12;
  highp float mip_19;
  mediump float tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (1.0 - _Glossiness);
  tmpvar_20 = (tmpvar_21 * 7.0);
  mip_19 = tmpvar_20;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = worldNormal_15;
  tmpvar_22.w = mip_19;
  lowp vec4 tmpvar_23;
  tmpvar_23 = textureCube (unity_SpecCube0, tmpvar_22.xyz, mip_19);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  tmpvar_14 = ((tmpvar_24.w * hdr_18.x) * tmpvar_24.xyz);
  tmpvar_14 = (tmpvar_14 * tmpvar_9);
  mediump vec2 tmpvar_25;
  tmpvar_25.x = dot ((tmpvar_13 - (2.0 * 
    (dot (tmpvar_2, tmpvar_13) * tmpvar_2)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_25.y = (1.0 - clamp (dot (tmpvar_2, tmpvar_13), 0.0, 1.0));
  mediump vec2 tmpvar_26;
  tmpvar_26 = ((tmpvar_25 * tmpvar_25) * (tmpvar_25 * tmpvar_25));
  mediump vec2 tmpvar_27;
  tmpvar_27.x = tmpvar_26.x;
  tmpvar_27.y = tmpvar_21;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_NHxRoughness, tmpvar_27);
  mediump vec3 tmpvar_29;
  tmpvar_29 = (((
    ((tmpvar_5 + ((tmpvar_28.w * 16.0) * tmpvar_7)) * tmpvar_8)
   * 
    clamp (dot (tmpvar_2, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_9)
   * tmpvar_5)) + (tmpvar_14 * mix (tmpvar_7, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_6)), 0.0, 1.0)
  ), tmpvar_26.yyy)));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = tmpvar_29;
  c_1.w = tmpvar_30.w;
  c_1.xyz = tmpvar_29;
  c_1.xyz = c_1.xyz;
  mediump vec4 xlat_varoutput_31;
  xlat_varoutput_31.xyz = c_1.xyz;
  xlat_varoutput_31.w = 1.0;
  gl_FragData[0] = xlat_varoutput_31;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
mediump vec3 t16_1;
highp vec3 t2;
mediump vec4 t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 4645
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4646
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4647
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4648
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4649
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 4650
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 4651
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 4652
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4653
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4654
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4655
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4656
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4657
    //ADD
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4658
    //DP3
    t16_1.x = dot(t0.xyz, t0.xyz);
    //Instruction 4659
    //RSQ
    t16_1.x = inversesqrt(t16_1.x);
    //Instruction 4660
    //MUL
    vs_TEXCOORD1.xyz = t0.xyz * t16_1.xxx;
    //Instruction 4661
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 4662
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 4663
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4664
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4665
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4666
    //MUL
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4667
    //MUL
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4668
    //MUL
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4669
    //ADD
    t0.xyz = t0.xyz + t2.xyz;
    //Instruction 4670
    //MUL
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4671
    //MUL
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4672
    //MUL
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4673
    //ADD
    t0.xyz = t0.xyz + t2.xyz;
    //Instruction 4674
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 4675
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 4676
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 4677
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 4678
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 4679
    //MUL
    t16_1.x = t0.y * t0.y;
    //Instruction 4680
    //MAD
    t16_1.x = t0.x * t0.x + (-t16_1.x);
    //Instruction 4681
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 4682
    //DP4
    t16_3.x = dot(unity_SHBr, t16_2);
    //Instruction 4683
    //DP4
    t16_3.y = dot(unity_SHBg, t16_2);
    //Instruction 4684
    //DP4
    t16_3.z = dot(unity_SHBb, t16_2);
    //Instruction 4685
    //MAD
    t16_1.xyz = unity_SHC.xyz * t16_1.xxx + t16_3.xyz;
    //Instruction 4686
    //MOV
    t0.w = 1.0;
    //Instruction 4687
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 4688
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 4689
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 4690
    //ADD
    vs_TEXCOORD5.xyz = t16_1.xyz + t16_3.xyz;
    //Instruction 4691
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 4692
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec4 t10_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump float t16_3;
lowp float t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_9;
mediump vec3 t16_10;
lowp vec3 t10_10;
mediump float t16_21;
mediump float t16_22;
void main()
{
    //Instruction 4603
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 4604
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 4605
    //MUL
    t16_0.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 4606
    //DP3
    t16_21 = dot((-vs_TEXCOORD1.xyz), t16_0.xyz);
    //Instruction 4607
    //ADD
    t16_1.x = t16_21 + t16_21;
    //Instruction 4608
    //MOV
    t16_21 = t16_21;
    t16_21 = clamp(t16_21, 0.0, 1.0);
    //Instruction 4609
    //ADD
    t16_2.y = (-t16_21) + 1.0;
    //Instruction 4610
    //MAD
    t16_1.xyz = t16_0.xyz * (-t16_1.xxx) + (-vs_TEXCOORD1.xyz);
    //Instruction 4611
    //DP3
    t16_2.x = dot(t16_1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 4612
    //MUL
    t16_1.xy = t16_2.xy * t16_2.xy;
    //Instruction 4613
    //MUL
    t16_1.yz = t16_1.xy * t16_1.xy;
    //Instruction 4614
    //ADD
    t16_1.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    //Instruction 4615
    //SAMPLE
    t10_3 = texture(unity_NHxRoughness, t16_1.yw).w;
    //Instruction 4616
    //MUL
    t16_21 = t16_1.x * 7.000000;
    //Instruction 4617
    //MUL
    t16_3 = t10_3 * 16.000000;
    //Instruction 4618
    //SAMPLE
    t10_10.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4619
    //MUL
    t16_4.xyz = t10_10.xyz * _Color.xyz;
    //Instruction 4620
    //MAD
    t16_1.xyw = _Color.xyz * t10_10.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 4621
    //MAD
    t16_1.xyw = vec3(_Metallic) * t16_1.xyw + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 4622
    //MAD
    t16_2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 4623
    //MUL
    t16_9.xyz = t16_2.xxx * t16_4.xyz;
    //Instruction 4624
    //ADD
    t16_2.x = (-t16_2.x) + _Glossiness;
    //Instruction 4625
    //ADD
    t16_2.x = t16_2.x + 1.0;
    t16_2.x = clamp(t16_2.x, 0.0, 1.0);
    //Instruction 4626
    //ADD
    t16_5.xyz = (-t16_1.xyw) + t16_2.xxx;
    //Instruction 4627
    //MAD
    t16_5.xyz = t16_1.zzz * t16_5.xyz + t16_1.xyw;
    //Instruction 4628
    //MAD
    t16_1.xyz = vec3(t16_3) * t16_1.xyw + t16_9.xyz;
    //Instruction 4629
    //MUL
    t16_1.xyz = t16_1.xyz * _LightColor0.xyz;
    //Instruction 4630
    //SAMPLE
    t10_3 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 4631
    //MUL
    t16_6.xyz = vec3(t10_3) * vs_TEXCOORD5.xyz;
    //Instruction 4632
    //MUL
    t16_2.xyz = t16_9.xyz * t16_6.xyz;
    //Instruction 4633
    //DP3
    t16_22 = dot(t16_0.xyz, _WorldSpaceLightPos0.xyz);
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 4634
    //MAD
    t16_1.xyz = t16_1.xyz * vec3(t16_22) + t16_2.xyz;
    //Instruction 4635
    //DP3
    t16_10.x = dot(vs_TEXCOORD1.xyz, t16_0.xyz);
    //Instruction 4636
    //ADD
    t16_10.x = t16_10.x + t16_10.x;
    //Instruction 4637
    //MAD
    t16_10.xyz = t16_0.xyz * (-t16_10.xxx) + vs_TEXCOORD1.xyz;
    //Instruction 4638
    //SAMPLE_L
    t10_0 = textureLod(unity_SpecCube0, t16_10.xyz, t16_21);
    //Instruction 4639
    //MUL
    t16_22 = t10_0.w * unity_SpecCube0_HDR.x;
    //Instruction 4640
    //MUL
    t16_2.xyz = t10_0.xyz * vec3(t16_22);
    //Instruction 4641
    //MUL
    t16_2.xyz = vec3(t10_3) * t16_2.xyz;
    //Instruction 4642
    //MAD
    SV_Target0.xyz = t16_2.xyz * t16_5.xyz + t16_1.xyz;
    //Instruction 4643
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4644
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_13;
  n_13 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_14;
  norm_14 = tmpvar_1;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_18;
  mediump vec4 normal_20;
  normal_20 = tmpvar_19;
  mediump vec3 x2_21;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, normal_20);
  x1_22.y = dot (unity_SHAg, normal_20);
  x1_22.z = dot (unity_SHAb, normal_20);
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_20.xyzz * normal_20.yzzx);
  x2_21.x = dot (unity_SHBr, tmpvar_23);
  x2_21.y = dot (unity_SHBg, tmpvar_23);
  x2_21.z = dot (unity_SHBb, tmpvar_23);
  tmpvar_8.xyz = ((x2_21 + (unity_SHC.xyz * 
    ((normal_20.x * normal_20.x) - (normal_20.y * normal_20.y))
  )) + x1_22);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = normalize(n_13);
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  mediump float atten_2;
  mediump vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_6;
  mediump float oneMinusReflectivity_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  oneMinusReflectivity_7 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * oneMinusReflectivity_7);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  lowp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_10 = tmpvar_11;
  atten_2 = tmpvar_10;
  mediump float tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_12 = tmpvar_13.y;
  highp vec3 tmpvar_14;
  highp vec4 tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = -(xlv_TEXCOORD1);
  tmpvar_14 = tmpvar_16;
  tmpvar_15 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_17;
  mediump vec3 worldNormal_18;
  highp vec3 tmpvar_19;
  highp vec3 I_20;
  I_20 = -(tmpvar_14);
  tmpvar_19 = (I_20 - (2.0 * (
    dot (tmpvar_3, I_20)
   * tmpvar_3)));
  worldNormal_18 = tmpvar_19;
  mediump vec4 hdr_21;
  hdr_21 = tmpvar_15;
  highp float mip_22;
  mediump float tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = (1.0 - _Glossiness);
  tmpvar_23 = (tmpvar_24 * 7.0);
  mip_22 = tmpvar_23;
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = worldNormal_18;
  tmpvar_25.w = mip_22;
  lowp vec4 tmpvar_26;
  tmpvar_26 = textureCube (unity_SpecCube0, tmpvar_25.xyz, mip_22);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  tmpvar_17 = ((tmpvar_27.w * hdr_21.x) * tmpvar_27.xyz);
  tmpvar_17 = (tmpvar_17 * tmpvar_12);
  mediump vec2 tmpvar_28;
  tmpvar_28.x = dot ((tmpvar_16 - (2.0 * 
    (dot (tmpvar_3, tmpvar_16) * tmpvar_3)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_28.y = (1.0 - clamp (dot (tmpvar_3, tmpvar_16), 0.0, 1.0));
  mediump vec2 tmpvar_29;
  tmpvar_29 = ((tmpvar_28 * tmpvar_28) * (tmpvar_28 * tmpvar_28));
  mediump vec2 tmpvar_30;
  tmpvar_30.x = tmpvar_29.x;
  tmpvar_30.y = tmpvar_24;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (unity_NHxRoughness, tmpvar_30);
  mediump vec3 tmpvar_32;
  tmpvar_32 = (((
    ((tmpvar_6 + ((tmpvar_31.w * 16.0) * tmpvar_8)) * (tmpvar_9 * atten_2))
   * 
    clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_12)
   * tmpvar_6)) + (tmpvar_17 * mix (tmpvar_8, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_7)), 0.0, 1.0)
  ), tmpvar_29.yyy)));
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = tmpvar_32;
  c_1.w = tmpvar_33.w;
  c_1.xyz = tmpvar_32;
  c_1.xyz = c_1.xyz;
  mediump vec4 xlat_varoutput_34;
  xlat_varoutput_34.xyz = c_1.xyz;
  xlat_varoutput_34.w = 1.0;
  gl_FragData[0] = xlat_varoutput_34;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_Object2World * _glesVertex);
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_10;
  texcoord_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_12;
  n_12 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_13;
  norm_13 = tmpvar_1;
  highp vec4 v_14;
  v_14.x = _World2Object[0].x;
  v_14.y = _World2Object[1].x;
  v_14.z = _World2Object[2].x;
  v_14.w = _World2Object[3].x;
  highp vec4 v_15;
  v_15.x = _World2Object[0].y;
  v_15.y = _World2Object[1].y;
  v_15.z = _World2Object[2].y;
  v_15.w = _World2Object[3].y;
  highp vec4 v_16;
  v_16.x = _World2Object[0].z;
  v_16.y = _World2Object[1].z;
  v_16.z = _World2Object[2].z;
  v_16.w = _World2Object[3].z;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(((
    (v_14.xyz * norm_13.x)
   + 
    (v_15.xyz * norm_13.y)
  ) + (v_16.xyz * norm_13.z)));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_17;
  mediump vec4 normal_19;
  normal_19 = tmpvar_18;
  mediump vec3 x2_20;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, normal_19);
  x1_21.y = dot (unity_SHAg, normal_19);
  x1_21.z = dot (unity_SHAb, normal_19);
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_19.xyzz * normal_19.yzzx);
  x2_20.x = dot (unity_SHBr, tmpvar_22);
  x2_20.y = dot (unity_SHBg, tmpvar_22);
  x2_20.z = dot (unity_SHBb, tmpvar_22);
  tmpvar_8.xyz = ((x2_20 + (unity_SHC.xyz * 
    ((normal_19.x * normal_19.x) - (normal_19.y * normal_19.y))
  )) + x1_21);
  highp vec3 lightColor0_23;
  lightColor0_23 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_24;
  lightColor1_24 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_25;
  lightColor2_25 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_26;
  lightColor3_26 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_27;
  lightAttenSq_27 = unity_4LightAtten0;
  highp vec3 col_28;
  highp vec4 ndotl_29;
  highp vec4 lengthSq_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  ndotl_29 = (tmpvar_31 * tmpvar_17.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * tmpvar_17.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * tmpvar_17.z));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * inversesqrt(lengthSq_30)));
  ndotl_29 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (lengthSq_30 * lightAttenSq_27)
  ))));
  col_28 = (lightColor0_23 * tmpvar_35.x);
  col_28 = (col_28 + (lightColor1_24 * tmpvar_35.y));
  col_28 = (col_28 + (lightColor2_25 * tmpvar_35.z));
  col_28 = (col_28 + (lightColor3_26 * tmpvar_35.w));
  tmpvar_8.xyz = (tmpvar_8.xyz + col_28);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = normalize(n_12);
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 c_1;
  mediump vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_5;
  mediump float oneMinusReflectivity_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  oneMinusReflectivity_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_5 = (tmpvar_4 * oneMinusReflectivity_6);
  mediump vec3 tmpvar_8;
  tmpvar_8 = _LightColor0.xyz;
  mediump float tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_9 = tmpvar_10.y;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = -(xlv_TEXCOORD1);
  tmpvar_11 = tmpvar_13;
  tmpvar_12 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_14;
  mediump vec3 worldNormal_15;
  highp vec3 tmpvar_16;
  highp vec3 I_17;
  I_17 = -(tmpvar_11);
  tmpvar_16 = (I_17 - (2.0 * (
    dot (tmpvar_2, I_17)
   * tmpvar_2)));
  worldNormal_15 = tmpvar_16;
  mediump vec4 hdr_18;
  hdr_18 = tmpvar_12;
  highp float mip_19;
  mediump float tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (1.0 - _Glossiness);
  tmpvar_20 = (tmpvar_21 * 7.0);
  mip_19 = tmpvar_20;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = worldNormal_15;
  tmpvar_22.w = mip_19;
  lowp vec4 tmpvar_23;
  tmpvar_23 = textureCube (unity_SpecCube0, tmpvar_22.xyz, mip_19);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  tmpvar_14 = ((tmpvar_24.w * hdr_18.x) * tmpvar_24.xyz);
  tmpvar_14 = (tmpvar_14 * tmpvar_9);
  mediump vec2 tmpvar_25;
  tmpvar_25.x = dot ((tmpvar_13 - (2.0 * 
    (dot (tmpvar_2, tmpvar_13) * tmpvar_2)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_25.y = (1.0 - clamp (dot (tmpvar_2, tmpvar_13), 0.0, 1.0));
  mediump vec2 tmpvar_26;
  tmpvar_26 = ((tmpvar_25 * tmpvar_25) * (tmpvar_25 * tmpvar_25));
  mediump vec2 tmpvar_27;
  tmpvar_27.x = tmpvar_26.x;
  tmpvar_27.y = tmpvar_21;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_NHxRoughness, tmpvar_27);
  mediump vec3 tmpvar_29;
  tmpvar_29 = (((
    ((tmpvar_5 + ((tmpvar_28.w * 16.0) * tmpvar_7)) * tmpvar_8)
   * 
    clamp (dot (tmpvar_2, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_9)
   * tmpvar_5)) + (tmpvar_14 * mix (tmpvar_7, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_6)), 0.0, 1.0)
  ), tmpvar_26.yyy)));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = tmpvar_29;
  c_1.w = tmpvar_30.w;
  c_1.xyz = tmpvar_29;
  c_1.xyz = c_1.xyz;
  mediump vec4 xlat_varoutput_31;
  xlat_varoutput_31.xyz = c_1.xyz;
  xlat_varoutput_31.w = 1.0;
  gl_FragData[0] = xlat_varoutput_31;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec4 t4;
mediump vec3 t16_4;
highp vec4 t5;
highp float t18;
void main()
{
    //Instruction 4735
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4736
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4737
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4738
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4739
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 4740
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 4741
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 4742
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4743
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4744
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4745
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4746
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4747
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4748
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 4749
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 4750
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 4751
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 4752
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 4753
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 4754
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4755
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4756
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4757
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4758
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4759
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4760
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 4761
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4762
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4763
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4764
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 4765
    //DP3
    t18 = dot(t1.xyz, t1.xyz);
    //Instruction 4766
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 4767
    //MUL
    t1.xyz = vec3(t18) * t1.xyz;
    //Instruction 4768
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 4769
    //MUL
    t16_2.x = t1.y * t1.y;
    //Instruction 4770
    //MAD
    t16_2.x = t1.x * t1.x + (-t16_2.x);
    //Instruction 4771
    //MUL
    t16_3 = t1.yzzx * t1.xyzz;
    //Instruction 4772
    //DP4
    t16_4.x = dot(unity_SHBr, t16_3);
    //Instruction 4773
    //DP4
    t16_4.y = dot(unity_SHBg, t16_3);
    //Instruction 4774
    //DP4
    t16_4.z = dot(unity_SHBb, t16_3);
    //Instruction 4775
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_4.xyz;
    //Instruction 4776
    //MOV
    t1.w = 1.0;
    //Instruction 4777
    //DP4
    t16_4.x = dot(unity_SHAr, t1);
    //Instruction 4778
    //DP4
    t16_4.y = dot(unity_SHAg, t1);
    //Instruction 4779
    //DP4
    t16_4.z = dot(unity_SHAb, t1);
    //Instruction 4780
    //ADD
    t16_2.xyz = t16_2.xyz + t16_4.xyz;
    //Instruction 4781
    //ADD
    t3 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 4782
    //MUL
    t4 = t1.yyyy * t3;
    //Instruction 4783
    //MUL
    t3 = t3 * t3;
    //Instruction 4784
    //ADD
    t5 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 4785
    //ADD
    t0 = (-t0.zzzz) + unity_4LightPosZ0;
    //Instruction 4786
    //MAD
    t4 = t5 * t1.xxxx + t4;
    //Instruction 4787
    //MAD
    t1 = t0 * t1.zzzz + t4;
    //Instruction 4788
    //MAD
    t3 = t5 * t5 + t3;
    //Instruction 4789
    //MAD
    t0 = t0 * t0 + t3;
    //Instruction 4790
    //RSQ
    t3 = inversesqrt(t0);
    //Instruction 4791
    //MAD
    t0 = t0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 4792
    //DIV
    t0 = vec4(1.0, 1.0, 1.0, 1.0) / t0;
    //Instruction 4793
    //MUL
    t1 = t1 * t3;
    //Instruction 4794
    //MAX
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 4795
    //MUL
    t0 = t0 * t1;
    //Instruction 4796
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 4797
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 4798
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 4799
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 4800
    //ADD
    t0.xyz = t0.xyz + t16_2.xyz;
    //Instruction 4801
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 4802
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 4803
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec4 t10_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump float t16_3;
lowp float t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_9;
mediump vec3 t16_10;
lowp vec3 t10_10;
mediump float t16_21;
mediump float t16_22;
void main()
{
    //Instruction 4693
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 4694
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 4695
    //MUL
    t16_0.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 4696
    //DP3
    t16_21 = dot((-vs_TEXCOORD1.xyz), t16_0.xyz);
    //Instruction 4697
    //ADD
    t16_1.x = t16_21 + t16_21;
    //Instruction 4698
    //MOV
    t16_21 = t16_21;
    t16_21 = clamp(t16_21, 0.0, 1.0);
    //Instruction 4699
    //ADD
    t16_2.y = (-t16_21) + 1.0;
    //Instruction 4700
    //MAD
    t16_1.xyz = t16_0.xyz * (-t16_1.xxx) + (-vs_TEXCOORD1.xyz);
    //Instruction 4701
    //DP3
    t16_2.x = dot(t16_1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 4702
    //MUL
    t16_1.xy = t16_2.xy * t16_2.xy;
    //Instruction 4703
    //MUL
    t16_1.yz = t16_1.xy * t16_1.xy;
    //Instruction 4704
    //ADD
    t16_1.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    //Instruction 4705
    //SAMPLE
    t10_3 = texture(unity_NHxRoughness, t16_1.yw).w;
    //Instruction 4706
    //MUL
    t16_21 = t16_1.x * 7.000000;
    //Instruction 4707
    //MUL
    t16_3 = t10_3 * 16.000000;
    //Instruction 4708
    //SAMPLE
    t10_10.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4709
    //MUL
    t16_4.xyz = t10_10.xyz * _Color.xyz;
    //Instruction 4710
    //MAD
    t16_1.xyw = _Color.xyz * t10_10.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 4711
    //MAD
    t16_1.xyw = vec3(_Metallic) * t16_1.xyw + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 4712
    //MAD
    t16_2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 4713
    //MUL
    t16_9.xyz = t16_2.xxx * t16_4.xyz;
    //Instruction 4714
    //ADD
    t16_2.x = (-t16_2.x) + _Glossiness;
    //Instruction 4715
    //ADD
    t16_2.x = t16_2.x + 1.0;
    t16_2.x = clamp(t16_2.x, 0.0, 1.0);
    //Instruction 4716
    //ADD
    t16_5.xyz = (-t16_1.xyw) + t16_2.xxx;
    //Instruction 4717
    //MAD
    t16_5.xyz = t16_1.zzz * t16_5.xyz + t16_1.xyw;
    //Instruction 4718
    //MAD
    t16_1.xyz = vec3(t16_3) * t16_1.xyw + t16_9.xyz;
    //Instruction 4719
    //MUL
    t16_1.xyz = t16_1.xyz * _LightColor0.xyz;
    //Instruction 4720
    //SAMPLE
    t10_3 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 4721
    //MUL
    t16_6.xyz = vec3(t10_3) * vs_TEXCOORD5.xyz;
    //Instruction 4722
    //MUL
    t16_2.xyz = t16_9.xyz * t16_6.xyz;
    //Instruction 4723
    //DP3
    t16_22 = dot(t16_0.xyz, _WorldSpaceLightPos0.xyz);
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 4724
    //MAD
    t16_1.xyz = t16_1.xyz * vec3(t16_22) + t16_2.xyz;
    //Instruction 4725
    //DP3
    t16_10.x = dot(vs_TEXCOORD1.xyz, t16_0.xyz);
    //Instruction 4726
    //ADD
    t16_10.x = t16_10.x + t16_10.x;
    //Instruction 4727
    //MAD
    t16_10.xyz = t16_0.xyz * (-t16_10.xxx) + vs_TEXCOORD1.xyz;
    //Instruction 4728
    //SAMPLE_L
    t10_0 = textureLod(unity_SpecCube0, t16_10.xyz, t16_21);
    //Instruction 4729
    //MUL
    t16_22 = t10_0.w * unity_SpecCube0_HDR.x;
    //Instruction 4730
    //MUL
    t16_2.xyz = t10_0.xyz * vec3(t16_22);
    //Instruction 4731
    //MUL
    t16_2.xyz = vec3(t10_3) * t16_2.xyz;
    //Instruction 4732
    //MAD
    SV_Target0.xyz = t16_2.xyz * t16_5.xyz + t16_1.xyz;
    //Instruction 4733
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4734
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_13;
  n_13 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_14;
  norm_14 = tmpvar_1;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_18;
  mediump vec4 normal_20;
  normal_20 = tmpvar_19;
  mediump vec3 x2_21;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, normal_20);
  x1_22.y = dot (unity_SHAg, normal_20);
  x1_22.z = dot (unity_SHAb, normal_20);
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_20.xyzz * normal_20.yzzx);
  x2_21.x = dot (unity_SHBr, tmpvar_23);
  x2_21.y = dot (unity_SHBg, tmpvar_23);
  x2_21.z = dot (unity_SHBb, tmpvar_23);
  tmpvar_8.xyz = ((x2_21 + (unity_SHC.xyz * 
    ((normal_20.x * normal_20.x) - (normal_20.y * normal_20.y))
  )) + x1_22);
  highp vec3 lightColor0_24;
  lightColor0_24 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_25;
  lightColor1_25 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_26;
  lightColor2_26 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_27;
  lightColor3_27 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_28;
  lightAttenSq_28 = unity_4LightAtten0;
  highp vec3 col_29;
  highp vec4 ndotl_30;
  highp vec4 lengthSq_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosX0 - tmpvar_10.x);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosY0 - tmpvar_10.y);
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_4LightPosZ0 - tmpvar_10.z);
  lengthSq_31 = (tmpvar_32 * tmpvar_32);
  lengthSq_31 = (lengthSq_31 + (tmpvar_33 * tmpvar_33));
  lengthSq_31 = (lengthSq_31 + (tmpvar_34 * tmpvar_34));
  ndotl_30 = (tmpvar_32 * tmpvar_18.x);
  ndotl_30 = (ndotl_30 + (tmpvar_33 * tmpvar_18.y));
  ndotl_30 = (ndotl_30 + (tmpvar_34 * tmpvar_18.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_30 * inversesqrt(lengthSq_31)));
  ndotl_30 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (lengthSq_31 * lightAttenSq_28)
  ))));
  col_29 = (lightColor0_24 * tmpvar_36.x);
  col_29 = (col_29 + (lightColor1_25 * tmpvar_36.y));
  col_29 = (col_29 + (lightColor2_26 * tmpvar_36.z));
  col_29 = (col_29 + (lightColor3_27 * tmpvar_36.w));
  tmpvar_8.xyz = (tmpvar_8.xyz + col_29);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = normalize(n_13);
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  mediump float atten_2;
  mediump vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_6;
  mediump float oneMinusReflectivity_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  oneMinusReflectivity_7 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * oneMinusReflectivity_7);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  lowp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_10 = tmpvar_11;
  atten_2 = tmpvar_10;
  mediump float tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_12 = tmpvar_13.y;
  highp vec3 tmpvar_14;
  highp vec4 tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = -(xlv_TEXCOORD1);
  tmpvar_14 = tmpvar_16;
  tmpvar_15 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_17;
  mediump vec3 worldNormal_18;
  highp vec3 tmpvar_19;
  highp vec3 I_20;
  I_20 = -(tmpvar_14);
  tmpvar_19 = (I_20 - (2.0 * (
    dot (tmpvar_3, I_20)
   * tmpvar_3)));
  worldNormal_18 = tmpvar_19;
  mediump vec4 hdr_21;
  hdr_21 = tmpvar_15;
  highp float mip_22;
  mediump float tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = (1.0 - _Glossiness);
  tmpvar_23 = (tmpvar_24 * 7.0);
  mip_22 = tmpvar_23;
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = worldNormal_18;
  tmpvar_25.w = mip_22;
  lowp vec4 tmpvar_26;
  tmpvar_26 = textureCube (unity_SpecCube0, tmpvar_25.xyz, mip_22);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  tmpvar_17 = ((tmpvar_27.w * hdr_21.x) * tmpvar_27.xyz);
  tmpvar_17 = (tmpvar_17 * tmpvar_12);
  mediump vec2 tmpvar_28;
  tmpvar_28.x = dot ((tmpvar_16 - (2.0 * 
    (dot (tmpvar_3, tmpvar_16) * tmpvar_3)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_28.y = (1.0 - clamp (dot (tmpvar_3, tmpvar_16), 0.0, 1.0));
  mediump vec2 tmpvar_29;
  tmpvar_29 = ((tmpvar_28 * tmpvar_28) * (tmpvar_28 * tmpvar_28));
  mediump vec2 tmpvar_30;
  tmpvar_30.x = tmpvar_29.x;
  tmpvar_30.y = tmpvar_24;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (unity_NHxRoughness, tmpvar_30);
  mediump vec3 tmpvar_32;
  tmpvar_32 = (((
    ((tmpvar_6 + ((tmpvar_31.w * 16.0) * tmpvar_8)) * (tmpvar_9 * atten_2))
   * 
    clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_12)
   * tmpvar_6)) + (tmpvar_17 * mix (tmpvar_8, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_7)), 0.0, 1.0)
  ), tmpvar_29.yyy)));
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = tmpvar_32;
  c_1.w = tmpvar_33.w;
  c_1.xyz = tmpvar_32;
  c_1.xyz = c_1.xyz;
  mediump vec4 xlat_varoutput_34;
  xlat_varoutput_34.xyz = c_1.xyz;
  xlat_varoutput_34.w = 1.0;
  gl_FragData[0] = xlat_varoutput_34;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_13;
  n_13 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_14;
  norm_14 = tmpvar_1;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_18;
  mediump vec4 normal_20;
  normal_20 = tmpvar_19;
  mediump vec3 x2_21;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, normal_20);
  x1_22.y = dot (unity_SHAg, normal_20);
  x1_22.z = dot (unity_SHAb, normal_20);
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_20.xyzz * normal_20.yzzx);
  x2_21.x = dot (unity_SHBr, tmpvar_23);
  x2_21.y = dot (unity_SHBg, tmpvar_23);
  x2_21.z = dot (unity_SHBb, tmpvar_23);
  tmpvar_8.xyz = ((x2_21 + (unity_SHC.xyz * 
    ((normal_20.x * normal_20.x) - (normal_20.y * normal_20.y))
  )) + x1_22);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = normalize(n_13);
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform lowp sampler2DShadow _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  mediump float atten_2;
  mediump vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_6;
  mediump float oneMinusReflectivity_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  oneMinusReflectivity_7 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * oneMinusReflectivity_7);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  lowp float shadow_10;
  shadow_10 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  atten_2 = shadow_10;
  mediump float tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_11 = tmpvar_12.y;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = -(xlv_TEXCOORD1);
  tmpvar_13 = tmpvar_15;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_16;
  mediump vec3 worldNormal_17;
  highp vec3 tmpvar_18;
  highp vec3 I_19;
  I_19 = -(tmpvar_13);
  tmpvar_18 = (I_19 - (2.0 * (
    dot (tmpvar_3, I_19)
   * tmpvar_3)));
  worldNormal_17 = tmpvar_18;
  mediump vec4 hdr_20;
  hdr_20 = tmpvar_14;
  highp float mip_21;
  mediump float tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = (1.0 - _Glossiness);
  tmpvar_22 = (tmpvar_23 * 7.0);
  mip_21 = tmpvar_22;
  highp vec4 tmpvar_24;
  tmpvar_24.xyz = worldNormal_17;
  tmpvar_24.w = mip_21;
  lowp vec4 tmpvar_25;
  tmpvar_25 = textureCube (unity_SpecCube0, tmpvar_24.xyz, mip_21);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  tmpvar_16 = ((tmpvar_26.w * hdr_20.x) * tmpvar_26.xyz);
  tmpvar_16 = (tmpvar_16 * tmpvar_11);
  mediump vec2 tmpvar_27;
  tmpvar_27.x = dot ((tmpvar_15 - (2.0 * 
    (dot (tmpvar_3, tmpvar_15) * tmpvar_3)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_27.y = (1.0 - clamp (dot (tmpvar_3, tmpvar_15), 0.0, 1.0));
  mediump vec2 tmpvar_28;
  tmpvar_28 = ((tmpvar_27 * tmpvar_27) * (tmpvar_27 * tmpvar_27));
  mediump vec2 tmpvar_29;
  tmpvar_29.x = tmpvar_28.x;
  tmpvar_29.y = tmpvar_23;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (unity_NHxRoughness, tmpvar_29);
  mediump vec3 tmpvar_31;
  tmpvar_31 = (((
    ((tmpvar_6 + ((tmpvar_30.w * 16.0) * tmpvar_8)) * (tmpvar_9 * atten_2))
   * 
    clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_11)
   * tmpvar_6)) + (tmpvar_16 * mix (tmpvar_8, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_7)), 0.0, 1.0)
  ), tmpvar_28.yyy)));
  mediump vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = tmpvar_31;
  c_1.w = tmpvar_32.w;
  c_1.xyz = tmpvar_31;
  c_1.xyz = c_1.xyz;
  mediump vec4 xlat_varoutput_33;
  xlat_varoutput_33.xyz = c_1.xyz;
  xlat_varoutput_33.w = 1.0;
  gl_FragData[0] = xlat_varoutput_33;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_1;
highp vec3 t2;
mediump vec4 t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 4848
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4849
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4850
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4851
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4852
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 4853
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 4854
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 4855
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4856
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4857
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4858
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4859
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4860
    //ADD
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4861
    //DP3
    t16_1.x = dot(t0.xyz, t0.xyz);
    //Instruction 4862
    //RSQ
    t16_1.x = inversesqrt(t16_1.x);
    //Instruction 4863
    //MUL
    vs_TEXCOORD1.xyz = t0.xyz * t16_1.xxx;
    //Instruction 4864
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 4865
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 4866
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4867
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4868
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4869
    //MUL
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4870
    //MUL
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4871
    //MUL
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4872
    //ADD
    t0.xyz = t0.xyz + t2.xyz;
    //Instruction 4873
    //MUL
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4874
    //MUL
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4875
    //MUL
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4876
    //ADD
    t0.xyz = t0.xyz + t2.xyz;
    //Instruction 4877
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 4878
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 4879
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 4880
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 4881
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 4882
    //MUL
    t16_1.x = t0.y * t0.y;
    //Instruction 4883
    //MAD
    t16_1.x = t0.x * t0.x + (-t16_1.x);
    //Instruction 4884
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 4885
    //DP4
    t16_3.x = dot(unity_SHBr, t16_2);
    //Instruction 4886
    //DP4
    t16_3.y = dot(unity_SHBg, t16_2);
    //Instruction 4887
    //DP4
    t16_3.z = dot(unity_SHBb, t16_2);
    //Instruction 4888
    //MAD
    t16_1.xyz = unity_SHC.xyz * t16_1.xxx + t16_3.xyz;
    //Instruction 4889
    //MOV
    t0.w = 1.0;
    //Instruction 4890
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 4891
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 4892
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 4893
    //ADD
    vs_TEXCOORD5.xyz = t16_1.xyz + t16_3.xyz;
    //Instruction 4894
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 4895
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 4896
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 4897
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 4898
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 4899
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 4900
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 4901
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 4902
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 4903
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 4904
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
mediump vec4 t16_2;
mediump vec3 t16_3;
mediump float t16_4;
lowp float t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_7;
mediump vec3 t16_11;
lowp vec3 t10_11;
mediump float t16_21;
mediump float t16_22;
void main()
{
    //Instruction 4802
    //SAMPLE_C_LZ
    vec3 txVec16 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec16, 0.0);
    //Instruction 4803
    //ADD
    t16_7 = (-_LightShadowData.x) + 1.0;
    //Instruction 4804
    //MAD
    t16_0.x = t16_0.x * t16_7 + _LightShadowData.x;
    //Instruction 4805
    //MUL
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 4806
    //DP3
    t16_21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 4807
    //RSQ
    t16_21 = inversesqrt(t16_21);
    //Instruction 4808
    //MUL
    t16_1.xyz = vec3(t16_21) * vs_TEXCOORD4.xyz;
    //Instruction 4809
    //DP3
    t16_21 = dot((-vs_TEXCOORD1.xyz), t16_1.xyz);
    //Instruction 4810
    //ADD
    t16_22 = t16_21 + t16_21;
    //Instruction 4811
    //MOV
    t16_21 = t16_21;
    t16_21 = clamp(t16_21, 0.0, 1.0);
    //Instruction 4812
    //ADD
    t16_2.y = (-t16_21) + 1.0;
    //Instruction 4813
    //MAD
    t16_3.xyz = t16_1.xyz * (-vec3(t16_22)) + (-vs_TEXCOORD1.xyz);
    //Instruction 4814
    //DP3
    t16_2.x = dot(t16_3.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 4815
    //MUL
    t16_2.xy = t16_2.xy * t16_2.xy;
    //Instruction 4816
    //MUL
    t16_2.yz = t16_2.xy * t16_2.xy;
    //Instruction 4817
    //ADD
    t16_2.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    //Instruction 4818
    //SAMPLE
    t10_4 = texture(unity_NHxRoughness, t16_2.yw).w;
    //Instruction 4819
    //MUL
    t16_21 = t16_2.x * 7.000000;
    //Instruction 4820
    //MUL
    t16_4 = t10_4 * 16.000000;
    //Instruction 4821
    //SAMPLE
    t10_11.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4822
    //MUL
    t16_5.xyz = t10_11.xyz * _Color.xyz;
    //Instruction 4823
    //MAD
    t16_2.xyw = _Color.xyz * t10_11.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 4824
    //MAD
    t16_2.xyw = vec3(_Metallic) * t16_2.xyw + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 4825
    //MAD
    t16_22 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 4826
    //MUL
    t16_3.xyz = vec3(t16_22) * t16_5.xyz;
    //Instruction 4827
    //ADD
    t16_22 = (-t16_22) + _Glossiness;
    //Instruction 4828
    //ADD
    t16_22 = t16_22 + 1.0;
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 4829
    //ADD
    t16_6.xyz = (-t16_2.xyw) + vec3(t16_22);
    //Instruction 4830
    //MAD
    t16_6.xyz = t16_2.zzz * t16_6.xyz + t16_2.xyw;
    //Instruction 4831
    //MAD
    t16_2.xyz = vec3(t16_4) * t16_2.xyw + t16_3.xyz;
    //Instruction 4832
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 4833
    //SAMPLE
    t10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 4834
    //MUL
    t16_2.xyz = vec3(t10_4) * vs_TEXCOORD5.xyz;
    //Instruction 4835
    //MUL
    t16_2.xyz = t16_3.xyz * t16_2.xyz;
    //Instruction 4836
    //DP3
    t16_22 = dot(t16_1.xyz, _WorldSpaceLightPos0.xyz);
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 4837
    //MAD
    t16_0.xyz = t16_0.xyz * vec3(t16_22) + t16_2.xyz;
    //Instruction 4838
    //DP3
    t16_11.x = dot(vs_TEXCOORD1.xyz, t16_1.xyz);
    //Instruction 4839
    //ADD
    t16_11.x = t16_11.x + t16_11.x;
    //Instruction 4840
    //MAD
    t16_11.xyz = t16_1.xyz * (-t16_11.xxx) + vs_TEXCOORD1.xyz;
    //Instruction 4841
    //SAMPLE_L
    t10_1 = textureLod(unity_SpecCube0, t16_11.xyz, t16_21);
    //Instruction 4842
    //MUL
    t16_21 = t10_1.w * unity_SpecCube0_HDR.x;
    //Instruction 4843
    //MUL
    t16_2.xyz = t10_1.xyz * vec3(t16_21);
    //Instruction 4844
    //MUL
    t16_2.xyz = vec3(t10_4) * t16_2.xyz;
    //Instruction 4845
    //MAD
    SV_Target0.xyz = t16_2.xyz * t16_6.xyz + t16_0.xyz;
    //Instruction 4846
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4847
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_13;
  n_13 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_14;
  norm_14 = tmpvar_1;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_18;
  mediump vec4 normal_20;
  normal_20 = tmpvar_19;
  mediump vec3 x2_21;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, normal_20);
  x1_22.y = dot (unity_SHAg, normal_20);
  x1_22.z = dot (unity_SHAb, normal_20);
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_20.xyzz * normal_20.yzzx);
  x2_21.x = dot (unity_SHBr, tmpvar_23);
  x2_21.y = dot (unity_SHBg, tmpvar_23);
  x2_21.z = dot (unity_SHBb, tmpvar_23);
  tmpvar_8.xyz = ((x2_21 + (unity_SHC.xyz * 
    ((normal_20.x * normal_20.x) - (normal_20.y * normal_20.y))
  )) + x1_22);
  highp vec3 lightColor0_24;
  lightColor0_24 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_25;
  lightColor1_25 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_26;
  lightColor2_26 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_27;
  lightColor3_27 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_28;
  lightAttenSq_28 = unity_4LightAtten0;
  highp vec3 col_29;
  highp vec4 ndotl_30;
  highp vec4 lengthSq_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosX0 - tmpvar_10.x);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosY0 - tmpvar_10.y);
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_4LightPosZ0 - tmpvar_10.z);
  lengthSq_31 = (tmpvar_32 * tmpvar_32);
  lengthSq_31 = (lengthSq_31 + (tmpvar_33 * tmpvar_33));
  lengthSq_31 = (lengthSq_31 + (tmpvar_34 * tmpvar_34));
  ndotl_30 = (tmpvar_32 * tmpvar_18.x);
  ndotl_30 = (ndotl_30 + (tmpvar_33 * tmpvar_18.y));
  ndotl_30 = (ndotl_30 + (tmpvar_34 * tmpvar_18.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_30 * inversesqrt(lengthSq_31)));
  ndotl_30 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (lengthSq_31 * lightAttenSq_28)
  ))));
  col_29 = (lightColor0_24 * tmpvar_36.x);
  col_29 = (col_29 + (lightColor1_25 * tmpvar_36.y));
  col_29 = (col_29 + (lightColor2_26 * tmpvar_36.z));
  col_29 = (col_29 + (lightColor3_27 * tmpvar_36.w));
  tmpvar_8.xyz = (tmpvar_8.xyz + col_29);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = normalize(n_13);
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform lowp sampler2DShadow _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  mediump float atten_2;
  mediump vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_6;
  mediump float oneMinusReflectivity_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  oneMinusReflectivity_7 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * oneMinusReflectivity_7);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  lowp float shadow_10;
  shadow_10 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  atten_2 = shadow_10;
  mediump float tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_11 = tmpvar_12.y;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = -(xlv_TEXCOORD1);
  tmpvar_13 = tmpvar_15;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_16;
  mediump vec3 worldNormal_17;
  highp vec3 tmpvar_18;
  highp vec3 I_19;
  I_19 = -(tmpvar_13);
  tmpvar_18 = (I_19 - (2.0 * (
    dot (tmpvar_3, I_19)
   * tmpvar_3)));
  worldNormal_17 = tmpvar_18;
  mediump vec4 hdr_20;
  hdr_20 = tmpvar_14;
  highp float mip_21;
  mediump float tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = (1.0 - _Glossiness);
  tmpvar_22 = (tmpvar_23 * 7.0);
  mip_21 = tmpvar_22;
  highp vec4 tmpvar_24;
  tmpvar_24.xyz = worldNormal_17;
  tmpvar_24.w = mip_21;
  lowp vec4 tmpvar_25;
  tmpvar_25 = textureCube (unity_SpecCube0, tmpvar_24.xyz, mip_21);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  tmpvar_16 = ((tmpvar_26.w * hdr_20.x) * tmpvar_26.xyz);
  tmpvar_16 = (tmpvar_16 * tmpvar_11);
  mediump vec2 tmpvar_27;
  tmpvar_27.x = dot ((tmpvar_15 - (2.0 * 
    (dot (tmpvar_3, tmpvar_15) * tmpvar_3)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_27.y = (1.0 - clamp (dot (tmpvar_3, tmpvar_15), 0.0, 1.0));
  mediump vec2 tmpvar_28;
  tmpvar_28 = ((tmpvar_27 * tmpvar_27) * (tmpvar_27 * tmpvar_27));
  mediump vec2 tmpvar_29;
  tmpvar_29.x = tmpvar_28.x;
  tmpvar_29.y = tmpvar_23;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (unity_NHxRoughness, tmpvar_29);
  mediump vec3 tmpvar_31;
  tmpvar_31 = (((
    ((tmpvar_6 + ((tmpvar_30.w * 16.0) * tmpvar_8)) * (tmpvar_9 * atten_2))
   * 
    clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_11)
   * tmpvar_6)) + (tmpvar_16 * mix (tmpvar_8, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_7)), 0.0, 1.0)
  ), tmpvar_28.yyy)));
  mediump vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = tmpvar_31;
  c_1.w = tmpvar_32.w;
  c_1.xyz = tmpvar_31;
  c_1.xyz = c_1.xyz;
  mediump vec4 xlat_varoutput_33;
  xlat_varoutput_33.xyz = c_1.xyz;
  xlat_varoutput_33.w = 1.0;
  gl_FragData[0] = xlat_varoutput_33;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec4 t4;
mediump vec3 t16_4;
highp vec4 t5;
highp float t18;
void main()
{
    //Instruction 4951
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4952
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4953
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4954
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4955
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 4956
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 4957
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 4958
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4959
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4960
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4961
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4962
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4963
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4964
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 4965
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 4966
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 4967
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 4968
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 4969
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 4970
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4971
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4972
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4973
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4974
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4975
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4976
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 4977
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4978
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4979
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4980
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 4981
    //DP3
    t18 = dot(t1.xyz, t1.xyz);
    //Instruction 4982
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 4983
    //MUL
    t1.xyz = vec3(t18) * t1.xyz;
    //Instruction 4984
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 4985
    //MUL
    t16_2.x = t1.y * t1.y;
    //Instruction 4986
    //MAD
    t16_2.x = t1.x * t1.x + (-t16_2.x);
    //Instruction 4987
    //MUL
    t16_3 = t1.yzzx * t1.xyzz;
    //Instruction 4988
    //DP4
    t16_4.x = dot(unity_SHBr, t16_3);
    //Instruction 4989
    //DP4
    t16_4.y = dot(unity_SHBg, t16_3);
    //Instruction 4990
    //DP4
    t16_4.z = dot(unity_SHBb, t16_3);
    //Instruction 4991
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_4.xyz;
    //Instruction 4992
    //MOV
    t1.w = 1.0;
    //Instruction 4993
    //DP4
    t16_4.x = dot(unity_SHAr, t1);
    //Instruction 4994
    //DP4
    t16_4.y = dot(unity_SHAg, t1);
    //Instruction 4995
    //DP4
    t16_4.z = dot(unity_SHAb, t1);
    //Instruction 4996
    //ADD
    t16_2.xyz = t16_2.xyz + t16_4.xyz;
    //Instruction 4997
    //ADD
    t3 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 4998
    //MUL
    t4 = t1.yyyy * t3;
    //Instruction 4999
    //MUL
    t3 = t3 * t3;
    //Instruction 5000
    //ADD
    t5 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 5001
    //ADD
    t0 = (-t0.zzzz) + unity_4LightPosZ0;
    //Instruction 5002
    //MAD
    t4 = t5 * t1.xxxx + t4;
    //Instruction 5003
    //MAD
    t1 = t0 * t1.zzzz + t4;
    //Instruction 5004
    //MAD
    t3 = t5 * t5 + t3;
    //Instruction 5005
    //MAD
    t0 = t0 * t0 + t3;
    //Instruction 5006
    //RSQ
    t3 = inversesqrt(t0);
    //Instruction 5007
    //MAD
    t0 = t0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 5008
    //DIV
    t0 = vec4(1.0, 1.0, 1.0, 1.0) / t0;
    //Instruction 5009
    //MUL
    t1 = t1 * t3;
    //Instruction 5010
    //MAX
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 5011
    //MUL
    t0 = t0 * t1;
    //Instruction 5012
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 5013
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 5014
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 5015
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 5016
    //ADD
    t0.xyz = t0.xyz + t16_2.xyz;
    //Instruction 5017
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 5018
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 5019
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 5020
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 5021
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 5022
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 5023
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 5024
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 5025
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 5026
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 5027
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 5028
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
mediump vec4 t16_2;
mediump vec3 t16_3;
mediump float t16_4;
lowp float t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_7;
mediump vec3 t16_11;
lowp vec3 t10_11;
mediump float t16_21;
mediump float t16_22;
void main()
{
    //Instruction 4905
    //SAMPLE_C_LZ
    vec3 txVec17 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec17, 0.0);
    //Instruction 4906
    //ADD
    t16_7 = (-_LightShadowData.x) + 1.0;
    //Instruction 4907
    //MAD
    t16_0.x = t16_0.x * t16_7 + _LightShadowData.x;
    //Instruction 4908
    //MUL
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 4909
    //DP3
    t16_21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 4910
    //RSQ
    t16_21 = inversesqrt(t16_21);
    //Instruction 4911
    //MUL
    t16_1.xyz = vec3(t16_21) * vs_TEXCOORD4.xyz;
    //Instruction 4912
    //DP3
    t16_21 = dot((-vs_TEXCOORD1.xyz), t16_1.xyz);
    //Instruction 4913
    //ADD
    t16_22 = t16_21 + t16_21;
    //Instruction 4914
    //MOV
    t16_21 = t16_21;
    t16_21 = clamp(t16_21, 0.0, 1.0);
    //Instruction 4915
    //ADD
    t16_2.y = (-t16_21) + 1.0;
    //Instruction 4916
    //MAD
    t16_3.xyz = t16_1.xyz * (-vec3(t16_22)) + (-vs_TEXCOORD1.xyz);
    //Instruction 4917
    //DP3
    t16_2.x = dot(t16_3.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 4918
    //MUL
    t16_2.xy = t16_2.xy * t16_2.xy;
    //Instruction 4919
    //MUL
    t16_2.yz = t16_2.xy * t16_2.xy;
    //Instruction 4920
    //ADD
    t16_2.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    //Instruction 4921
    //SAMPLE
    t10_4 = texture(unity_NHxRoughness, t16_2.yw).w;
    //Instruction 4922
    //MUL
    t16_21 = t16_2.x * 7.000000;
    //Instruction 4923
    //MUL
    t16_4 = t10_4 * 16.000000;
    //Instruction 4924
    //SAMPLE
    t10_11.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4925
    //MUL
    t16_5.xyz = t10_11.xyz * _Color.xyz;
    //Instruction 4926
    //MAD
    t16_2.xyw = _Color.xyz * t10_11.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 4927
    //MAD
    t16_2.xyw = vec3(_Metallic) * t16_2.xyw + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 4928
    //MAD
    t16_22 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 4929
    //MUL
    t16_3.xyz = vec3(t16_22) * t16_5.xyz;
    //Instruction 4930
    //ADD
    t16_22 = (-t16_22) + _Glossiness;
    //Instruction 4931
    //ADD
    t16_22 = t16_22 + 1.0;
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 4932
    //ADD
    t16_6.xyz = (-t16_2.xyw) + vec3(t16_22);
    //Instruction 4933
    //MAD
    t16_6.xyz = t16_2.zzz * t16_6.xyz + t16_2.xyw;
    //Instruction 4934
    //MAD
    t16_2.xyz = vec3(t16_4) * t16_2.xyw + t16_3.xyz;
    //Instruction 4935
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 4936
    //SAMPLE
    t10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 4937
    //MUL
    t16_2.xyz = vec3(t10_4) * vs_TEXCOORD5.xyz;
    //Instruction 4938
    //MUL
    t16_2.xyz = t16_3.xyz * t16_2.xyz;
    //Instruction 4939
    //DP3
    t16_22 = dot(t16_1.xyz, _WorldSpaceLightPos0.xyz);
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 4940
    //MAD
    t16_0.xyz = t16_0.xyz * vec3(t16_22) + t16_2.xyz;
    //Instruction 4941
    //DP3
    t16_11.x = dot(vs_TEXCOORD1.xyz, t16_1.xyz);
    //Instruction 4942
    //ADD
    t16_11.x = t16_11.x + t16_11.x;
    //Instruction 4943
    //MAD
    t16_11.xyz = t16_1.xyz * (-t16_11.xxx) + vs_TEXCOORD1.xyz;
    //Instruction 4944
    //SAMPLE_L
    t10_1 = textureLod(unity_SpecCube0, t16_11.xyz, t16_21);
    //Instruction 4945
    //MUL
    t16_21 = t10_1.w * unity_SpecCube0_HDR.x;
    //Instruction 4946
    //MUL
    t16_2.xyz = t10_1.xyz * vec3(t16_21);
    //Instruction 4947
    //MUL
    t16_2.xyz = vec3(t10_4) * t16_2.xyz;
    //Instruction 4948
    //MAD
    SV_Target0.xyz = t16_2.xyz * t16_6.xyz + t16_0.xyz;
    //Instruction 4949
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4950
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_Object2World * _glesVertex);
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_10;
  texcoord_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_12;
  n_12 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_13;
  norm_13 = tmpvar_1;
  highp vec4 v_14;
  v_14.x = _World2Object[0].x;
  v_14.y = _World2Object[1].x;
  v_14.z = _World2Object[2].x;
  v_14.w = _World2Object[3].x;
  highp vec4 v_15;
  v_15.x = _World2Object[0].y;
  v_15.y = _World2Object[1].y;
  v_15.z = _World2Object[2].y;
  v_15.w = _World2Object[3].y;
  highp vec4 v_16;
  v_16.x = _World2Object[0].z;
  v_16.y = _World2Object[1].z;
  v_16.z = _World2Object[2].z;
  v_16.w = _World2Object[3].z;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(((
    (v_14.xyz * norm_13.x)
   + 
    (v_15.xyz * norm_13.y)
  ) + (v_16.xyz * norm_13.z)));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_17;
  mediump vec4 normal_19;
  normal_19 = tmpvar_18;
  mediump vec3 x2_20;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, normal_19);
  x1_21.y = dot (unity_SHAg, normal_19);
  x1_21.z = dot (unity_SHAb, normal_19);
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_19.xyzz * normal_19.yzzx);
  x2_20.x = dot (unity_SHBr, tmpvar_22);
  x2_20.y = dot (unity_SHBg, tmpvar_22);
  x2_20.z = dot (unity_SHBb, tmpvar_22);
  tmpvar_8.xyz = ((x2_20 + (unity_SHC.xyz * 
    ((normal_19.x * normal_19.x) - (normal_19.y * normal_19.y))
  )) + x1_21);
  highp float tmpvar_23;
  tmpvar_23 = (unity_FogParams.x * tmpvar_4.z);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = normalize(n_12);
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD7 = exp2((-(tmpvar_23) * tmpvar_23));
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  mediump vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_5;
  mediump float oneMinusReflectivity_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  oneMinusReflectivity_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_5 = (tmpvar_4 * oneMinusReflectivity_6);
  mediump vec3 tmpvar_8;
  tmpvar_8 = _LightColor0.xyz;
  mediump float tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_9 = tmpvar_10.y;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = -(xlv_TEXCOORD1);
  tmpvar_11 = tmpvar_13;
  tmpvar_12 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_14;
  mediump vec3 worldNormal_15;
  highp vec3 tmpvar_16;
  highp vec3 I_17;
  I_17 = -(tmpvar_11);
  tmpvar_16 = (I_17 - (2.0 * (
    dot (tmpvar_2, I_17)
   * tmpvar_2)));
  worldNormal_15 = tmpvar_16;
  mediump vec4 hdr_18;
  hdr_18 = tmpvar_12;
  highp float mip_19;
  mediump float tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (1.0 - _Glossiness);
  tmpvar_20 = (tmpvar_21 * 7.0);
  mip_19 = tmpvar_20;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = worldNormal_15;
  tmpvar_22.w = mip_19;
  lowp vec4 tmpvar_23;
  tmpvar_23 = textureCube (unity_SpecCube0, tmpvar_22.xyz, mip_19);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  tmpvar_14 = ((tmpvar_24.w * hdr_18.x) * tmpvar_24.xyz);
  tmpvar_14 = (tmpvar_14 * tmpvar_9);
  mediump vec2 tmpvar_25;
  tmpvar_25.x = dot ((tmpvar_13 - (2.0 * 
    (dot (tmpvar_2, tmpvar_13) * tmpvar_2)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_25.y = (1.0 - clamp (dot (tmpvar_2, tmpvar_13), 0.0, 1.0));
  mediump vec2 tmpvar_26;
  tmpvar_26 = ((tmpvar_25 * tmpvar_25) * (tmpvar_25 * tmpvar_25));
  mediump vec2 tmpvar_27;
  tmpvar_27.x = tmpvar_26.x;
  tmpvar_27.y = tmpvar_21;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_NHxRoughness, tmpvar_27);
  mediump vec3 tmpvar_29;
  tmpvar_29 = (((
    ((tmpvar_5 + ((tmpvar_28.w * 16.0) * tmpvar_7)) * tmpvar_8)
   * 
    clamp (dot (tmpvar_2, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_9)
   * tmpvar_5)) + (tmpvar_14 * mix (tmpvar_7, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_6)), 0.0, 1.0)
  ), tmpvar_26.yyy)));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = tmpvar_29;
  c_1.w = tmpvar_30.w;
  c_1.xyz = tmpvar_29;
  c_1.xyz = c_1.xyz;
  highp float tmpvar_31;
  tmpvar_31 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_31));
  mediump vec4 xlat_varoutput_32;
  xlat_varoutput_32.xyz = c_1.xyz;
  xlat_varoutput_32.w = 1.0;
  gl_FragData[0] = xlat_varoutput_32;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
mediump vec3 t16_1;
highp vec3 t2;
mediump vec4 t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 5075
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 5076
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 5077
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 5078
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 5079
    //MOV
    gl_Position = t0;
    //Instruction 5080
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 5081
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 5082
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 5083
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 5084
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 5085
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 5086
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 5087
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 5088
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 5089
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 5090
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 5091
    //ADD
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 5092
    //DP3
    t16_1.x = dot(t0.xyz, t0.xyz);
    //Instruction 5093
    //RSQ
    t16_1.x = inversesqrt(t16_1.x);
    //Instruction 5094
    //MUL
    vs_TEXCOORD1.xyz = t0.xyz * t16_1.xxx;
    //Instruction 5095
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 5096
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 5097
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 5098
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 5099
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 5100
    //MUL
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 5101
    //MUL
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 5102
    //MUL
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 5103
    //ADD
    t0.xyz = t0.xyz + t2.xyz;
    //Instruction 5104
    //MUL
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 5105
    //MUL
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 5106
    //MUL
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 5107
    //ADD
    t0.xyz = t0.xyz + t2.xyz;
    //Instruction 5108
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 5109
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 5110
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 5111
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 5112
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 5113
    //MUL
    t16_1.x = t0.y * t0.y;
    //Instruction 5114
    //MAD
    t16_1.x = t0.x * t0.x + (-t16_1.x);
    //Instruction 5115
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 5116
    //DP4
    t16_3.x = dot(unity_SHBr, t16_2);
    //Instruction 5117
    //DP4
    t16_3.y = dot(unity_SHBg, t16_2);
    //Instruction 5118
    //DP4
    t16_3.z = dot(unity_SHBb, t16_2);
    //Instruction 5119
    //MAD
    t16_1.xyz = unity_SHC.xyz * t16_1.xxx + t16_3.xyz;
    //Instruction 5120
    //MOV
    t0.w = 1.0;
    //Instruction 5121
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 5122
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 5123
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 5124
    //ADD
    vs_TEXCOORD5.xyz = t16_1.xyz + t16_3.xyz;
    //Instruction 5125
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 5126
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec4 t10_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
highp vec3 t3;
mediump vec3 t16_3;
lowp float t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_9;
mediump vec3 t16_10;
lowp vec3 t10_10;
mediump float t16_21;
mediump float t16_22;
highp float t24;
void main()
{
    //Instruction 5029
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 5030
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 5031
    //MUL
    t16_0.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 5032
    //DP3
    t16_21 = dot((-vs_TEXCOORD1.xyz), t16_0.xyz);
    //Instruction 5033
    //ADD
    t16_1.x = t16_21 + t16_21;
    //Instruction 5034
    //MOV
    t16_21 = t16_21;
    t16_21 = clamp(t16_21, 0.0, 1.0);
    //Instruction 5035
    //ADD
    t16_2.y = (-t16_21) + 1.0;
    //Instruction 5036
    //MAD
    t16_1.xyz = t16_0.xyz * (-t16_1.xxx) + (-vs_TEXCOORD1.xyz);
    //Instruction 5037
    //DP3
    t16_2.x = dot(t16_1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 5038
    //MUL
    t16_1.xy = t16_2.xy * t16_2.xy;
    //Instruction 5039
    //MUL
    t16_1.yz = t16_1.xy * t16_1.xy;
    //Instruction 5040
    //ADD
    t16_1.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    //Instruction 5041
    //SAMPLE
    t10_3 = texture(unity_NHxRoughness, t16_1.yw).w;
    //Instruction 5042
    //MUL
    t16_21 = t16_1.x * 7.000000;
    //Instruction 5043
    //MUL
    t16_3.x = t10_3 * 16.000000;
    //Instruction 5044
    //SAMPLE
    t10_10.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 5045
    //MUL
    t16_4.xyz = t10_10.xyz * _Color.xyz;
    //Instruction 5046
    //MAD
    t16_1.xyw = _Color.xyz * t10_10.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 5047
    //MAD
    t16_1.xyw = vec3(_Metallic) * t16_1.xyw + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 5048
    //MAD
    t16_2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 5049
    //MUL
    t16_9.xyz = t16_2.xxx * t16_4.xyz;
    //Instruction 5050
    //ADD
    t16_2.x = (-t16_2.x) + _Glossiness;
    //Instruction 5051
    //ADD
    t16_2.x = t16_2.x + 1.0;
    t16_2.x = clamp(t16_2.x, 0.0, 1.0);
    //Instruction 5052
    //ADD
    t16_5.xyz = (-t16_1.xyw) + t16_2.xxx;
    //Instruction 5053
    //MAD
    t16_5.xyz = t16_1.zzz * t16_5.xyz + t16_1.xyw;
    //Instruction 5054
    //MAD
    t16_1.xyz = t16_3.xxx * t16_1.xyw + t16_9.xyz;
    //Instruction 5055
    //MUL
    t16_1.xyz = t16_1.xyz * _LightColor0.xyz;
    //Instruction 5056
    //SAMPLE
    t10_3 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 5057
    //MUL
    t16_6.xyz = vec3(t10_3) * vs_TEXCOORD5.xyz;
    //Instruction 5058
    //MUL
    t16_2.xyz = t16_9.xyz * t16_6.xyz;
    //Instruction 5059
    //DP3
    t16_22 = dot(t16_0.xyz, _WorldSpaceLightPos0.xyz);
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 5060
    //MAD
    t16_1.xyz = t16_1.xyz * vec3(t16_22) + t16_2.xyz;
    //Instruction 5061
    //DP3
    t16_10.x = dot(vs_TEXCOORD1.xyz, t16_0.xyz);
    //Instruction 5062
    //ADD
    t16_10.x = t16_10.x + t16_10.x;
    //Instruction 5063
    //MAD
    t16_10.xyz = t16_0.xyz * (-t16_10.xxx) + vs_TEXCOORD1.xyz;
    //Instruction 5064
    //SAMPLE_L
    t10_0 = textureLod(unity_SpecCube0, t16_10.xyz, t16_21);
    //Instruction 5065
    //MUL
    t16_22 = t10_0.w * unity_SpecCube0_HDR.x;
    //Instruction 5066
    //MUL
    t16_2.xyz = t10_0.xyz * vec3(t16_22);
    //Instruction 5067
    //MUL
    t16_2.xyz = vec3(t10_3) * t16_2.xyz;
    //Instruction 5068
    //MAD
    t16_1.xyz = t16_2.xyz * t16_5.xyz + t16_1.xyz;
    //Instruction 5069
    //ADD
    t16_3.xyz = t16_1.xyz + (-unity_FogColor.xyz);
    //Instruction 5070
    //MOV
    t24 = vs_TEXCOORD7;
    t24 = clamp(t24, 0.0, 1.0);
    //Instruction 5071
    //MAD
    t3.xyz = vec3(t24) * t16_3.xyz + unity_FogColor.xyz;
    //Instruction 5072
    //MOV
    SV_Target0.xyz = t3.xyz;
    //Instruction 5073
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 5074
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_13;
  n_13 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_14;
  norm_14 = tmpvar_1;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_18;
  mediump vec4 normal_20;
  normal_20 = tmpvar_19;
  mediump vec3 x2_21;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, normal_20);
  x1_22.y = dot (unity_SHAg, normal_20);
  x1_22.z = dot (unity_SHAb, normal_20);
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_20.xyzz * normal_20.yzzx);
  x2_21.x = dot (unity_SHBr, tmpvar_23);
  x2_21.y = dot (unity_SHBg, tmpvar_23);
  x2_21.z = dot (unity_SHBb, tmpvar_23);
  tmpvar_8.xyz = ((x2_21 + (unity_SHC.xyz * 
    ((normal_20.x * normal_20.x) - (normal_20.y * normal_20.y))
  )) + x1_22);
  highp float tmpvar_24;
  tmpvar_24 = (unity_FogParams.x * tmpvar_4.z);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = normalize(n_13);
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
  xlv_TEXCOORD7 = exp2((-(tmpvar_24) * tmpvar_24));
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  mediump float atten_2;
  mediump vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_6;
  mediump float oneMinusReflectivity_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  oneMinusReflectivity_7 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * oneMinusReflectivity_7);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  lowp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_10 = tmpvar_11;
  atten_2 = tmpvar_10;
  mediump float tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_12 = tmpvar_13.y;
  highp vec3 tmpvar_14;
  highp vec4 tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = -(xlv_TEXCOORD1);
  tmpvar_14 = tmpvar_16;
  tmpvar_15 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_17;
  mediump vec3 worldNormal_18;
  highp vec3 tmpvar_19;
  highp vec3 I_20;
  I_20 = -(tmpvar_14);
  tmpvar_19 = (I_20 - (2.0 * (
    dot (tmpvar_3, I_20)
   * tmpvar_3)));
  worldNormal_18 = tmpvar_19;
  mediump vec4 hdr_21;
  hdr_21 = tmpvar_15;
  highp float mip_22;
  mediump float tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = (1.0 - _Glossiness);
  tmpvar_23 = (tmpvar_24 * 7.0);
  mip_22 = tmpvar_23;
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = worldNormal_18;
  tmpvar_25.w = mip_22;
  lowp vec4 tmpvar_26;
  tmpvar_26 = textureCube (unity_SpecCube0, tmpvar_25.xyz, mip_22);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  tmpvar_17 = ((tmpvar_27.w * hdr_21.x) * tmpvar_27.xyz);
  tmpvar_17 = (tmpvar_17 * tmpvar_12);
  mediump vec2 tmpvar_28;
  tmpvar_28.x = dot ((tmpvar_16 - (2.0 * 
    (dot (tmpvar_3, tmpvar_16) * tmpvar_3)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_28.y = (1.0 - clamp (dot (tmpvar_3, tmpvar_16), 0.0, 1.0));
  mediump vec2 tmpvar_29;
  tmpvar_29 = ((tmpvar_28 * tmpvar_28) * (tmpvar_28 * tmpvar_28));
  mediump vec2 tmpvar_30;
  tmpvar_30.x = tmpvar_29.x;
  tmpvar_30.y = tmpvar_24;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (unity_NHxRoughness, tmpvar_30);
  mediump vec3 tmpvar_32;
  tmpvar_32 = (((
    ((tmpvar_6 + ((tmpvar_31.w * 16.0) * tmpvar_8)) * (tmpvar_9 * atten_2))
   * 
    clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_12)
   * tmpvar_6)) + (tmpvar_17 * mix (tmpvar_8, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_7)), 0.0, 1.0)
  ), tmpvar_29.yyy)));
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = tmpvar_32;
  c_1.w = tmpvar_33.w;
  c_1.xyz = tmpvar_32;
  c_1.xyz = c_1.xyz;
  highp float tmpvar_34;
  tmpvar_34 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_34));
  mediump vec4 xlat_varoutput_35;
  xlat_varoutput_35.xyz = c_1.xyz;
  xlat_varoutput_35.w = 1.0;
  gl_FragData[0] = xlat_varoutput_35;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_Object2World * _glesVertex);
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_10;
  texcoord_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_12;
  n_12 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_13;
  norm_13 = tmpvar_1;
  highp vec4 v_14;
  v_14.x = _World2Object[0].x;
  v_14.y = _World2Object[1].x;
  v_14.z = _World2Object[2].x;
  v_14.w = _World2Object[3].x;
  highp vec4 v_15;
  v_15.x = _World2Object[0].y;
  v_15.y = _World2Object[1].y;
  v_15.z = _World2Object[2].y;
  v_15.w = _World2Object[3].y;
  highp vec4 v_16;
  v_16.x = _World2Object[0].z;
  v_16.y = _World2Object[1].z;
  v_16.z = _World2Object[2].z;
  v_16.w = _World2Object[3].z;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(((
    (v_14.xyz * norm_13.x)
   + 
    (v_15.xyz * norm_13.y)
  ) + (v_16.xyz * norm_13.z)));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_17;
  mediump vec4 normal_19;
  normal_19 = tmpvar_18;
  mediump vec3 x2_20;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, normal_19);
  x1_21.y = dot (unity_SHAg, normal_19);
  x1_21.z = dot (unity_SHAb, normal_19);
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_19.xyzz * normal_19.yzzx);
  x2_20.x = dot (unity_SHBr, tmpvar_22);
  x2_20.y = dot (unity_SHBg, tmpvar_22);
  x2_20.z = dot (unity_SHBb, tmpvar_22);
  tmpvar_8.xyz = ((x2_20 + (unity_SHC.xyz * 
    ((normal_19.x * normal_19.x) - (normal_19.y * normal_19.y))
  )) + x1_21);
  highp vec3 lightColor0_23;
  lightColor0_23 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_24;
  lightColor1_24 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_25;
  lightColor2_25 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_26;
  lightColor3_26 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_27;
  lightAttenSq_27 = unity_4LightAtten0;
  highp vec3 col_28;
  highp vec4 ndotl_29;
  highp vec4 lengthSq_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  ndotl_29 = (tmpvar_31 * tmpvar_17.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * tmpvar_17.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * tmpvar_17.z));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * inversesqrt(lengthSq_30)));
  ndotl_29 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (lengthSq_30 * lightAttenSq_27)
  ))));
  col_28 = (lightColor0_23 * tmpvar_35.x);
  col_28 = (col_28 + (lightColor1_24 * tmpvar_35.y));
  col_28 = (col_28 + (lightColor2_25 * tmpvar_35.z));
  col_28 = (col_28 + (lightColor3_26 * tmpvar_35.w));
  tmpvar_8.xyz = (tmpvar_8.xyz + col_28);
  highp float tmpvar_36;
  tmpvar_36 = (unity_FogParams.x * tmpvar_4.z);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = normalize(n_12);
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD7 = exp2((-(tmpvar_36) * tmpvar_36));
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  mediump vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_5;
  mediump float oneMinusReflectivity_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  oneMinusReflectivity_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_5 = (tmpvar_4 * oneMinusReflectivity_6);
  mediump vec3 tmpvar_8;
  tmpvar_8 = _LightColor0.xyz;
  mediump float tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_9 = tmpvar_10.y;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = -(xlv_TEXCOORD1);
  tmpvar_11 = tmpvar_13;
  tmpvar_12 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_14;
  mediump vec3 worldNormal_15;
  highp vec3 tmpvar_16;
  highp vec3 I_17;
  I_17 = -(tmpvar_11);
  tmpvar_16 = (I_17 - (2.0 * (
    dot (tmpvar_2, I_17)
   * tmpvar_2)));
  worldNormal_15 = tmpvar_16;
  mediump vec4 hdr_18;
  hdr_18 = tmpvar_12;
  highp float mip_19;
  mediump float tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (1.0 - _Glossiness);
  tmpvar_20 = (tmpvar_21 * 7.0);
  mip_19 = tmpvar_20;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = worldNormal_15;
  tmpvar_22.w = mip_19;
  lowp vec4 tmpvar_23;
  tmpvar_23 = textureCube (unity_SpecCube0, tmpvar_22.xyz, mip_19);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  tmpvar_14 = ((tmpvar_24.w * hdr_18.x) * tmpvar_24.xyz);
  tmpvar_14 = (tmpvar_14 * tmpvar_9);
  mediump vec2 tmpvar_25;
  tmpvar_25.x = dot ((tmpvar_13 - (2.0 * 
    (dot (tmpvar_2, tmpvar_13) * tmpvar_2)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_25.y = (1.0 - clamp (dot (tmpvar_2, tmpvar_13), 0.0, 1.0));
  mediump vec2 tmpvar_26;
  tmpvar_26 = ((tmpvar_25 * tmpvar_25) * (tmpvar_25 * tmpvar_25));
  mediump vec2 tmpvar_27;
  tmpvar_27.x = tmpvar_26.x;
  tmpvar_27.y = tmpvar_21;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_NHxRoughness, tmpvar_27);
  mediump vec3 tmpvar_29;
  tmpvar_29 = (((
    ((tmpvar_5 + ((tmpvar_28.w * 16.0) * tmpvar_7)) * tmpvar_8)
   * 
    clamp (dot (tmpvar_2, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_9)
   * tmpvar_5)) + (tmpvar_14 * mix (tmpvar_7, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_6)), 0.0, 1.0)
  ), tmpvar_26.yyy)));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = tmpvar_29;
  c_1.w = tmpvar_30.w;
  c_1.xyz = tmpvar_29;
  c_1.xyz = c_1.xyz;
  highp float tmpvar_31;
  tmpvar_31 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_31));
  mediump vec4 xlat_varoutput_32;
  xlat_varoutput_32.xyz = c_1.xyz;
  xlat_varoutput_32.w = 1.0;
  gl_FragData[0] = xlat_varoutput_32;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec4 t4;
mediump vec3 t16_4;
highp vec4 t5;
highp float t18;
void main()
{
    //Instruction 4850
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4851
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4852
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4853
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4854
    //MOV
    gl_Position = t0;
    //Instruction 4855
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 4856
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 4857
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 4858
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 4859
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 4860
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 4861
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4862
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4863
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4864
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4865
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4866
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4867
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 4868
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 4869
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 4870
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 4871
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 4872
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 4873
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4874
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4875
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4876
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4877
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4878
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4879
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 4880
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4881
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4882
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4883
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 4884
    //DP3
    t18 = dot(t1.xyz, t1.xyz);
    //Instruction 4885
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 4886
    //MUL
    t1.xyz = vec3(t18) * t1.xyz;
    //Instruction 4887
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 4888
    //MUL
    t16_2.x = t1.y * t1.y;
    //Instruction 4889
    //MAD
    t16_2.x = t1.x * t1.x + (-t16_2.x);
    //Instruction 4890
    //MUL
    t16_3 = t1.yzzx * t1.xyzz;
    //Instruction 4891
    //DP4
    t16_4.x = dot(unity_SHBr, t16_3);
    //Instruction 4892
    //DP4
    t16_4.y = dot(unity_SHBg, t16_3);
    //Instruction 4893
    //DP4
    t16_4.z = dot(unity_SHBb, t16_3);
    //Instruction 4894
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_4.xyz;
    //Instruction 4895
    //MOV
    t1.w = 1.0;
    //Instruction 4896
    //DP4
    t16_4.x = dot(unity_SHAr, t1);
    //Instruction 4897
    //DP4
    t16_4.y = dot(unity_SHAg, t1);
    //Instruction 4898
    //DP4
    t16_4.z = dot(unity_SHAb, t1);
    //Instruction 4899
    //ADD
    t16_2.xyz = t16_2.xyz + t16_4.xyz;
    //Instruction 4900
    //ADD
    t3 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 4901
    //MUL
    t4 = t1.yyyy * t3;
    //Instruction 4902
    //MUL
    t3 = t3 * t3;
    //Instruction 4903
    //ADD
    t5 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 4904
    //ADD
    t0 = (-t0.zzzz) + unity_4LightPosZ0;
    //Instruction 4905
    //MAD
    t4 = t5 * t1.xxxx + t4;
    //Instruction 4906
    //MAD
    t1 = t0 * t1.zzzz + t4;
    //Instruction 4907
    //MAD
    t3 = t5 * t5 + t3;
    //Instruction 4908
    //MAD
    t0 = t0 * t0 + t3;
    //Instruction 4909
    //RSQ
    t3 = inversesqrt(t0);
    //Instruction 4910
    //MAD
    t0 = t0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 4911
    //DIV
    t0 = vec4(1.0, 1.0, 1.0, 1.0) / t0;
    //Instruction 4912
    //MUL
    t1 = t1 * t3;
    //Instruction 4913
    //MAX
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 4914
    //MUL
    t0 = t0 * t1;
    //Instruction 4915
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 4916
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 4917
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 4918
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 4919
    //ADD
    t0.xyz = t0.xyz + t16_2.xyz;
    //Instruction 4920
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 4921
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 4922
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec4 t10_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
highp vec3 t3;
mediump vec3 t16_3;
lowp float t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_9;
mediump vec3 t16_10;
lowp vec3 t10_10;
mediump float t16_21;
mediump float t16_22;
highp float t24;
void main()
{
    //Instruction 4804
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 4805
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 4806
    //MUL
    t16_0.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 4807
    //DP3
    t16_21 = dot((-vs_TEXCOORD1.xyz), t16_0.xyz);
    //Instruction 4808
    //ADD
    t16_1.x = t16_21 + t16_21;
    //Instruction 4809
    //MOV
    t16_21 = t16_21;
    t16_21 = clamp(t16_21, 0.0, 1.0);
    //Instruction 4810
    //ADD
    t16_2.y = (-t16_21) + 1.0;
    //Instruction 4811
    //MAD
    t16_1.xyz = t16_0.xyz * (-t16_1.xxx) + (-vs_TEXCOORD1.xyz);
    //Instruction 4812
    //DP3
    t16_2.x = dot(t16_1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 4813
    //MUL
    t16_1.xy = t16_2.xy * t16_2.xy;
    //Instruction 4814
    //MUL
    t16_1.yz = t16_1.xy * t16_1.xy;
    //Instruction 4815
    //ADD
    t16_1.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    //Instruction 4816
    //SAMPLE
    t10_3 = texture(unity_NHxRoughness, t16_1.yw).w;
    //Instruction 4817
    //MUL
    t16_21 = t16_1.x * 7.000000;
    //Instruction 4818
    //MUL
    t16_3.x = t10_3 * 16.000000;
    //Instruction 4819
    //SAMPLE
    t10_10.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4820
    //MUL
    t16_4.xyz = t10_10.xyz * _Color.xyz;
    //Instruction 4821
    //MAD
    t16_1.xyw = _Color.xyz * t10_10.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 4822
    //MAD
    t16_1.xyw = vec3(_Metallic) * t16_1.xyw + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 4823
    //MAD
    t16_2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 4824
    //MUL
    t16_9.xyz = t16_2.xxx * t16_4.xyz;
    //Instruction 4825
    //ADD
    t16_2.x = (-t16_2.x) + _Glossiness;
    //Instruction 4826
    //ADD
    t16_2.x = t16_2.x + 1.0;
    t16_2.x = clamp(t16_2.x, 0.0, 1.0);
    //Instruction 4827
    //ADD
    t16_5.xyz = (-t16_1.xyw) + t16_2.xxx;
    //Instruction 4828
    //MAD
    t16_5.xyz = t16_1.zzz * t16_5.xyz + t16_1.xyw;
    //Instruction 4829
    //MAD
    t16_1.xyz = t16_3.xxx * t16_1.xyw + t16_9.xyz;
    //Instruction 4830
    //MUL
    t16_1.xyz = t16_1.xyz * _LightColor0.xyz;
    //Instruction 4831
    //SAMPLE
    t10_3 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 4832
    //MUL
    t16_6.xyz = vec3(t10_3) * vs_TEXCOORD5.xyz;
    //Instruction 4833
    //MUL
    t16_2.xyz = t16_9.xyz * t16_6.xyz;
    //Instruction 4834
    //DP3
    t16_22 = dot(t16_0.xyz, _WorldSpaceLightPos0.xyz);
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 4835
    //MAD
    t16_1.xyz = t16_1.xyz * vec3(t16_22) + t16_2.xyz;
    //Instruction 4836
    //DP3
    t16_10.x = dot(vs_TEXCOORD1.xyz, t16_0.xyz);
    //Instruction 4837
    //ADD
    t16_10.x = t16_10.x + t16_10.x;
    //Instruction 4838
    //MAD
    t16_10.xyz = t16_0.xyz * (-t16_10.xxx) + vs_TEXCOORD1.xyz;
    //Instruction 4839
    //SAMPLE_L
    t10_0 = textureLod(unity_SpecCube0, t16_10.xyz, t16_21);
    //Instruction 4840
    //MUL
    t16_22 = t10_0.w * unity_SpecCube0_HDR.x;
    //Instruction 4841
    //MUL
    t16_2.xyz = t10_0.xyz * vec3(t16_22);
    //Instruction 4842
    //MUL
    t16_2.xyz = vec3(t10_3) * t16_2.xyz;
    //Instruction 4843
    //MAD
    t16_1.xyz = t16_2.xyz * t16_5.xyz + t16_1.xyz;
    //Instruction 4844
    //ADD
    t16_3.xyz = t16_1.xyz + (-unity_FogColor.xyz);
    //Instruction 4845
    //MOV
    t24 = vs_TEXCOORD7;
    t24 = clamp(t24, 0.0, 1.0);
    //Instruction 4846
    //MAD
    t3.xyz = vec3(t24) * t16_3.xyz + unity_FogColor.xyz;
    //Instruction 4847
    //MOV
    SV_Target0.xyz = t3.xyz;
    //Instruction 4848
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4849
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_13;
  n_13 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_14;
  norm_14 = tmpvar_1;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_18;
  mediump vec4 normal_20;
  normal_20 = tmpvar_19;
  mediump vec3 x2_21;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, normal_20);
  x1_22.y = dot (unity_SHAg, normal_20);
  x1_22.z = dot (unity_SHAb, normal_20);
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_20.xyzz * normal_20.yzzx);
  x2_21.x = dot (unity_SHBr, tmpvar_23);
  x2_21.y = dot (unity_SHBg, tmpvar_23);
  x2_21.z = dot (unity_SHBb, tmpvar_23);
  tmpvar_8.xyz = ((x2_21 + (unity_SHC.xyz * 
    ((normal_20.x * normal_20.x) - (normal_20.y * normal_20.y))
  )) + x1_22);
  highp vec3 lightColor0_24;
  lightColor0_24 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_25;
  lightColor1_25 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_26;
  lightColor2_26 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_27;
  lightColor3_27 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_28;
  lightAttenSq_28 = unity_4LightAtten0;
  highp vec3 col_29;
  highp vec4 ndotl_30;
  highp vec4 lengthSq_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosX0 - tmpvar_10.x);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosY0 - tmpvar_10.y);
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_4LightPosZ0 - tmpvar_10.z);
  lengthSq_31 = (tmpvar_32 * tmpvar_32);
  lengthSq_31 = (lengthSq_31 + (tmpvar_33 * tmpvar_33));
  lengthSq_31 = (lengthSq_31 + (tmpvar_34 * tmpvar_34));
  ndotl_30 = (tmpvar_32 * tmpvar_18.x);
  ndotl_30 = (ndotl_30 + (tmpvar_33 * tmpvar_18.y));
  ndotl_30 = (ndotl_30 + (tmpvar_34 * tmpvar_18.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_30 * inversesqrt(lengthSq_31)));
  ndotl_30 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (lengthSq_31 * lightAttenSq_28)
  ))));
  col_29 = (lightColor0_24 * tmpvar_36.x);
  col_29 = (col_29 + (lightColor1_25 * tmpvar_36.y));
  col_29 = (col_29 + (lightColor2_26 * tmpvar_36.z));
  col_29 = (col_29 + (lightColor3_27 * tmpvar_36.w));
  tmpvar_8.xyz = (tmpvar_8.xyz + col_29);
  highp float tmpvar_37;
  tmpvar_37 = (unity_FogParams.x * tmpvar_4.z);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = normalize(n_13);
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
  xlv_TEXCOORD7 = exp2((-(tmpvar_37) * tmpvar_37));
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  mediump float atten_2;
  mediump vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_6;
  mediump float oneMinusReflectivity_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  oneMinusReflectivity_7 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * oneMinusReflectivity_7);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  lowp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_10 = tmpvar_11;
  atten_2 = tmpvar_10;
  mediump float tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_12 = tmpvar_13.y;
  highp vec3 tmpvar_14;
  highp vec4 tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = -(xlv_TEXCOORD1);
  tmpvar_14 = tmpvar_16;
  tmpvar_15 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_17;
  mediump vec3 worldNormal_18;
  highp vec3 tmpvar_19;
  highp vec3 I_20;
  I_20 = -(tmpvar_14);
  tmpvar_19 = (I_20 - (2.0 * (
    dot (tmpvar_3, I_20)
   * tmpvar_3)));
  worldNormal_18 = tmpvar_19;
  mediump vec4 hdr_21;
  hdr_21 = tmpvar_15;
  highp float mip_22;
  mediump float tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = (1.0 - _Glossiness);
  tmpvar_23 = (tmpvar_24 * 7.0);
  mip_22 = tmpvar_23;
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = worldNormal_18;
  tmpvar_25.w = mip_22;
  lowp vec4 tmpvar_26;
  tmpvar_26 = textureCube (unity_SpecCube0, tmpvar_25.xyz, mip_22);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  tmpvar_17 = ((tmpvar_27.w * hdr_21.x) * tmpvar_27.xyz);
  tmpvar_17 = (tmpvar_17 * tmpvar_12);
  mediump vec2 tmpvar_28;
  tmpvar_28.x = dot ((tmpvar_16 - (2.0 * 
    (dot (tmpvar_3, tmpvar_16) * tmpvar_3)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_28.y = (1.0 - clamp (dot (tmpvar_3, tmpvar_16), 0.0, 1.0));
  mediump vec2 tmpvar_29;
  tmpvar_29 = ((tmpvar_28 * tmpvar_28) * (tmpvar_28 * tmpvar_28));
  mediump vec2 tmpvar_30;
  tmpvar_30.x = tmpvar_29.x;
  tmpvar_30.y = tmpvar_24;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (unity_NHxRoughness, tmpvar_30);
  mediump vec3 tmpvar_32;
  tmpvar_32 = (((
    ((tmpvar_6 + ((tmpvar_31.w * 16.0) * tmpvar_8)) * (tmpvar_9 * atten_2))
   * 
    clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_12)
   * tmpvar_6)) + (tmpvar_17 * mix (tmpvar_8, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_7)), 0.0, 1.0)
  ), tmpvar_29.yyy)));
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = tmpvar_32;
  c_1.w = tmpvar_33.w;
  c_1.xyz = tmpvar_32;
  c_1.xyz = c_1.xyz;
  highp float tmpvar_34;
  tmpvar_34 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_34));
  mediump vec4 xlat_varoutput_35;
  xlat_varoutput_35.xyz = c_1.xyz;
  xlat_varoutput_35.w = 1.0;
  gl_FragData[0] = xlat_varoutput_35;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_13;
  n_13 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_14;
  norm_14 = tmpvar_1;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_18;
  mediump vec4 normal_20;
  normal_20 = tmpvar_19;
  mediump vec3 x2_21;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, normal_20);
  x1_22.y = dot (unity_SHAg, normal_20);
  x1_22.z = dot (unity_SHAb, normal_20);
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_20.xyzz * normal_20.yzzx);
  x2_21.x = dot (unity_SHBr, tmpvar_23);
  x2_21.y = dot (unity_SHBg, tmpvar_23);
  x2_21.z = dot (unity_SHBb, tmpvar_23);
  tmpvar_8.xyz = ((x2_21 + (unity_SHC.xyz * 
    ((normal_20.x * normal_20.x) - (normal_20.y * normal_20.y))
  )) + x1_22);
  highp float tmpvar_24;
  tmpvar_24 = (unity_FogParams.x * tmpvar_4.z);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = normalize(n_13);
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
  xlv_TEXCOORD7 = exp2((-(tmpvar_24) * tmpvar_24));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform lowp sampler2DShadow _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  mediump float atten_2;
  mediump vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_6;
  mediump float oneMinusReflectivity_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  oneMinusReflectivity_7 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * oneMinusReflectivity_7);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  lowp float shadow_10;
  shadow_10 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  atten_2 = shadow_10;
  mediump float tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_11 = tmpvar_12.y;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = -(xlv_TEXCOORD1);
  tmpvar_13 = tmpvar_15;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_16;
  mediump vec3 worldNormal_17;
  highp vec3 tmpvar_18;
  highp vec3 I_19;
  I_19 = -(tmpvar_13);
  tmpvar_18 = (I_19 - (2.0 * (
    dot (tmpvar_3, I_19)
   * tmpvar_3)));
  worldNormal_17 = tmpvar_18;
  mediump vec4 hdr_20;
  hdr_20 = tmpvar_14;
  highp float mip_21;
  mediump float tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = (1.0 - _Glossiness);
  tmpvar_22 = (tmpvar_23 * 7.0);
  mip_21 = tmpvar_22;
  highp vec4 tmpvar_24;
  tmpvar_24.xyz = worldNormal_17;
  tmpvar_24.w = mip_21;
  lowp vec4 tmpvar_25;
  tmpvar_25 = textureCube (unity_SpecCube0, tmpvar_24.xyz, mip_21);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  tmpvar_16 = ((tmpvar_26.w * hdr_20.x) * tmpvar_26.xyz);
  tmpvar_16 = (tmpvar_16 * tmpvar_11);
  mediump vec2 tmpvar_27;
  tmpvar_27.x = dot ((tmpvar_15 - (2.0 * 
    (dot (tmpvar_3, tmpvar_15) * tmpvar_3)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_27.y = (1.0 - clamp (dot (tmpvar_3, tmpvar_15), 0.0, 1.0));
  mediump vec2 tmpvar_28;
  tmpvar_28 = ((tmpvar_27 * tmpvar_27) * (tmpvar_27 * tmpvar_27));
  mediump vec2 tmpvar_29;
  tmpvar_29.x = tmpvar_28.x;
  tmpvar_29.y = tmpvar_23;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (unity_NHxRoughness, tmpvar_29);
  mediump vec3 tmpvar_31;
  tmpvar_31 = (((
    ((tmpvar_6 + ((tmpvar_30.w * 16.0) * tmpvar_8)) * (tmpvar_9 * atten_2))
   * 
    clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_11)
   * tmpvar_6)) + (tmpvar_16 * mix (tmpvar_8, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_7)), 0.0, 1.0)
  ), tmpvar_28.yyy)));
  mediump vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = tmpvar_31;
  c_1.w = tmpvar_32.w;
  c_1.xyz = tmpvar_31;
  c_1.xyz = c_1.xyz;
  highp float tmpvar_33;
  tmpvar_33 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_33));
  mediump vec4 xlat_varoutput_34;
  xlat_varoutput_34.xyz = c_1.xyz;
  xlat_varoutput_34.w = 1.0;
  gl_FragData[0] = xlat_varoutput_34;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_1;
highp vec3 t2;
mediump vec4 t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 5177
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 5178
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 5179
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 5180
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 5181
    //MOV
    gl_Position = t0;
    //Instruction 5182
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 5183
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 5184
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 5185
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 5186
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 5187
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 5188
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 5189
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 5190
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 5191
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 5192
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 5193
    //ADD
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 5194
    //DP3
    t16_1.x = dot(t0.xyz, t0.xyz);
    //Instruction 5195
    //RSQ
    t16_1.x = inversesqrt(t16_1.x);
    //Instruction 5196
    //MUL
    vs_TEXCOORD1.xyz = t0.xyz * t16_1.xxx;
    //Instruction 5197
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 5198
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 5199
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 5200
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 5201
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 5202
    //MUL
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 5203
    //MUL
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 5204
    //MUL
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 5205
    //ADD
    t0.xyz = t0.xyz + t2.xyz;
    //Instruction 5206
    //MUL
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 5207
    //MUL
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 5208
    //MUL
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 5209
    //ADD
    t0.xyz = t0.xyz + t2.xyz;
    //Instruction 5210
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 5211
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 5212
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 5213
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 5214
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 5215
    //MUL
    t16_1.x = t0.y * t0.y;
    //Instruction 5216
    //MAD
    t16_1.x = t0.x * t0.x + (-t16_1.x);
    //Instruction 5217
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 5218
    //DP4
    t16_3.x = dot(unity_SHBr, t16_2);
    //Instruction 5219
    //DP4
    t16_3.y = dot(unity_SHBg, t16_2);
    //Instruction 5220
    //DP4
    t16_3.z = dot(unity_SHBb, t16_2);
    //Instruction 5221
    //MAD
    t16_1.xyz = unity_SHC.xyz * t16_1.xxx + t16_3.xyz;
    //Instruction 5222
    //MOV
    t0.w = 1.0;
    //Instruction 5223
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 5224
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 5225
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 5226
    //ADD
    vs_TEXCOORD5.xyz = t16_1.xyz + t16_3.xyz;
    //Instruction 5227
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 5228
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 5229
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 5230
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 5231
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 5232
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 5233
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 5234
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 5235
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 5236
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 5237
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
mediump vec4 t16_2;
mediump vec3 t16_3;
highp vec3 t4;
mediump vec3 t16_4;
lowp float t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_7;
mediump vec3 t16_11;
lowp vec3 t10_11;
mediump float t16_21;
mediump float t16_22;
highp float t25;
void main()
{
    //Instruction 5127
    //SAMPLE_C_LZ
    vec3 txVec18 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec18, 0.0);
    //Instruction 5128
    //ADD
    t16_7 = (-_LightShadowData.x) + 1.0;
    //Instruction 5129
    //MAD
    t16_0.x = t16_0.x * t16_7 + _LightShadowData.x;
    //Instruction 5130
    //MUL
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 5131
    //DP3
    t16_21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 5132
    //RSQ
    t16_21 = inversesqrt(t16_21);
    //Instruction 5133
    //MUL
    t16_1.xyz = vec3(t16_21) * vs_TEXCOORD4.xyz;
    //Instruction 5134
    //DP3
    t16_21 = dot((-vs_TEXCOORD1.xyz), t16_1.xyz);
    //Instruction 5135
    //ADD
    t16_22 = t16_21 + t16_21;
    //Instruction 5136
    //MOV
    t16_21 = t16_21;
    t16_21 = clamp(t16_21, 0.0, 1.0);
    //Instruction 5137
    //ADD
    t16_2.y = (-t16_21) + 1.0;
    //Instruction 5138
    //MAD
    t16_3.xyz = t16_1.xyz * (-vec3(t16_22)) + (-vs_TEXCOORD1.xyz);
    //Instruction 5139
    //DP3
    t16_2.x = dot(t16_3.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 5140
    //MUL
    t16_2.xy = t16_2.xy * t16_2.xy;
    //Instruction 5141
    //MUL
    t16_2.yz = t16_2.xy * t16_2.xy;
    //Instruction 5142
    //ADD
    t16_2.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    //Instruction 5143
    //SAMPLE
    t10_4 = texture(unity_NHxRoughness, t16_2.yw).w;
    //Instruction 5144
    //MUL
    t16_21 = t16_2.x * 7.000000;
    //Instruction 5145
    //MUL
    t16_4.x = t10_4 * 16.000000;
    //Instruction 5146
    //SAMPLE
    t10_11.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 5147
    //MUL
    t16_5.xyz = t10_11.xyz * _Color.xyz;
    //Instruction 5148
    //MAD
    t16_2.xyw = _Color.xyz * t10_11.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 5149
    //MAD
    t16_2.xyw = vec3(_Metallic) * t16_2.xyw + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 5150
    //MAD
    t16_22 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 5151
    //MUL
    t16_3.xyz = vec3(t16_22) * t16_5.xyz;
    //Instruction 5152
    //ADD
    t16_22 = (-t16_22) + _Glossiness;
    //Instruction 5153
    //ADD
    t16_22 = t16_22 + 1.0;
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 5154
    //ADD
    t16_6.xyz = (-t16_2.xyw) + vec3(t16_22);
    //Instruction 5155
    //MAD
    t16_6.xyz = t16_2.zzz * t16_6.xyz + t16_2.xyw;
    //Instruction 5156
    //MAD
    t16_2.xyz = t16_4.xxx * t16_2.xyw + t16_3.xyz;
    //Instruction 5157
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 5158
    //SAMPLE
    t10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 5159
    //MUL
    t16_2.xyz = vec3(t10_4) * vs_TEXCOORD5.xyz;
    //Instruction 5160
    //MUL
    t16_2.xyz = t16_3.xyz * t16_2.xyz;
    //Instruction 5161
    //DP3
    t16_22 = dot(t16_1.xyz, _WorldSpaceLightPos0.xyz);
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 5162
    //MAD
    t16_0.xyz = t16_0.xyz * vec3(t16_22) + t16_2.xyz;
    //Instruction 5163
    //DP3
    t16_11.x = dot(vs_TEXCOORD1.xyz, t16_1.xyz);
    //Instruction 5164
    //ADD
    t16_11.x = t16_11.x + t16_11.x;
    //Instruction 5165
    //MAD
    t16_11.xyz = t16_1.xyz * (-t16_11.xxx) + vs_TEXCOORD1.xyz;
    //Instruction 5166
    //SAMPLE_L
    t10_1 = textureLod(unity_SpecCube0, t16_11.xyz, t16_21);
    //Instruction 5167
    //MUL
    t16_21 = t10_1.w * unity_SpecCube0_HDR.x;
    //Instruction 5168
    //MUL
    t16_2.xyz = t10_1.xyz * vec3(t16_21);
    //Instruction 5169
    //MUL
    t16_2.xyz = vec3(t10_4) * t16_2.xyz;
    //Instruction 5170
    //MAD
    t16_0.xyz = t16_2.xyz * t16_6.xyz + t16_0.xyz;
    //Instruction 5171
    //ADD
    t16_4.xyz = t16_0.xyz + (-unity_FogColor.xyz);
    //Instruction 5172
    //MOV
    t25 = vs_TEXCOORD7;
    t25 = clamp(t25, 0.0, 1.0);
    //Instruction 5173
    //MAD
    t4.xyz = vec3(t25) * t16_4.xyz + unity_FogColor.xyz;
    //Instruction 5174
    //MOV
    SV_Target0.xyz = t4.xyz;
    //Instruction 5175
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 5176
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_13;
  n_13 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_14;
  norm_14 = tmpvar_1;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_18;
  mediump vec4 normal_20;
  normal_20 = tmpvar_19;
  mediump vec3 x2_21;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, normal_20);
  x1_22.y = dot (unity_SHAg, normal_20);
  x1_22.z = dot (unity_SHAb, normal_20);
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_20.xyzz * normal_20.yzzx);
  x2_21.x = dot (unity_SHBr, tmpvar_23);
  x2_21.y = dot (unity_SHBg, tmpvar_23);
  x2_21.z = dot (unity_SHBb, tmpvar_23);
  tmpvar_8.xyz = ((x2_21 + (unity_SHC.xyz * 
    ((normal_20.x * normal_20.x) - (normal_20.y * normal_20.y))
  )) + x1_22);
  highp vec3 lightColor0_24;
  lightColor0_24 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_25;
  lightColor1_25 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_26;
  lightColor2_26 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_27;
  lightColor3_27 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_28;
  lightAttenSq_28 = unity_4LightAtten0;
  highp vec3 col_29;
  highp vec4 ndotl_30;
  highp vec4 lengthSq_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosX0 - tmpvar_10.x);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosY0 - tmpvar_10.y);
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_4LightPosZ0 - tmpvar_10.z);
  lengthSq_31 = (tmpvar_32 * tmpvar_32);
  lengthSq_31 = (lengthSq_31 + (tmpvar_33 * tmpvar_33));
  lengthSq_31 = (lengthSq_31 + (tmpvar_34 * tmpvar_34));
  ndotl_30 = (tmpvar_32 * tmpvar_18.x);
  ndotl_30 = (ndotl_30 + (tmpvar_33 * tmpvar_18.y));
  ndotl_30 = (ndotl_30 + (tmpvar_34 * tmpvar_18.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_30 * inversesqrt(lengthSq_31)));
  ndotl_30 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (lengthSq_31 * lightAttenSq_28)
  ))));
  col_29 = (lightColor0_24 * tmpvar_36.x);
  col_29 = (col_29 + (lightColor1_25 * tmpvar_36.y));
  col_29 = (col_29 + (lightColor2_26 * tmpvar_36.z));
  col_29 = (col_29 + (lightColor3_27 * tmpvar_36.w));
  tmpvar_8.xyz = (tmpvar_8.xyz + col_29);
  highp float tmpvar_37;
  tmpvar_37 = (unity_FogParams.x * tmpvar_4.z);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = normalize(n_13);
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
  xlv_TEXCOORD7 = exp2((-(tmpvar_37) * tmpvar_37));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform lowp sampler2DShadow _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  mediump float atten_2;
  mediump vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_6;
  mediump float oneMinusReflectivity_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  oneMinusReflectivity_7 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * oneMinusReflectivity_7);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  lowp float shadow_10;
  shadow_10 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  atten_2 = shadow_10;
  mediump float tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_11 = tmpvar_12.y;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = -(xlv_TEXCOORD1);
  tmpvar_13 = tmpvar_15;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_16;
  mediump vec3 worldNormal_17;
  highp vec3 tmpvar_18;
  highp vec3 I_19;
  I_19 = -(tmpvar_13);
  tmpvar_18 = (I_19 - (2.0 * (
    dot (tmpvar_3, I_19)
   * tmpvar_3)));
  worldNormal_17 = tmpvar_18;
  mediump vec4 hdr_20;
  hdr_20 = tmpvar_14;
  highp float mip_21;
  mediump float tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = (1.0 - _Glossiness);
  tmpvar_22 = (tmpvar_23 * 7.0);
  mip_21 = tmpvar_22;
  highp vec4 tmpvar_24;
  tmpvar_24.xyz = worldNormal_17;
  tmpvar_24.w = mip_21;
  lowp vec4 tmpvar_25;
  tmpvar_25 = textureCube (unity_SpecCube0, tmpvar_24.xyz, mip_21);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  tmpvar_16 = ((tmpvar_26.w * hdr_20.x) * tmpvar_26.xyz);
  tmpvar_16 = (tmpvar_16 * tmpvar_11);
  mediump vec2 tmpvar_27;
  tmpvar_27.x = dot ((tmpvar_15 - (2.0 * 
    (dot (tmpvar_3, tmpvar_15) * tmpvar_3)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_27.y = (1.0 - clamp (dot (tmpvar_3, tmpvar_15), 0.0, 1.0));
  mediump vec2 tmpvar_28;
  tmpvar_28 = ((tmpvar_27 * tmpvar_27) * (tmpvar_27 * tmpvar_27));
  mediump vec2 tmpvar_29;
  tmpvar_29.x = tmpvar_28.x;
  tmpvar_29.y = tmpvar_23;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (unity_NHxRoughness, tmpvar_29);
  mediump vec3 tmpvar_31;
  tmpvar_31 = (((
    ((tmpvar_6 + ((tmpvar_30.w * 16.0) * tmpvar_8)) * (tmpvar_9 * atten_2))
   * 
    clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_11)
   * tmpvar_6)) + (tmpvar_16 * mix (tmpvar_8, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_7)), 0.0, 1.0)
  ), tmpvar_28.yyy)));
  mediump vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = tmpvar_31;
  c_1.w = tmpvar_32.w;
  c_1.xyz = tmpvar_31;
  c_1.xyz = c_1.xyz;
  highp float tmpvar_33;
  tmpvar_33 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_33));
  mediump vec4 xlat_varoutput_34;
  xlat_varoutput_34.xyz = c_1.xyz;
  xlat_varoutput_34.w = 1.0;
  gl_FragData[0] = xlat_varoutput_34;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec4 t4;
mediump vec3 t16_4;
highp vec4 t5;
highp float t18;
void main()
{
    //Instruction 5288
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 5289
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 5290
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 5291
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 5292
    //MOV
    gl_Position = t0;
    //Instruction 5293
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 5294
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 5295
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 5296
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 5297
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 5298
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 5299
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 5300
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 5301
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 5302
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 5303
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 5304
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 5305
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 5306
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 5307
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 5308
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 5309
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 5310
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 5311
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 5312
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 5313
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 5314
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 5315
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 5316
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 5317
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 5318
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 5319
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 5320
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 5321
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 5322
    //DP3
    t18 = dot(t1.xyz, t1.xyz);
    //Instruction 5323
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 5324
    //MUL
    t1.xyz = vec3(t18) * t1.xyz;
    //Instruction 5325
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 5326
    //MUL
    t16_2.x = t1.y * t1.y;
    //Instruction 5327
    //MAD
    t16_2.x = t1.x * t1.x + (-t16_2.x);
    //Instruction 5328
    //MUL
    t16_3 = t1.yzzx * t1.xyzz;
    //Instruction 5329
    //DP4
    t16_4.x = dot(unity_SHBr, t16_3);
    //Instruction 5330
    //DP4
    t16_4.y = dot(unity_SHBg, t16_3);
    //Instruction 5331
    //DP4
    t16_4.z = dot(unity_SHBb, t16_3);
    //Instruction 5332
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_4.xyz;
    //Instruction 5333
    //MOV
    t1.w = 1.0;
    //Instruction 5334
    //DP4
    t16_4.x = dot(unity_SHAr, t1);
    //Instruction 5335
    //DP4
    t16_4.y = dot(unity_SHAg, t1);
    //Instruction 5336
    //DP4
    t16_4.z = dot(unity_SHAb, t1);
    //Instruction 5337
    //ADD
    t16_2.xyz = t16_2.xyz + t16_4.xyz;
    //Instruction 5338
    //ADD
    t3 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 5339
    //MUL
    t4 = t1.yyyy * t3;
    //Instruction 5340
    //MUL
    t3 = t3 * t3;
    //Instruction 5341
    //ADD
    t5 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 5342
    //ADD
    t0 = (-t0.zzzz) + unity_4LightPosZ0;
    //Instruction 5343
    //MAD
    t4 = t5 * t1.xxxx + t4;
    //Instruction 5344
    //MAD
    t1 = t0 * t1.zzzz + t4;
    //Instruction 5345
    //MAD
    t3 = t5 * t5 + t3;
    //Instruction 5346
    //MAD
    t0 = t0 * t0 + t3;
    //Instruction 5347
    //RSQ
    t3 = inversesqrt(t0);
    //Instruction 5348
    //MAD
    t0 = t0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 5349
    //DIV
    t0 = vec4(1.0, 1.0, 1.0, 1.0) / t0;
    //Instruction 5350
    //MUL
    t1 = t1 * t3;
    //Instruction 5351
    //MAX
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 5352
    //MUL
    t0 = t0 * t1;
    //Instruction 5353
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 5354
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 5355
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 5356
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 5357
    //ADD
    t0.xyz = t0.xyz + t16_2.xyz;
    //Instruction 5358
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 5359
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 5360
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 5361
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 5362
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 5363
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 5364
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 5365
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 5366
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 5367
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 5368
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 5369
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
mediump vec4 t16_2;
mediump vec3 t16_3;
highp vec3 t4;
mediump vec3 t16_4;
lowp float t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_7;
mediump vec3 t16_11;
lowp vec3 t10_11;
mediump float t16_21;
mediump float t16_22;
highp float t25;
void main()
{
    //Instruction 5238
    //SAMPLE_C_LZ
    vec3 txVec19 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec19, 0.0);
    //Instruction 5239
    //ADD
    t16_7 = (-_LightShadowData.x) + 1.0;
    //Instruction 5240
    //MAD
    t16_0.x = t16_0.x * t16_7 + _LightShadowData.x;
    //Instruction 5241
    //MUL
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 5242
    //DP3
    t16_21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 5243
    //RSQ
    t16_21 = inversesqrt(t16_21);
    //Instruction 5244
    //MUL
    t16_1.xyz = vec3(t16_21) * vs_TEXCOORD4.xyz;
    //Instruction 5245
    //DP3
    t16_21 = dot((-vs_TEXCOORD1.xyz), t16_1.xyz);
    //Instruction 5246
    //ADD
    t16_22 = t16_21 + t16_21;
    //Instruction 5247
    //MOV
    t16_21 = t16_21;
    t16_21 = clamp(t16_21, 0.0, 1.0);
    //Instruction 5248
    //ADD
    t16_2.y = (-t16_21) + 1.0;
    //Instruction 5249
    //MAD
    t16_3.xyz = t16_1.xyz * (-vec3(t16_22)) + (-vs_TEXCOORD1.xyz);
    //Instruction 5250
    //DP3
    t16_2.x = dot(t16_3.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 5251
    //MUL
    t16_2.xy = t16_2.xy * t16_2.xy;
    //Instruction 5252
    //MUL
    t16_2.yz = t16_2.xy * t16_2.xy;
    //Instruction 5253
    //ADD
    t16_2.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    //Instruction 5254
    //SAMPLE
    t10_4 = texture(unity_NHxRoughness, t16_2.yw).w;
    //Instruction 5255
    //MUL
    t16_21 = t16_2.x * 7.000000;
    //Instruction 5256
    //MUL
    t16_4.x = t10_4 * 16.000000;
    //Instruction 5257
    //SAMPLE
    t10_11.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 5258
    //MUL
    t16_5.xyz = t10_11.xyz * _Color.xyz;
    //Instruction 5259
    //MAD
    t16_2.xyw = _Color.xyz * t10_11.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 5260
    //MAD
    t16_2.xyw = vec3(_Metallic) * t16_2.xyw + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 5261
    //MAD
    t16_22 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 5262
    //MUL
    t16_3.xyz = vec3(t16_22) * t16_5.xyz;
    //Instruction 5263
    //ADD
    t16_22 = (-t16_22) + _Glossiness;
    //Instruction 5264
    //ADD
    t16_22 = t16_22 + 1.0;
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 5265
    //ADD
    t16_6.xyz = (-t16_2.xyw) + vec3(t16_22);
    //Instruction 5266
    //MAD
    t16_6.xyz = t16_2.zzz * t16_6.xyz + t16_2.xyw;
    //Instruction 5267
    //MAD
    t16_2.xyz = t16_4.xxx * t16_2.xyw + t16_3.xyz;
    //Instruction 5268
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 5269
    //SAMPLE
    t10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 5270
    //MUL
    t16_2.xyz = vec3(t10_4) * vs_TEXCOORD5.xyz;
    //Instruction 5271
    //MUL
    t16_2.xyz = t16_3.xyz * t16_2.xyz;
    //Instruction 5272
    //DP3
    t16_22 = dot(t16_1.xyz, _WorldSpaceLightPos0.xyz);
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 5273
    //MAD
    t16_0.xyz = t16_0.xyz * vec3(t16_22) + t16_2.xyz;
    //Instruction 5274
    //DP3
    t16_11.x = dot(vs_TEXCOORD1.xyz, t16_1.xyz);
    //Instruction 5275
    //ADD
    t16_11.x = t16_11.x + t16_11.x;
    //Instruction 5276
    //MAD
    t16_11.xyz = t16_1.xyz * (-t16_11.xxx) + vs_TEXCOORD1.xyz;
    //Instruction 5277
    //SAMPLE_L
    t10_1 = textureLod(unity_SpecCube0, t16_11.xyz, t16_21);
    //Instruction 5278
    //MUL
    t16_21 = t10_1.w * unity_SpecCube0_HDR.x;
    //Instruction 5279
    //MUL
    t16_2.xyz = t10_1.xyz * vec3(t16_21);
    //Instruction 5280
    //MUL
    t16_2.xyz = vec3(t10_4) * t16_2.xyz;
    //Instruction 5281
    //MAD
    t16_0.xyz = t16_2.xyz * t16_6.xyz + t16_0.xyz;
    //Instruction 5282
    //ADD
    t16_4.xyz = t16_0.xyz + (-unity_FogColor.xyz);
    //Instruction 5283
    //MOV
    t25 = vs_TEXCOORD7;
    t25 = clamp(t25, 0.0, 1.0);
    //Instruction 5284
    //MAD
    t4.xyz = vec3(t25) * t16_4.xyz + unity_FogColor.xyz;
    //Instruction 5285
    //MOV
    SV_Target0.xyz = t4.xyz;
    //Instruction 5286
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 5287
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_NORMALMAP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp mat3 tangentToWorld_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex);
  tmpvar_6 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_14;
  n_14 = (tmpvar_11.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  highp vec3 dir_20;
  dir_20 = tmpvar_4.xyz;
  highp mat3 tmpvar_21;
  tmpvar_21[0] = _Object2World[0].xyz;
  tmpvar_21[1] = _Object2World[1].xyz;
  tmpvar_21[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = normalize((tmpvar_21 * dir_20));
  tmpvar_22.w = tmpvar_4.w;
  highp vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22.www;
  mediump vec3 normal_24;
  normal_24 = tmpvar_19;
  mediump vec3 tangent_25;
  tangent_25 = tmpvar_22.xyz;
  mediump vec3 flip_26;
  flip_26 = tmpvar_23;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (((normal_24.yzx * tangent_25.zxy) - (normal_24.zxy * tangent_25.yzx)) * flip_26);
  mediump mat3 tmpvar_28;
  tmpvar_28[0].x = tangent_25.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = normal_24.x;
  tmpvar_28[1].x = tangent_25.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = normal_24.y;
  tmpvar_28[2].x = tangent_25.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = normal_24.z;
  tangentToWorld_5 = tmpvar_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_5[0].x;
  v_29.y = tangentToWorld_5[1].x;
  v_29.z = tangentToWorld_5[2].x;
  tmpvar_7.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_5[0].y;
  v_30.y = tangentToWorld_5[1].y;
  v_30.z = tangentToWorld_5[2].y;
  tmpvar_8.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_5[0].z;
  v_31.y = tangentToWorld_5[1].z;
  v_31.z = tangentToWorld_5[2].z;
  tmpvar_9.xyz = v_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = tmpvar_19;
  mediump vec4 normal_33;
  normal_33 = tmpvar_32;
  mediump vec3 x2_34;
  mediump vec3 x1_35;
  x1_35.x = dot (unity_SHAr, normal_33);
  x1_35.y = dot (unity_SHAg, normal_33);
  x1_35.z = dot (unity_SHAb, normal_33);
  mediump vec4 tmpvar_36;
  tmpvar_36 = (normal_33.xyzz * normal_33.yzzx);
  x2_34.x = dot (unity_SHBr, tmpvar_36);
  x2_34.y = dot (unity_SHBg, tmpvar_36);
  x2_34.z = dot (unity_SHBb, tmpvar_36);
  tmpvar_10.xyz = ((x2_34 + (unity_SHC.xyz * 
    ((normal_33.x * normal_33.x) - (normal_33.y * normal_33.y))
  )) + x1_35);
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = normalize(n_14);
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD2_1 = tmpvar_8;
  xlv_TEXCOORD2_2 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 c_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD2.xyz;
  tmpvar_3 = xlv_TEXCOORD2_1.xyz;
  tmpvar_4 = xlv_TEXCOORD2_2.xyz;
  mediump mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_2.x;
  tmpvar_5[0].y = tmpvar_3.x;
  tmpvar_5[0].z = tmpvar_4.x;
  tmpvar_5[1].x = tmpvar_2.y;
  tmpvar_5[1].y = tmpvar_3.y;
  tmpvar_5[1].z = tmpvar_4.y;
  tmpvar_5[2].x = tmpvar_2.z;
  tmpvar_5[2].y = tmpvar_3.z;
  tmpvar_5[2].z = tmpvar_4.z;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_BumpMap, xlv_TEXCOORD0.xy);
  mediump vec4 packednormal_8;
  packednormal_8 = tmpvar_7;
  mediump vec3 n_9;
  n_9 = (((packednormal_8.xyz * 2.0) - 1.0) * tmpvar_5);
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * tmpvar_6.xyz);
  mediump vec3 tmpvar_11;
  mediump float oneMinusReflectivity_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_10, vec3(_Metallic));
  oneMinusReflectivity_12 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_11 = (tmpvar_10 * oneMinusReflectivity_12);
  mediump vec3 tmpvar_14;
  tmpvar_14 = _LightColor0.xyz;
  mediump float tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_15 = tmpvar_16.y;
  highp vec3 tmpvar_17;
  highp vec4 tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = -(xlv_TEXCOORD1);
  tmpvar_17 = tmpvar_19;
  tmpvar_18 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_20;
  mediump vec3 worldNormal_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = -(tmpvar_17);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (n_9, I_23)
   * n_9)));
  worldNormal_21 = tmpvar_22;
  mediump vec4 hdr_24;
  hdr_24 = tmpvar_18;
  highp float mip_25;
  mediump float tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = (1.0 - _Glossiness);
  tmpvar_26 = (tmpvar_27 * 7.0);
  mip_25 = tmpvar_26;
  highp vec4 tmpvar_28;
  tmpvar_28.xyz = worldNormal_21;
  tmpvar_28.w = mip_25;
  lowp vec4 tmpvar_29;
  tmpvar_29 = textureCube (unity_SpecCube0, tmpvar_28.xyz, mip_25);
  mediump vec4 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  tmpvar_20 = ((tmpvar_30.w * hdr_24.x) * tmpvar_30.xyz);
  tmpvar_20 = (tmpvar_20 * tmpvar_15);
  mediump vec2 tmpvar_31;
  tmpvar_31.x = dot ((tmpvar_19 - (2.0 * 
    (dot (n_9, tmpvar_19) * n_9)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_31.y = (1.0 - clamp (dot (n_9, tmpvar_19), 0.0, 1.0));
  mediump vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31 * tmpvar_31) * (tmpvar_31 * tmpvar_31));
  mediump vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = tmpvar_27;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (unity_NHxRoughness, tmpvar_33);
  mediump vec3 tmpvar_35;
  tmpvar_35 = (((
    ((tmpvar_11 + ((tmpvar_34.w * 16.0) * tmpvar_13)) * tmpvar_14)
   * 
    clamp (dot (n_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_15)
   * tmpvar_11)) + (tmpvar_20 * mix (tmpvar_13, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_12)), 0.0, 1.0)
  ), tmpvar_32.yyy)));
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = tmpvar_35;
  c_1.w = tmpvar_36.w;
  c_1.xyz = tmpvar_35;
  c_1.xyz = c_1.xyz;
  mediump vec4 xlat_varoutput_37;
  xlat_varoutput_37.xyz = c_1.xyz;
  xlat_varoutput_37.w = 1.0;
  gl_FragData[0] = xlat_varoutput_37;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump float t16_1;
highp vec3 t2;
highp vec3 t3;
mediump vec3 t16_4;
mediump vec3 t16_5;
highp float t18;
void main()
{
    //Instruction 5414
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 5415
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 5416
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 5417
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 5418
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 5419
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 5420
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 5421
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 5422
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 5423
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 5424
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 5425
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 5426
    //ADD
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 5427
    //DP3
    t16_1 = dot(t0.xyz, t0.xyz);
    //Instruction 5428
    //RSQ
    t16_1 = inversesqrt(t16_1);
    //Instruction 5429
    //MUL
    vs_TEXCOORD1.xyz = t0.xyz * vec3(t16_1);
    //Instruction 5430
    //MUL
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 5431
    //MAD
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    //Instruction 5432
    //MAD
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    //Instruction 5433
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 5434
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 5435
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 5436
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 5437
    //MOV
    vs_TEXCOORD2.w = 0.0;
    //Instruction 5438
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 5439
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 5440
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 5441
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 5442
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 5443
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 5444
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 5445
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 5446
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 5447
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 5448
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 5449
    //DP3
    t18 = dot(t2.xyz, t2.xyz);
    //Instruction 5450
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 5451
    //MUL
    t1.xyz = vec3(t18) * t2.xyz;
    //Instruction 5452
    //MUL
    t16_4.xyz = t0.yzx * t1.zxy;
    //Instruction 5453
    //MAD
    t16_4.xyz = t1.yzx * t0.zxy + (-t16_4.xyz);
    //Instruction 5454
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 5455
    //MOV
    vs_TEXCOORD3.w = 0.0;
    //Instruction 5456
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 5457
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 5458
    //MUL
    t16_4.x = t1.y * t1.y;
    //Instruction 5459
    //MAD
    t16_4.x = t1.x * t1.x + (-t16_4.x);
    //Instruction 5460
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 5461
    //DP4
    t16_5.x = dot(unity_SHBr, t16_0);
    //Instruction 5462
    //DP4
    t16_5.y = dot(unity_SHBg, t16_0);
    //Instruction 5463
    //DP4
    t16_5.z = dot(unity_SHBb, t16_0);
    //Instruction 5464
    //MAD
    t16_4.xyz = unity_SHC.xyz * t16_4.xxx + t16_5.xyz;
    //Instruction 5465
    //MOV
    t1.w = 1.0;
    //Instruction 5466
    //DP4
    t16_5.x = dot(unity_SHAr, t1);
    //Instruction 5467
    //DP4
    t16_5.y = dot(unity_SHAg, t1);
    //Instruction 5468
    //DP4
    t16_5.z = dot(unity_SHAb, t1);
    //Instruction 5469
    //ADD
    vs_TEXCOORD5.xyz = t16_4.xyz + t16_5.xyz;
    //Instruction 5470
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 5471
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_4;
lowp float t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump vec3 t16_12;
lowp vec3 t10_12;
mediump float t16_25;
mediump float t16_26;
void main()
{
    //Instruction 5370
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 5371
    //MAD
    t16_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 5372
    //MUL
    t16_2.xyz = t16_1.yyy * vs_TEXCOORD3.xyz;
    //Instruction 5373
    //MAD
    t16_1.xyw = t16_1.xxx * vs_TEXCOORD2.xyz + t16_2.xyz;
    //Instruction 5374
    //MAD
    t16_1.xyz = t16_1.zzz * vs_TEXCOORD4.xyz + t16_1.xyw;
    //Instruction 5375
    //DP3
    t16_25 = dot((-vs_TEXCOORD1.xyz), t16_1.xyz);
    //Instruction 5376
    //ADD
    t16_2.x = t16_25 + t16_25;
    //Instruction 5377
    //MOV
    t16_25 = t16_25;
    t16_25 = clamp(t16_25, 0.0, 1.0);
    //Instruction 5378
    //ADD
    t16_3.y = (-t16_25) + 1.0;
    //Instruction 5379
    //MAD
    t16_2.xyz = t16_1.xyz * (-t16_2.xxx) + (-vs_TEXCOORD1.xyz);
    //Instruction 5380
    //DP3
    t16_3.x = dot(t16_2.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 5381
    //MUL
    t16_2.xy = t16_3.xy * t16_3.xy;
    //Instruction 5382
    //MUL
    t16_0.yz = t16_2.xy * t16_2.xy;
    //Instruction 5383
    //ADD
    t16_0.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    //Instruction 5384
    //SAMPLE
    t10_4 = texture(unity_NHxRoughness, t16_0.yw).w;
    //Instruction 5385
    //MUL
    t16_25 = t16_0.x * 7.000000;
    //Instruction 5386
    //MUL
    t16_4 = t10_4 * 16.000000;
    //Instruction 5387
    //SAMPLE
    t10_12.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 5388
    //MUL
    t16_5.xyz = t10_12.xyz * _Color.xyz;
    //Instruction 5389
    //MAD
    t16_2.xyz = _Color.xyz * t10_12.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 5390
    //MAD
    t16_2.xyz = vec3(_Metallic) * t16_2.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 5391
    //MAD
    t16_26 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 5392
    //MUL
    t16_3.xyz = vec3(t16_26) * t16_5.xyz;
    //Instruction 5393
    //ADD
    t16_26 = (-t16_26) + _Glossiness;
    //Instruction 5394
    //ADD
    t16_26 = t16_26 + 1.0;
    t16_26 = clamp(t16_26, 0.0, 1.0);
    //Instruction 5395
    //ADD
    t16_6.xyz = (-t16_2.xyz) + vec3(t16_26);
    //Instruction 5396
    //MAD
    t16_6.xyz = t16_0.zzz * t16_6.xyz + t16_2.xyz;
    //Instruction 5397
    //MAD
    t16_2.xyz = vec3(t16_4) * t16_2.xyz + t16_3.xyz;
    //Instruction 5398
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 5399
    //SAMPLE
    t10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 5400
    //MUL
    t16_7.xyz = vec3(t10_4) * vs_TEXCOORD5.xyz;
    //Instruction 5401
    //MUL
    t16_3.xyz = t16_3.xyz * t16_7.xyz;
    //Instruction 5402
    //DP3
    t16_26 = dot(t16_1.xyz, _WorldSpaceLightPos0.xyz);
    t16_26 = clamp(t16_26, 0.0, 1.0);
    //Instruction 5403
    //MAD
    t16_2.xyz = t16_2.xyz * vec3(t16_26) + t16_3.xyz;
    //Instruction 5404
    //DP3
    t16_12.x = dot(vs_TEXCOORD1.xyz, t16_1.xyz);
    //Instruction 5405
    //ADD
    t16_12.x = t16_12.x + t16_12.x;
    //Instruction 5406
    //MAD
    t16_12.xyz = t16_1.xyz * (-t16_12.xxx) + vs_TEXCOORD1.xyz;
    //Instruction 5407
    //SAMPLE_L
    t10_0 = textureLod(unity_SpecCube0, t16_12.xyz, t16_25);
    //Instruction 5408
    //MUL
    t16_1.x = t10_0.w * unity_SpecCube0_HDR.x;
    //Instruction 5409
    //MUL
    t16_1.xyz = t10_0.xyz * t16_1.xxx;
    //Instruction 5410
    //MUL
    t16_1.xyz = vec3(t10_4) * t16_1.xyz;
    //Instruction 5411
    //MAD
    SV_Target0.xyz = t16_1.xyz * t16_6.xyz + t16_2.xyz;
    //Instruction 5412
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 5413
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_NORMALMAP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp mat3 tangentToWorld_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  tmpvar_6 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_15;
  n_15 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp vec4 v_17;
  v_17.x = _World2Object[0].x;
  v_17.y = _World2Object[1].x;
  v_17.z = _World2Object[2].x;
  v_17.w = _World2Object[3].x;
  highp vec4 v_18;
  v_18.x = _World2Object[0].y;
  v_18.y = _World2Object[1].y;
  v_18.z = _World2Object[2].y;
  v_18.w = _World2Object[3].y;
  highp vec4 v_19;
  v_19.x = _World2Object[0].z;
  v_19.y = _World2Object[1].z;
  v_19.z = _World2Object[2].z;
  v_19.w = _World2Object[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(((
    (v_17.xyz * norm_16.x)
   + 
    (v_18.xyz * norm_16.y)
  ) + (v_19.xyz * norm_16.z)));
  highp vec3 dir_21;
  dir_21 = tmpvar_4.xyz;
  highp mat3 tmpvar_22;
  tmpvar_22[0] = _Object2World[0].xyz;
  tmpvar_22[1] = _Object2World[1].xyz;
  tmpvar_22[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_23;
  tmpvar_23.xyz = normalize((tmpvar_22 * dir_21));
  tmpvar_23.w = tmpvar_4.w;
  highp vec3 tmpvar_24;
  tmpvar_24 = tmpvar_23.www;
  mediump vec3 normal_25;
  normal_25 = tmpvar_20;
  mediump vec3 tangent_26;
  tangent_26 = tmpvar_23.xyz;
  mediump vec3 flip_27;
  flip_27 = tmpvar_24;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (((normal_25.yzx * tangent_26.zxy) - (normal_25.zxy * tangent_26.yzx)) * flip_27);
  mediump mat3 tmpvar_29;
  tmpvar_29[0].x = tangent_26.x;
  tmpvar_29[0].y = tmpvar_28.x;
  tmpvar_29[0].z = normal_25.x;
  tmpvar_29[1].x = tangent_26.y;
  tmpvar_29[1].y = tmpvar_28.y;
  tmpvar_29[1].z = normal_25.y;
  tmpvar_29[2].x = tangent_26.z;
  tmpvar_29[2].y = tmpvar_28.z;
  tmpvar_29[2].z = normal_25.z;
  tangentToWorld_5 = tmpvar_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_5[0].x;
  v_30.y = tangentToWorld_5[1].x;
  v_30.z = tangentToWorld_5[2].x;
  tmpvar_7.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_5[0].y;
  v_31.y = tangentToWorld_5[1].y;
  v_31.z = tangentToWorld_5[2].y;
  tmpvar_8.xyz = v_31;
  highp vec3 v_32;
  v_32.x = tangentToWorld_5[0].z;
  v_32.y = tangentToWorld_5[1].z;
  v_32.z = tangentToWorld_5[2].z;
  tmpvar_9.xyz = v_32;
  tmpvar_11 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = tmpvar_20;
  mediump vec4 normal_34;
  normal_34 = tmpvar_33;
  mediump vec3 x2_35;
  mediump vec3 x1_36;
  x1_36.x = dot (unity_SHAr, normal_34);
  x1_36.y = dot (unity_SHAg, normal_34);
  x1_36.z = dot (unity_SHAb, normal_34);
  mediump vec4 tmpvar_37;
  tmpvar_37 = (normal_34.xyzz * normal_34.yzzx);
  x2_35.x = dot (unity_SHBr, tmpvar_37);
  x2_35.y = dot (unity_SHBg, tmpvar_37);
  x2_35.z = dot (unity_SHBb, tmpvar_37);
  tmpvar_10.xyz = ((x2_35 + (unity_SHC.xyz * 
    ((normal_34.x * normal_34.x) - (normal_34.y * normal_34.y))
  )) + x1_36);
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = normalize(n_15);
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD2_1 = tmpvar_8;
  xlv_TEXCOORD2_2 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  mediump float atten_2;
  mediump vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_3 = xlv_TEXCOORD2.xyz;
  tmpvar_4 = xlv_TEXCOORD2_1.xyz;
  tmpvar_5 = xlv_TEXCOORD2_2.xyz;
  mediump mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_3.x;
  tmpvar_6[0].y = tmpvar_4.x;
  tmpvar_6[0].z = tmpvar_5.x;
  tmpvar_6[1].x = tmpvar_3.y;
  tmpvar_6[1].y = tmpvar_4.y;
  tmpvar_6[1].z = tmpvar_5.y;
  tmpvar_6[2].x = tmpvar_3.z;
  tmpvar_6[2].y = tmpvar_4.z;
  tmpvar_6[2].z = tmpvar_5.z;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_BumpMap, xlv_TEXCOORD0.xy);
  mediump vec4 packednormal_9;
  packednormal_9 = tmpvar_8;
  mediump vec3 n_10;
  n_10 = (((packednormal_9.xyz * 2.0) - 1.0) * tmpvar_6);
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * tmpvar_7.xyz);
  mediump vec3 tmpvar_12;
  mediump float oneMinusReflectivity_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_11, vec3(_Metallic));
  oneMinusReflectivity_13 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_12 = (tmpvar_11 * oneMinusReflectivity_13);
  mediump vec3 tmpvar_15;
  tmpvar_15 = _LightColor0.xyz;
  lowp float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_16 = tmpvar_17;
  atten_2 = tmpvar_16;
  mediump float tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_18 = tmpvar_19.y;
  highp vec3 tmpvar_20;
  highp vec4 tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = -(xlv_TEXCOORD1);
  tmpvar_20 = tmpvar_22;
  tmpvar_21 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_23;
  mediump vec3 worldNormal_24;
  highp vec3 tmpvar_25;
  highp vec3 I_26;
  I_26 = -(tmpvar_20);
  tmpvar_25 = (I_26 - (2.0 * (
    dot (n_10, I_26)
   * n_10)));
  worldNormal_24 = tmpvar_25;
  mediump vec4 hdr_27;
  hdr_27 = tmpvar_21;
  highp float mip_28;
  mediump float tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = (1.0 - _Glossiness);
  tmpvar_29 = (tmpvar_30 * 7.0);
  mip_28 = tmpvar_29;
  highp vec4 tmpvar_31;
  tmpvar_31.xyz = worldNormal_24;
  tmpvar_31.w = mip_28;
  lowp vec4 tmpvar_32;
  tmpvar_32 = textureCube (unity_SpecCube0, tmpvar_31.xyz, mip_28);
  mediump vec4 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  tmpvar_23 = ((tmpvar_33.w * hdr_27.x) * tmpvar_33.xyz);
  tmpvar_23 = (tmpvar_23 * tmpvar_18);
  mediump vec2 tmpvar_34;
  tmpvar_34.x = dot ((tmpvar_22 - (2.0 * 
    (dot (n_10, tmpvar_22) * n_10)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_34.y = (1.0 - clamp (dot (n_10, tmpvar_22), 0.0, 1.0));
  mediump vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34 * tmpvar_34) * (tmpvar_34 * tmpvar_34));
  mediump vec2 tmpvar_36;
  tmpvar_36.x = tmpvar_35.x;
  tmpvar_36.y = tmpvar_30;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (unity_NHxRoughness, tmpvar_36);
  mediump vec3 tmpvar_38;
  tmpvar_38 = (((
    ((tmpvar_12 + ((tmpvar_37.w * 16.0) * tmpvar_14)) * (tmpvar_15 * atten_2))
   * 
    clamp (dot (n_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_18)
   * tmpvar_12)) + (tmpvar_23 * mix (tmpvar_14, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_13)), 0.0, 1.0)
  ), tmpvar_35.yyy)));
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = tmpvar_38;
  c_1.w = tmpvar_39.w;
  c_1.xyz = tmpvar_38;
  c_1.xyz = c_1.xyz;
  mediump vec4 xlat_varoutput_40;
  xlat_varoutput_40.xyz = c_1.xyz;
  xlat_varoutput_40.w = 1.0;
  gl_FragData[0] = xlat_varoutput_40;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_NORMALMAP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp mat3 tangentToWorld_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex);
  tmpvar_6 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_14;
  n_14 = (tmpvar_11.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  highp vec3 dir_20;
  dir_20 = tmpvar_4.xyz;
  highp mat3 tmpvar_21;
  tmpvar_21[0] = _Object2World[0].xyz;
  tmpvar_21[1] = _Object2World[1].xyz;
  tmpvar_21[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = normalize((tmpvar_21 * dir_20));
  tmpvar_22.w = tmpvar_4.w;
  highp vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22.www;
  mediump vec3 normal_24;
  normal_24 = tmpvar_19;
  mediump vec3 tangent_25;
  tangent_25 = tmpvar_22.xyz;
  mediump vec3 flip_26;
  flip_26 = tmpvar_23;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (((normal_24.yzx * tangent_25.zxy) - (normal_24.zxy * tangent_25.yzx)) * flip_26);
  mediump mat3 tmpvar_28;
  tmpvar_28[0].x = tangent_25.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = normal_24.x;
  tmpvar_28[1].x = tangent_25.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = normal_24.y;
  tmpvar_28[2].x = tangent_25.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = normal_24.z;
  tangentToWorld_5 = tmpvar_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_5[0].x;
  v_29.y = tangentToWorld_5[1].x;
  v_29.z = tangentToWorld_5[2].x;
  tmpvar_7.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_5[0].y;
  v_30.y = tangentToWorld_5[1].y;
  v_30.z = tangentToWorld_5[2].y;
  tmpvar_8.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_5[0].z;
  v_31.y = tangentToWorld_5[1].z;
  v_31.z = tangentToWorld_5[2].z;
  tmpvar_9.xyz = v_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = tmpvar_19;
  mediump vec4 normal_33;
  normal_33 = tmpvar_32;
  mediump vec3 x2_34;
  mediump vec3 x1_35;
  x1_35.x = dot (unity_SHAr, normal_33);
  x1_35.y = dot (unity_SHAg, normal_33);
  x1_35.z = dot (unity_SHAb, normal_33);
  mediump vec4 tmpvar_36;
  tmpvar_36 = (normal_33.xyzz * normal_33.yzzx);
  x2_34.x = dot (unity_SHBr, tmpvar_36);
  x2_34.y = dot (unity_SHBg, tmpvar_36);
  x2_34.z = dot (unity_SHBb, tmpvar_36);
  tmpvar_10.xyz = ((x2_34 + (unity_SHC.xyz * 
    ((normal_33.x * normal_33.x) - (normal_33.y * normal_33.y))
  )) + x1_35);
  highp vec3 lightColor0_37;
  lightColor0_37 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_38;
  lightColor1_38 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_39;
  lightColor2_39 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_40;
  lightColor3_40 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_41;
  lightAttenSq_41 = unity_4LightAtten0;
  highp vec3 col_42;
  highp vec4 ndotl_43;
  highp vec4 lengthSq_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (unity_4LightPosX0 - tmpvar_11.x);
  highp vec4 tmpvar_46;
  tmpvar_46 = (unity_4LightPosY0 - tmpvar_11.y);
  highp vec4 tmpvar_47;
  tmpvar_47 = (unity_4LightPosZ0 - tmpvar_11.z);
  lengthSq_44 = (tmpvar_45 * tmpvar_45);
  lengthSq_44 = (lengthSq_44 + (tmpvar_46 * tmpvar_46));
  lengthSq_44 = (lengthSq_44 + (tmpvar_47 * tmpvar_47));
  ndotl_43 = (tmpvar_45 * tmpvar_19.x);
  ndotl_43 = (ndotl_43 + (tmpvar_46 * tmpvar_19.y));
  ndotl_43 = (ndotl_43 + (tmpvar_47 * tmpvar_19.z));
  highp vec4 tmpvar_48;
  tmpvar_48 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_43 * inversesqrt(lengthSq_44)));
  ndotl_43 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_48 * (1.0/((1.0 + 
    (lengthSq_44 * lightAttenSq_41)
  ))));
  col_42 = (lightColor0_37 * tmpvar_49.x);
  col_42 = (col_42 + (lightColor1_38 * tmpvar_49.y));
  col_42 = (col_42 + (lightColor2_39 * tmpvar_49.z));
  col_42 = (col_42 + (lightColor3_40 * tmpvar_49.w));
  tmpvar_10.xyz = (tmpvar_10.xyz + col_42);
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = normalize(n_14);
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD2_1 = tmpvar_8;
  xlv_TEXCOORD2_2 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 c_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD2.xyz;
  tmpvar_3 = xlv_TEXCOORD2_1.xyz;
  tmpvar_4 = xlv_TEXCOORD2_2.xyz;
  mediump mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_2.x;
  tmpvar_5[0].y = tmpvar_3.x;
  tmpvar_5[0].z = tmpvar_4.x;
  tmpvar_5[1].x = tmpvar_2.y;
  tmpvar_5[1].y = tmpvar_3.y;
  tmpvar_5[1].z = tmpvar_4.y;
  tmpvar_5[2].x = tmpvar_2.z;
  tmpvar_5[2].y = tmpvar_3.z;
  tmpvar_5[2].z = tmpvar_4.z;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_BumpMap, xlv_TEXCOORD0.xy);
  mediump vec4 packednormal_8;
  packednormal_8 = tmpvar_7;
  mediump vec3 n_9;
  n_9 = (((packednormal_8.xyz * 2.0) - 1.0) * tmpvar_5);
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * tmpvar_6.xyz);
  mediump vec3 tmpvar_11;
  mediump float oneMinusReflectivity_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_10, vec3(_Metallic));
  oneMinusReflectivity_12 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_11 = (tmpvar_10 * oneMinusReflectivity_12);
  mediump vec3 tmpvar_14;
  tmpvar_14 = _LightColor0.xyz;
  mediump float tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_15 = tmpvar_16.y;
  highp vec3 tmpvar_17;
  highp vec4 tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = -(xlv_TEXCOORD1);
  tmpvar_17 = tmpvar_19;
  tmpvar_18 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_20;
  mediump vec3 worldNormal_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = -(tmpvar_17);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (n_9, I_23)
   * n_9)));
  worldNormal_21 = tmpvar_22;
  mediump vec4 hdr_24;
  hdr_24 = tmpvar_18;
  highp float mip_25;
  mediump float tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = (1.0 - _Glossiness);
  tmpvar_26 = (tmpvar_27 * 7.0);
  mip_25 = tmpvar_26;
  highp vec4 tmpvar_28;
  tmpvar_28.xyz = worldNormal_21;
  tmpvar_28.w = mip_25;
  lowp vec4 tmpvar_29;
  tmpvar_29 = textureCube (unity_SpecCube0, tmpvar_28.xyz, mip_25);
  mediump vec4 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  tmpvar_20 = ((tmpvar_30.w * hdr_24.x) * tmpvar_30.xyz);
  tmpvar_20 = (tmpvar_20 * tmpvar_15);
  mediump vec2 tmpvar_31;
  tmpvar_31.x = dot ((tmpvar_19 - (2.0 * 
    (dot (n_9, tmpvar_19) * n_9)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_31.y = (1.0 - clamp (dot (n_9, tmpvar_19), 0.0, 1.0));
  mediump vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31 * tmpvar_31) * (tmpvar_31 * tmpvar_31));
  mediump vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = tmpvar_27;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (unity_NHxRoughness, tmpvar_33);
  mediump vec3 tmpvar_35;
  tmpvar_35 = (((
    ((tmpvar_11 + ((tmpvar_34.w * 16.0) * tmpvar_13)) * tmpvar_14)
   * 
    clamp (dot (n_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_15)
   * tmpvar_11)) + (tmpvar_20 * mix (tmpvar_13, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_12)), 0.0, 1.0)
  ), tmpvar_32.yyy)));
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = tmpvar_35;
  c_1.w = tmpvar_36.w;
  c_1.xyz = tmpvar_35;
  c_1.xyz = c_1.xyz;
  mediump vec4 xlat_varoutput_37;
  xlat_varoutput_37.xyz = c_1.xyz;
  xlat_varoutput_37.w = 1.0;
  gl_FragData[0] = xlat_varoutput_37;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec4 t4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp float t21;
void main()
{
    //Instruction 4967
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4968
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4969
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4970
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4971
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 4972
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 4973
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 4974
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4975
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4976
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4977
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4978
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4979
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4980
    //DP3
    t16_2 = dot(t1.xyz, t1.xyz);
    //Instruction 4981
    //RSQ
    t16_2 = inversesqrt(t16_2);
    //Instruction 4982
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * vec3(t16_2);
    //Instruction 4983
    //MUL
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 4984
    //MAD
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    //Instruction 4985
    //MAD
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    //Instruction 4986
    //DP3
    t21 = dot(t1.xyz, t1.xyz);
    //Instruction 4987
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 4988
    //MUL
    t1.xyz = vec3(t21) * t1.xyz;
    //Instruction 4989
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 4990
    //MOV
    vs_TEXCOORD2.w = 0.0;
    //Instruction 4991
    //MUL
    t3.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4992
    //MUL
    t3.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4993
    //MUL
    t3.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4994
    //MUL
    t4.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4995
    //MUL
    t4.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4996
    //MUL
    t4.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4997
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 4998
    //MUL
    t4.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4999
    //MUL
    t4.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 5000
    //MUL
    t4.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 5001
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 5002
    //DP3
    t21 = dot(t3.xyz, t3.xyz);
    //Instruction 5003
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 5004
    //MUL
    t2.xyz = vec3(t21) * t3.xyz;
    //Instruction 5005
    //MUL
    t16_5.xyz = t1.yzx * t2.zxy;
    //Instruction 5006
    //MAD
    t16_5.xyz = t2.yzx * t1.zxy + (-t16_5.xyz);
    //Instruction 5007
    //MUL
    vs_TEXCOORD3.xyz = t16_5.xyz * in_TANGENT0.www;
    //Instruction 5008
    //MOV
    vs_TEXCOORD3.w = 0.0;
    //Instruction 5009
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 5010
    //MOV
    vs_TEXCOORD4.xyz = t2.xyz;
    //Instruction 5011
    //MUL
    t16_5.x = t2.y * t2.y;
    //Instruction 5012
    //MAD
    t16_5.x = t2.x * t2.x + (-t16_5.x);
    //Instruction 5013
    //MUL
    t16_1 = t2.yzzx * t2.xyzz;
    //Instruction 5014
    //DP4
    t16_6.x = dot(unity_SHBr, t16_1);
    //Instruction 5015
    //DP4
    t16_6.y = dot(unity_SHBg, t16_1);
    //Instruction 5016
    //DP4
    t16_6.z = dot(unity_SHBb, t16_1);
    //Instruction 5017
    //MAD
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    //Instruction 5018
    //MOV
    t2.w = 1.0;
    //Instruction 5019
    //DP4
    t16_6.x = dot(unity_SHAr, t2);
    //Instruction 5020
    //DP4
    t16_6.y = dot(unity_SHAg, t2);
    //Instruction 5021
    //DP4
    t16_6.z = dot(unity_SHAb, t2);
    //Instruction 5022
    //ADD
    t16_5.xyz = t16_5.xyz + t16_6.xyz;
    //Instruction 5023
    //ADD
    t1 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 5024
    //MUL
    t3 = t2.yyyy * t1;
    //Instruction 5025
    //MUL
    t1 = t1 * t1;
    //Instruction 5026
    //ADD
    t4 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 5027
    //ADD
    t0 = (-t0.zzzz) + unity_4LightPosZ0;
    //Instruction 5028
    //MAD
    t3 = t4 * t2.xxxx + t3;
    //Instruction 5029
    //MAD
    t2 = t0 * t2.zzzz + t3;
    //Instruction 5030
    //MAD
    t1 = t4 * t4 + t1;
    //Instruction 5031
    //MAD
    t0 = t0 * t0 + t1;
    //Instruction 5032
    //RSQ
    t1 = inversesqrt(t0);
    //Instruction 5033
    //MAD
    t0 = t0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 5034
    //DIV
    t0 = vec4(1.0, 1.0, 1.0, 1.0) / t0;
    //Instruction 5035
    //MUL
    t1 = t1 * t2;
    //Instruction 5036
    //MAX
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 5037
    //MUL
    t0 = t0 * t1;
    //Instruction 5038
    //MUL
    t3.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 5039
    //MAD
    t3.xyz = unity_LightColor[0].xyz * t0.xxx + t3.xyz;
    //Instruction 5040
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t3.xyz;
    //Instruction 5041
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 5042
    //ADD
    t0.xyz = t0.xyz + t16_5.xyz;
    //Instruction 5043
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 5044
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 5045
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_4;
lowp float t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump vec3 t16_12;
lowp vec3 t10_12;
mediump float t16_25;
mediump float t16_26;
void main()
{
    //Instruction 4923
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 4924
    //MAD
    t16_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 4925
    //MUL
    t16_2.xyz = t16_1.yyy * vs_TEXCOORD3.xyz;
    //Instruction 4926
    //MAD
    t16_1.xyw = t16_1.xxx * vs_TEXCOORD2.xyz + t16_2.xyz;
    //Instruction 4927
    //MAD
    t16_1.xyz = t16_1.zzz * vs_TEXCOORD4.xyz + t16_1.xyw;
    //Instruction 4928
    //DP3
    t16_25 = dot((-vs_TEXCOORD1.xyz), t16_1.xyz);
    //Instruction 4929
    //ADD
    t16_2.x = t16_25 + t16_25;
    //Instruction 4930
    //MOV
    t16_25 = t16_25;
    t16_25 = clamp(t16_25, 0.0, 1.0);
    //Instruction 4931
    //ADD
    t16_3.y = (-t16_25) + 1.0;
    //Instruction 4932
    //MAD
    t16_2.xyz = t16_1.xyz * (-t16_2.xxx) + (-vs_TEXCOORD1.xyz);
    //Instruction 4933
    //DP3
    t16_3.x = dot(t16_2.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 4934
    //MUL
    t16_2.xy = t16_3.xy * t16_3.xy;
    //Instruction 4935
    //MUL
    t16_0.yz = t16_2.xy * t16_2.xy;
    //Instruction 4936
    //ADD
    t16_0.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    //Instruction 4937
    //SAMPLE
    t10_4 = texture(unity_NHxRoughness, t16_0.yw).w;
    //Instruction 4938
    //MUL
    t16_25 = t16_0.x * 7.000000;
    //Instruction 4939
    //MUL
    t16_4 = t10_4 * 16.000000;
    //Instruction 4940
    //SAMPLE
    t10_12.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4941
    //MUL
    t16_5.xyz = t10_12.xyz * _Color.xyz;
    //Instruction 4942
    //MAD
    t16_2.xyz = _Color.xyz * t10_12.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 4943
    //MAD
    t16_2.xyz = vec3(_Metallic) * t16_2.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 4944
    //MAD
    t16_26 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 4945
    //MUL
    t16_3.xyz = vec3(t16_26) * t16_5.xyz;
    //Instruction 4946
    //ADD
    t16_26 = (-t16_26) + _Glossiness;
    //Instruction 4947
    //ADD
    t16_26 = t16_26 + 1.0;
    t16_26 = clamp(t16_26, 0.0, 1.0);
    //Instruction 4948
    //ADD
    t16_6.xyz = (-t16_2.xyz) + vec3(t16_26);
    //Instruction 4949
    //MAD
    t16_6.xyz = t16_0.zzz * t16_6.xyz + t16_2.xyz;
    //Instruction 4950
    //MAD
    t16_2.xyz = vec3(t16_4) * t16_2.xyz + t16_3.xyz;
    //Instruction 4951
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 4952
    //SAMPLE
    t10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 4953
    //MUL
    t16_7.xyz = vec3(t10_4) * vs_TEXCOORD5.xyz;
    //Instruction 4954
    //MUL
    t16_3.xyz = t16_3.xyz * t16_7.xyz;
    //Instruction 4955
    //DP3
    t16_26 = dot(t16_1.xyz, _WorldSpaceLightPos0.xyz);
    t16_26 = clamp(t16_26, 0.0, 1.0);
    //Instruction 4956
    //MAD
    t16_2.xyz = t16_2.xyz * vec3(t16_26) + t16_3.xyz;
    //Instruction 4957
    //DP3
    t16_12.x = dot(vs_TEXCOORD1.xyz, t16_1.xyz);
    //Instruction 4958
    //ADD
    t16_12.x = t16_12.x + t16_12.x;
    //Instruction 4959
    //MAD
    t16_12.xyz = t16_1.xyz * (-t16_12.xxx) + vs_TEXCOORD1.xyz;
    //Instruction 4960
    //SAMPLE_L
    t10_0 = textureLod(unity_SpecCube0, t16_12.xyz, t16_25);
    //Instruction 4961
    //MUL
    t16_1.x = t10_0.w * unity_SpecCube0_HDR.x;
    //Instruction 4962
    //MUL
    t16_1.xyz = t10_0.xyz * t16_1.xxx;
    //Instruction 4963
    //MUL
    t16_1.xyz = vec3(t10_4) * t16_1.xyz;
    //Instruction 4964
    //MAD
    SV_Target0.xyz = t16_1.xyz * t16_6.xyz + t16_2.xyz;
    //Instruction 4965
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4966
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_NORMALMAP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp mat3 tangentToWorld_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  tmpvar_6 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_15;
  n_15 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp vec4 v_17;
  v_17.x = _World2Object[0].x;
  v_17.y = _World2Object[1].x;
  v_17.z = _World2Object[2].x;
  v_17.w = _World2Object[3].x;
  highp vec4 v_18;
  v_18.x = _World2Object[0].y;
  v_18.y = _World2Object[1].y;
  v_18.z = _World2Object[2].y;
  v_18.w = _World2Object[3].y;
  highp vec4 v_19;
  v_19.x = _World2Object[0].z;
  v_19.y = _World2Object[1].z;
  v_19.z = _World2Object[2].z;
  v_19.w = _World2Object[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(((
    (v_17.xyz * norm_16.x)
   + 
    (v_18.xyz * norm_16.y)
  ) + (v_19.xyz * norm_16.z)));
  highp vec3 dir_21;
  dir_21 = tmpvar_4.xyz;
  highp mat3 tmpvar_22;
  tmpvar_22[0] = _Object2World[0].xyz;
  tmpvar_22[1] = _Object2World[1].xyz;
  tmpvar_22[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_23;
  tmpvar_23.xyz = normalize((tmpvar_22 * dir_21));
  tmpvar_23.w = tmpvar_4.w;
  highp vec3 tmpvar_24;
  tmpvar_24 = tmpvar_23.www;
  mediump vec3 normal_25;
  normal_25 = tmpvar_20;
  mediump vec3 tangent_26;
  tangent_26 = tmpvar_23.xyz;
  mediump vec3 flip_27;
  flip_27 = tmpvar_24;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (((normal_25.yzx * tangent_26.zxy) - (normal_25.zxy * tangent_26.yzx)) * flip_27);
  mediump mat3 tmpvar_29;
  tmpvar_29[0].x = tangent_26.x;
  tmpvar_29[0].y = tmpvar_28.x;
  tmpvar_29[0].z = normal_25.x;
  tmpvar_29[1].x = tangent_26.y;
  tmpvar_29[1].y = tmpvar_28.y;
  tmpvar_29[1].z = normal_25.y;
  tmpvar_29[2].x = tangent_26.z;
  tmpvar_29[2].y = tmpvar_28.z;
  tmpvar_29[2].z = normal_25.z;
  tangentToWorld_5 = tmpvar_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_5[0].x;
  v_30.y = tangentToWorld_5[1].x;
  v_30.z = tangentToWorld_5[2].x;
  tmpvar_7.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_5[0].y;
  v_31.y = tangentToWorld_5[1].y;
  v_31.z = tangentToWorld_5[2].y;
  tmpvar_8.xyz = v_31;
  highp vec3 v_32;
  v_32.x = tangentToWorld_5[0].z;
  v_32.y = tangentToWorld_5[1].z;
  v_32.z = tangentToWorld_5[2].z;
  tmpvar_9.xyz = v_32;
  tmpvar_11 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = tmpvar_20;
  mediump vec4 normal_34;
  normal_34 = tmpvar_33;
  mediump vec3 x2_35;
  mediump vec3 x1_36;
  x1_36.x = dot (unity_SHAr, normal_34);
  x1_36.y = dot (unity_SHAg, normal_34);
  x1_36.z = dot (unity_SHAb, normal_34);
  mediump vec4 tmpvar_37;
  tmpvar_37 = (normal_34.xyzz * normal_34.yzzx);
  x2_35.x = dot (unity_SHBr, tmpvar_37);
  x2_35.y = dot (unity_SHBg, tmpvar_37);
  x2_35.z = dot (unity_SHBb, tmpvar_37);
  tmpvar_10.xyz = ((x2_35 + (unity_SHC.xyz * 
    ((normal_34.x * normal_34.x) - (normal_34.y * normal_34.y))
  )) + x1_36);
  highp vec3 lightColor0_38;
  lightColor0_38 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_39;
  lightColor1_39 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_40;
  lightColor2_40 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_41;
  lightColor3_41 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_42;
  lightAttenSq_42 = unity_4LightAtten0;
  highp vec3 col_43;
  highp vec4 ndotl_44;
  highp vec4 lengthSq_45;
  highp vec4 tmpvar_46;
  tmpvar_46 = (unity_4LightPosX0 - tmpvar_12.x);
  highp vec4 tmpvar_47;
  tmpvar_47 = (unity_4LightPosY0 - tmpvar_12.y);
  highp vec4 tmpvar_48;
  tmpvar_48 = (unity_4LightPosZ0 - tmpvar_12.z);
  lengthSq_45 = (tmpvar_46 * tmpvar_46);
  lengthSq_45 = (lengthSq_45 + (tmpvar_47 * tmpvar_47));
  lengthSq_45 = (lengthSq_45 + (tmpvar_48 * tmpvar_48));
  ndotl_44 = (tmpvar_46 * tmpvar_20.x);
  ndotl_44 = (ndotl_44 + (tmpvar_47 * tmpvar_20.y));
  ndotl_44 = (ndotl_44 + (tmpvar_48 * tmpvar_20.z));
  highp vec4 tmpvar_49;
  tmpvar_49 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_44 * inversesqrt(lengthSq_45)));
  ndotl_44 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = (tmpvar_49 * (1.0/((1.0 + 
    (lengthSq_45 * lightAttenSq_42)
  ))));
  col_43 = (lightColor0_38 * tmpvar_50.x);
  col_43 = (col_43 + (lightColor1_39 * tmpvar_50.y));
  col_43 = (col_43 + (lightColor2_40 * tmpvar_50.z));
  col_43 = (col_43 + (lightColor3_41 * tmpvar_50.w));
  tmpvar_10.xyz = (tmpvar_10.xyz + col_43);
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = normalize(n_15);
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD2_1 = tmpvar_8;
  xlv_TEXCOORD2_2 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  mediump float atten_2;
  mediump vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_3 = xlv_TEXCOORD2.xyz;
  tmpvar_4 = xlv_TEXCOORD2_1.xyz;
  tmpvar_5 = xlv_TEXCOORD2_2.xyz;
  mediump mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_3.x;
  tmpvar_6[0].y = tmpvar_4.x;
  tmpvar_6[0].z = tmpvar_5.x;
  tmpvar_6[1].x = tmpvar_3.y;
  tmpvar_6[1].y = tmpvar_4.y;
  tmpvar_6[1].z = tmpvar_5.y;
  tmpvar_6[2].x = tmpvar_3.z;
  tmpvar_6[2].y = tmpvar_4.z;
  tmpvar_6[2].z = tmpvar_5.z;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_BumpMap, xlv_TEXCOORD0.xy);
  mediump vec4 packednormal_9;
  packednormal_9 = tmpvar_8;
  mediump vec3 n_10;
  n_10 = (((packednormal_9.xyz * 2.0) - 1.0) * tmpvar_6);
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * tmpvar_7.xyz);
  mediump vec3 tmpvar_12;
  mediump float oneMinusReflectivity_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_11, vec3(_Metallic));
  oneMinusReflectivity_13 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_12 = (tmpvar_11 * oneMinusReflectivity_13);
  mediump vec3 tmpvar_15;
  tmpvar_15 = _LightColor0.xyz;
  lowp float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_16 = tmpvar_17;
  atten_2 = tmpvar_16;
  mediump float tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_18 = tmpvar_19.y;
  highp vec3 tmpvar_20;
  highp vec4 tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = -(xlv_TEXCOORD1);
  tmpvar_20 = tmpvar_22;
  tmpvar_21 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_23;
  mediump vec3 worldNormal_24;
  highp vec3 tmpvar_25;
  highp vec3 I_26;
  I_26 = -(tmpvar_20);
  tmpvar_25 = (I_26 - (2.0 * (
    dot (n_10, I_26)
   * n_10)));
  worldNormal_24 = tmpvar_25;
  mediump vec4 hdr_27;
  hdr_27 = tmpvar_21;
  highp float mip_28;
  mediump float tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = (1.0 - _Glossiness);
  tmpvar_29 = (tmpvar_30 * 7.0);
  mip_28 = tmpvar_29;
  highp vec4 tmpvar_31;
  tmpvar_31.xyz = worldNormal_24;
  tmpvar_31.w = mip_28;
  lowp vec4 tmpvar_32;
  tmpvar_32 = textureCube (unity_SpecCube0, tmpvar_31.xyz, mip_28);
  mediump vec4 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  tmpvar_23 = ((tmpvar_33.w * hdr_27.x) * tmpvar_33.xyz);
  tmpvar_23 = (tmpvar_23 * tmpvar_18);
  mediump vec2 tmpvar_34;
  tmpvar_34.x = dot ((tmpvar_22 - (2.0 * 
    (dot (n_10, tmpvar_22) * n_10)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_34.y = (1.0 - clamp (dot (n_10, tmpvar_22), 0.0, 1.0));
  mediump vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34 * tmpvar_34) * (tmpvar_34 * tmpvar_34));
  mediump vec2 tmpvar_36;
  tmpvar_36.x = tmpvar_35.x;
  tmpvar_36.y = tmpvar_30;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (unity_NHxRoughness, tmpvar_36);
  mediump vec3 tmpvar_38;
  tmpvar_38 = (((
    ((tmpvar_12 + ((tmpvar_37.w * 16.0) * tmpvar_14)) * (tmpvar_15 * atten_2))
   * 
    clamp (dot (n_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_18)
   * tmpvar_12)) + (tmpvar_23 * mix (tmpvar_14, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_13)), 0.0, 1.0)
  ), tmpvar_35.yyy)));
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = tmpvar_38;
  c_1.w = tmpvar_39.w;
  c_1.xyz = tmpvar_38;
  c_1.xyz = c_1.xyz;
  mediump vec4 xlat_varoutput_40;
  xlat_varoutput_40.xyz = c_1.xyz;
  xlat_varoutput_40.w = 1.0;
  gl_FragData[0] = xlat_varoutput_40;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_NORMALMAP" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp mat3 tangentToWorld_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  tmpvar_6 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_15;
  n_15 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp vec4 v_17;
  v_17.x = _World2Object[0].x;
  v_17.y = _World2Object[1].x;
  v_17.z = _World2Object[2].x;
  v_17.w = _World2Object[3].x;
  highp vec4 v_18;
  v_18.x = _World2Object[0].y;
  v_18.y = _World2Object[1].y;
  v_18.z = _World2Object[2].y;
  v_18.w = _World2Object[3].y;
  highp vec4 v_19;
  v_19.x = _World2Object[0].z;
  v_19.y = _World2Object[1].z;
  v_19.z = _World2Object[2].z;
  v_19.w = _World2Object[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(((
    (v_17.xyz * norm_16.x)
   + 
    (v_18.xyz * norm_16.y)
  ) + (v_19.xyz * norm_16.z)));
  highp vec3 dir_21;
  dir_21 = tmpvar_4.xyz;
  highp mat3 tmpvar_22;
  tmpvar_22[0] = _Object2World[0].xyz;
  tmpvar_22[1] = _Object2World[1].xyz;
  tmpvar_22[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_23;
  tmpvar_23.xyz = normalize((tmpvar_22 * dir_21));
  tmpvar_23.w = tmpvar_4.w;
  highp vec3 tmpvar_24;
  tmpvar_24 = tmpvar_23.www;
  mediump vec3 normal_25;
  normal_25 = tmpvar_20;
  mediump vec3 tangent_26;
  tangent_26 = tmpvar_23.xyz;
  mediump vec3 flip_27;
  flip_27 = tmpvar_24;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (((normal_25.yzx * tangent_26.zxy) - (normal_25.zxy * tangent_26.yzx)) * flip_27);
  mediump mat3 tmpvar_29;
  tmpvar_29[0].x = tangent_26.x;
  tmpvar_29[0].y = tmpvar_28.x;
  tmpvar_29[0].z = normal_25.x;
  tmpvar_29[1].x = tangent_26.y;
  tmpvar_29[1].y = tmpvar_28.y;
  tmpvar_29[1].z = normal_25.y;
  tmpvar_29[2].x = tangent_26.z;
  tmpvar_29[2].y = tmpvar_28.z;
  tmpvar_29[2].z = normal_25.z;
  tangentToWorld_5 = tmpvar_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_5[0].x;
  v_30.y = tangentToWorld_5[1].x;
  v_30.z = tangentToWorld_5[2].x;
  tmpvar_7.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_5[0].y;
  v_31.y = tangentToWorld_5[1].y;
  v_31.z = tangentToWorld_5[2].y;
  tmpvar_8.xyz = v_31;
  highp vec3 v_32;
  v_32.x = tangentToWorld_5[0].z;
  v_32.y = tangentToWorld_5[1].z;
  v_32.z = tangentToWorld_5[2].z;
  tmpvar_9.xyz = v_32;
  tmpvar_11 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = tmpvar_20;
  mediump vec4 normal_34;
  normal_34 = tmpvar_33;
  mediump vec3 x2_35;
  mediump vec3 x1_36;
  x1_36.x = dot (unity_SHAr, normal_34);
  x1_36.y = dot (unity_SHAg, normal_34);
  x1_36.z = dot (unity_SHAb, normal_34);
  mediump vec4 tmpvar_37;
  tmpvar_37 = (normal_34.xyzz * normal_34.yzzx);
  x2_35.x = dot (unity_SHBr, tmpvar_37);
  x2_35.y = dot (unity_SHBg, tmpvar_37);
  x2_35.z = dot (unity_SHBb, tmpvar_37);
  tmpvar_10.xyz = ((x2_35 + (unity_SHC.xyz * 
    ((normal_34.x * normal_34.x) - (normal_34.y * normal_34.y))
  )) + x1_36);
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = normalize(n_15);
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD2_1 = tmpvar_8;
  xlv_TEXCOORD2_2 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform lowp sampler2DShadow _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  mediump float atten_2;
  mediump vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_3 = xlv_TEXCOORD2.xyz;
  tmpvar_4 = xlv_TEXCOORD2_1.xyz;
  tmpvar_5 = xlv_TEXCOORD2_2.xyz;
  mediump mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_3.x;
  tmpvar_6[0].y = tmpvar_4.x;
  tmpvar_6[0].z = tmpvar_5.x;
  tmpvar_6[1].x = tmpvar_3.y;
  tmpvar_6[1].y = tmpvar_4.y;
  tmpvar_6[1].z = tmpvar_5.y;
  tmpvar_6[2].x = tmpvar_3.z;
  tmpvar_6[2].y = tmpvar_4.z;
  tmpvar_6[2].z = tmpvar_5.z;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_BumpMap, xlv_TEXCOORD0.xy);
  mediump vec4 packednormal_9;
  packednormal_9 = tmpvar_8;
  mediump vec3 n_10;
  n_10 = (((packednormal_9.xyz * 2.0) - 1.0) * tmpvar_6);
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * tmpvar_7.xyz);
  mediump vec3 tmpvar_12;
  mediump float oneMinusReflectivity_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_11, vec3(_Metallic));
  oneMinusReflectivity_13 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_12 = (tmpvar_11 * oneMinusReflectivity_13);
  mediump vec3 tmpvar_15;
  tmpvar_15 = _LightColor0.xyz;
  lowp float shadow_16;
  shadow_16 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  atten_2 = shadow_16;
  mediump float tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_17 = tmpvar_18.y;
  highp vec3 tmpvar_19;
  highp vec4 tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = -(xlv_TEXCOORD1);
  tmpvar_19 = tmpvar_21;
  tmpvar_20 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_22;
  mediump vec3 worldNormal_23;
  highp vec3 tmpvar_24;
  highp vec3 I_25;
  I_25 = -(tmpvar_19);
  tmpvar_24 = (I_25 - (2.0 * (
    dot (n_10, I_25)
   * n_10)));
  worldNormal_23 = tmpvar_24;
  mediump vec4 hdr_26;
  hdr_26 = tmpvar_20;
  highp float mip_27;
  mediump float tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = (1.0 - _Glossiness);
  tmpvar_28 = (tmpvar_29 * 7.0);
  mip_27 = tmpvar_28;
  highp vec4 tmpvar_30;
  tmpvar_30.xyz = worldNormal_23;
  tmpvar_30.w = mip_27;
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (unity_SpecCube0, tmpvar_30.xyz, mip_27);
  mediump vec4 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  tmpvar_22 = ((tmpvar_32.w * hdr_26.x) * tmpvar_32.xyz);
  tmpvar_22 = (tmpvar_22 * tmpvar_17);
  mediump vec2 tmpvar_33;
  tmpvar_33.x = dot ((tmpvar_21 - (2.0 * 
    (dot (n_10, tmpvar_21) * n_10)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_33.y = (1.0 - clamp (dot (n_10, tmpvar_21), 0.0, 1.0));
  mediump vec2 tmpvar_34;
  tmpvar_34 = ((tmpvar_33 * tmpvar_33) * (tmpvar_33 * tmpvar_33));
  mediump vec2 tmpvar_35;
  tmpvar_35.x = tmpvar_34.x;
  tmpvar_35.y = tmpvar_29;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (unity_NHxRoughness, tmpvar_35);
  mediump vec3 tmpvar_37;
  tmpvar_37 = (((
    ((tmpvar_12 + ((tmpvar_36.w * 16.0) * tmpvar_14)) * (tmpvar_15 * atten_2))
   * 
    clamp (dot (n_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_17)
   * tmpvar_12)) + (tmpvar_22 * mix (tmpvar_14, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_13)), 0.0, 1.0)
  ), tmpvar_34.yyy)));
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = tmpvar_37;
  c_1.w = tmpvar_38.w;
  c_1.xyz = tmpvar_37;
  c_1.xyz = c_1.xyz;
  mediump vec4 xlat_varoutput_39;
  xlat_varoutput_39.xyz = c_1.xyz;
  xlat_varoutput_39.w = 1.0;
  gl_FragData[0] = xlat_varoutput_39;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump float t16_1;
highp vec3 t2;
highp vec3 t3;
mediump vec3 t16_4;
mediump vec3 t16_5;
highp float t18;
void main()
{
    //Instruction 5520
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 5521
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 5522
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 5523
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 5524
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 5525
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 5526
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 5527
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 5528
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 5529
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 5530
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 5531
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 5532
    //ADD
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 5533
    //DP3
    t16_1 = dot(t0.xyz, t0.xyz);
    //Instruction 5534
    //RSQ
    t16_1 = inversesqrt(t16_1);
    //Instruction 5535
    //MUL
    vs_TEXCOORD1.xyz = t0.xyz * vec3(t16_1);
    //Instruction 5536
    //MUL
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 5537
    //MAD
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    //Instruction 5538
    //MAD
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    //Instruction 5539
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 5540
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 5541
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 5542
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 5543
    //MOV
    vs_TEXCOORD2.w = 0.0;
    //Instruction 5544
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 5545
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 5546
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 5547
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 5548
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 5549
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 5550
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 5551
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 5552
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 5553
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 5554
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 5555
    //DP3
    t18 = dot(t2.xyz, t2.xyz);
    //Instruction 5556
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 5557
    //MUL
    t1.xyz = vec3(t18) * t2.xyz;
    //Instruction 5558
    //MUL
    t16_4.xyz = t0.yzx * t1.zxy;
    //Instruction 5559
    //MAD
    t16_4.xyz = t1.yzx * t0.zxy + (-t16_4.xyz);
    //Instruction 5560
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 5561
    //MOV
    vs_TEXCOORD3.w = 0.0;
    //Instruction 5562
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 5563
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 5564
    //MUL
    t16_4.x = t1.y * t1.y;
    //Instruction 5565
    //MAD
    t16_4.x = t1.x * t1.x + (-t16_4.x);
    //Instruction 5566
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 5567
    //DP4
    t16_5.x = dot(unity_SHBr, t16_0);
    //Instruction 5568
    //DP4
    t16_5.y = dot(unity_SHBg, t16_0);
    //Instruction 5569
    //DP4
    t16_5.z = dot(unity_SHBb, t16_0);
    //Instruction 5570
    //MAD
    t16_4.xyz = unity_SHC.xyz * t16_4.xxx + t16_5.xyz;
    //Instruction 5571
    //MOV
    t1.w = 1.0;
    //Instruction 5572
    //DP4
    t16_5.x = dot(unity_SHAr, t1);
    //Instruction 5573
    //DP4
    t16_5.y = dot(unity_SHAg, t1);
    //Instruction 5574
    //DP4
    t16_5.z = dot(unity_SHAb, t1);
    //Instruction 5575
    //ADD
    vs_TEXCOORD5.xyz = t16_4.xyz + t16_5.xyz;
    //Instruction 5576
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 5577
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 5578
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 5579
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 5580
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 5581
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 5582
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 5583
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 5584
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 5585
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 5586
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec4 t16_1;
lowp vec4 t10_1;
mediump vec4 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
lowp float t10_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump float t16_8;
mediump vec3 t16_13;
lowp vec3 t10_13;
mediump float t16_24;
mediump float t16_26;
void main()
{
    //Instruction 5472
    //SAMPLE_C_LZ
    vec3 txVec20 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec20, 0.0);
    //Instruction 5473
    //ADD
    t16_8 = (-_LightShadowData.x) + 1.0;
    //Instruction 5474
    //MAD
    t16_0.x = t16_0.x * t16_8 + _LightShadowData.x;
    //Instruction 5475
    //MUL
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 5476
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 5477
    //MAD
    t16_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 5478
    //MUL
    t16_3.xyz = t16_2.yyy * vs_TEXCOORD3.xyz;
    //Instruction 5479
    //MAD
    t16_2.xyw = t16_2.xxx * vs_TEXCOORD2.xyz + t16_3.xyz;
    //Instruction 5480
    //MAD
    t16_2.xyz = t16_2.zzz * vs_TEXCOORD4.xyz + t16_2.xyw;
    //Instruction 5481
    //DP3
    t16_24 = dot((-vs_TEXCOORD1.xyz), t16_2.xyz);
    //Instruction 5482
    //ADD
    t16_26 = t16_24 + t16_24;
    //Instruction 5483
    //MOV
    t16_24 = t16_24;
    t16_24 = clamp(t16_24, 0.0, 1.0);
    //Instruction 5484
    //ADD
    t16_3.y = (-t16_24) + 1.0;
    //Instruction 5485
    //MAD
    t16_4.xyz = t16_2.xyz * (-vec3(t16_26)) + (-vs_TEXCOORD1.xyz);
    //Instruction 5486
    //DP3
    t16_3.x = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 5487
    //MUL
    t16_3.xy = t16_3.xy * t16_3.xy;
    //Instruction 5488
    //MUL
    t16_1.yz = t16_3.xy * t16_3.xy;
    //Instruction 5489
    //ADD
    t16_1.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    //Instruction 5490
    //SAMPLE
    t10_5 = texture(unity_NHxRoughness, t16_1.yw).w;
    //Instruction 5491
    //MUL
    t16_24 = t16_1.x * 7.000000;
    //Instruction 5492
    //MUL
    t16_5 = t10_5 * 16.000000;
    //Instruction 5493
    //SAMPLE
    t10_13.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 5494
    //MUL
    t16_6.xyz = t10_13.xyz * _Color.xyz;
    //Instruction 5495
    //MAD
    t16_3.xyz = _Color.xyz * t10_13.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 5496
    //MAD
    t16_3.xyz = vec3(_Metallic) * t16_3.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 5497
    //MAD
    t16_26 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 5498
    //MUL
    t16_4.xyz = vec3(t16_26) * t16_6.xyz;
    //Instruction 5499
    //ADD
    t16_26 = (-t16_26) + _Glossiness;
    //Instruction 5500
    //ADD
    t16_26 = t16_26 + 1.0;
    t16_26 = clamp(t16_26, 0.0, 1.0);
    //Instruction 5501
    //ADD
    t16_7.xyz = (-t16_3.xyz) + vec3(t16_26);
    //Instruction 5502
    //MAD
    t16_7.xyz = t16_1.zzz * t16_7.xyz + t16_3.xyz;
    //Instruction 5503
    //MAD
    t16_3.xyz = vec3(t16_5) * t16_3.xyz + t16_4.xyz;
    //Instruction 5504
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 5505
    //SAMPLE
    t10_5 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 5506
    //MUL
    t16_3.xyz = vec3(t10_5) * vs_TEXCOORD5.xyz;
    //Instruction 5507
    //MUL
    t16_3.xyz = t16_4.xyz * t16_3.xyz;
    //Instruction 5508
    //DP3
    t16_26 = dot(t16_2.xyz, _WorldSpaceLightPos0.xyz);
    t16_26 = clamp(t16_26, 0.0, 1.0);
    //Instruction 5509
    //MAD
    t16_0.xyz = t16_0.xyz * vec3(t16_26) + t16_3.xyz;
    //Instruction 5510
    //DP3
    t16_13.x = dot(vs_TEXCOORD1.xyz, t16_2.xyz);
    //Instruction 5511
    //ADD
    t16_13.x = t16_13.x + t16_13.x;
    //Instruction 5512
    //MAD
    t16_13.xyz = t16_2.xyz * (-t16_13.xxx) + vs_TEXCOORD1.xyz;
    //Instruction 5513
    //SAMPLE_L
    t10_1 = textureLod(unity_SpecCube0, t16_13.xyz, t16_24);
    //Instruction 5514
    //MUL
    t16_24 = t10_1.w * unity_SpecCube0_HDR.x;
    //Instruction 5515
    //MUL
    t16_2.xyz = t10_1.xyz * vec3(t16_24);
    //Instruction 5516
    //MUL
    t16_2.xyz = vec3(t10_5) * t16_2.xyz;
    //Instruction 5517
    //MAD
    SV_Target0.xyz = t16_2.xyz * t16_7.xyz + t16_0.xyz;
    //Instruction 5518
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 5519
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_NORMALMAP" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp mat3 tangentToWorld_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  tmpvar_6 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_15;
  n_15 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp vec4 v_17;
  v_17.x = _World2Object[0].x;
  v_17.y = _World2Object[1].x;
  v_17.z = _World2Object[2].x;
  v_17.w = _World2Object[3].x;
  highp vec4 v_18;
  v_18.x = _World2Object[0].y;
  v_18.y = _World2Object[1].y;
  v_18.z = _World2Object[2].y;
  v_18.w = _World2Object[3].y;
  highp vec4 v_19;
  v_19.x = _World2Object[0].z;
  v_19.y = _World2Object[1].z;
  v_19.z = _World2Object[2].z;
  v_19.w = _World2Object[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(((
    (v_17.xyz * norm_16.x)
   + 
    (v_18.xyz * norm_16.y)
  ) + (v_19.xyz * norm_16.z)));
  highp vec3 dir_21;
  dir_21 = tmpvar_4.xyz;
  highp mat3 tmpvar_22;
  tmpvar_22[0] = _Object2World[0].xyz;
  tmpvar_22[1] = _Object2World[1].xyz;
  tmpvar_22[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_23;
  tmpvar_23.xyz = normalize((tmpvar_22 * dir_21));
  tmpvar_23.w = tmpvar_4.w;
  highp vec3 tmpvar_24;
  tmpvar_24 = tmpvar_23.www;
  mediump vec3 normal_25;
  normal_25 = tmpvar_20;
  mediump vec3 tangent_26;
  tangent_26 = tmpvar_23.xyz;
  mediump vec3 flip_27;
  flip_27 = tmpvar_24;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (((normal_25.yzx * tangent_26.zxy) - (normal_25.zxy * tangent_26.yzx)) * flip_27);
  mediump mat3 tmpvar_29;
  tmpvar_29[0].x = tangent_26.x;
  tmpvar_29[0].y = tmpvar_28.x;
  tmpvar_29[0].z = normal_25.x;
  tmpvar_29[1].x = tangent_26.y;
  tmpvar_29[1].y = tmpvar_28.y;
  tmpvar_29[1].z = normal_25.y;
  tmpvar_29[2].x = tangent_26.z;
  tmpvar_29[2].y = tmpvar_28.z;
  tmpvar_29[2].z = normal_25.z;
  tangentToWorld_5 = tmpvar_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_5[0].x;
  v_30.y = tangentToWorld_5[1].x;
  v_30.z = tangentToWorld_5[2].x;
  tmpvar_7.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_5[0].y;
  v_31.y = tangentToWorld_5[1].y;
  v_31.z = tangentToWorld_5[2].y;
  tmpvar_8.xyz = v_31;
  highp vec3 v_32;
  v_32.x = tangentToWorld_5[0].z;
  v_32.y = tangentToWorld_5[1].z;
  v_32.z = tangentToWorld_5[2].z;
  tmpvar_9.xyz = v_32;
  tmpvar_11 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = tmpvar_20;
  mediump vec4 normal_34;
  normal_34 = tmpvar_33;
  mediump vec3 x2_35;
  mediump vec3 x1_36;
  x1_36.x = dot (unity_SHAr, normal_34);
  x1_36.y = dot (unity_SHAg, normal_34);
  x1_36.z = dot (unity_SHAb, normal_34);
  mediump vec4 tmpvar_37;
  tmpvar_37 = (normal_34.xyzz * normal_34.yzzx);
  x2_35.x = dot (unity_SHBr, tmpvar_37);
  x2_35.y = dot (unity_SHBg, tmpvar_37);
  x2_35.z = dot (unity_SHBb, tmpvar_37);
  tmpvar_10.xyz = ((x2_35 + (unity_SHC.xyz * 
    ((normal_34.x * normal_34.x) - (normal_34.y * normal_34.y))
  )) + x1_36);
  highp vec3 lightColor0_38;
  lightColor0_38 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_39;
  lightColor1_39 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_40;
  lightColor2_40 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_41;
  lightColor3_41 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_42;
  lightAttenSq_42 = unity_4LightAtten0;
  highp vec3 col_43;
  highp vec4 ndotl_44;
  highp vec4 lengthSq_45;
  highp vec4 tmpvar_46;
  tmpvar_46 = (unity_4LightPosX0 - tmpvar_12.x);
  highp vec4 tmpvar_47;
  tmpvar_47 = (unity_4LightPosY0 - tmpvar_12.y);
  highp vec4 tmpvar_48;
  tmpvar_48 = (unity_4LightPosZ0 - tmpvar_12.z);
  lengthSq_45 = (tmpvar_46 * tmpvar_46);
  lengthSq_45 = (lengthSq_45 + (tmpvar_47 * tmpvar_47));
  lengthSq_45 = (lengthSq_45 + (tmpvar_48 * tmpvar_48));
  ndotl_44 = (tmpvar_46 * tmpvar_20.x);
  ndotl_44 = (ndotl_44 + (tmpvar_47 * tmpvar_20.y));
  ndotl_44 = (ndotl_44 + (tmpvar_48 * tmpvar_20.z));
  highp vec4 tmpvar_49;
  tmpvar_49 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_44 * inversesqrt(lengthSq_45)));
  ndotl_44 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = (tmpvar_49 * (1.0/((1.0 + 
    (lengthSq_45 * lightAttenSq_42)
  ))));
  col_43 = (lightColor0_38 * tmpvar_50.x);
  col_43 = (col_43 + (lightColor1_39 * tmpvar_50.y));
  col_43 = (col_43 + (lightColor2_40 * tmpvar_50.z));
  col_43 = (col_43 + (lightColor3_41 * tmpvar_50.w));
  tmpvar_10.xyz = (tmpvar_10.xyz + col_43);
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = normalize(n_15);
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD2_1 = tmpvar_8;
  xlv_TEXCOORD2_2 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform lowp sampler2DShadow _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  mediump float atten_2;
  mediump vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_3 = xlv_TEXCOORD2.xyz;
  tmpvar_4 = xlv_TEXCOORD2_1.xyz;
  tmpvar_5 = xlv_TEXCOORD2_2.xyz;
  mediump mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_3.x;
  tmpvar_6[0].y = tmpvar_4.x;
  tmpvar_6[0].z = tmpvar_5.x;
  tmpvar_6[1].x = tmpvar_3.y;
  tmpvar_6[1].y = tmpvar_4.y;
  tmpvar_6[1].z = tmpvar_5.y;
  tmpvar_6[2].x = tmpvar_3.z;
  tmpvar_6[2].y = tmpvar_4.z;
  tmpvar_6[2].z = tmpvar_5.z;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_BumpMap, xlv_TEXCOORD0.xy);
  mediump vec4 packednormal_9;
  packednormal_9 = tmpvar_8;
  mediump vec3 n_10;
  n_10 = (((packednormal_9.xyz * 2.0) - 1.0) * tmpvar_6);
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * tmpvar_7.xyz);
  mediump vec3 tmpvar_12;
  mediump float oneMinusReflectivity_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_11, vec3(_Metallic));
  oneMinusReflectivity_13 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_12 = (tmpvar_11 * oneMinusReflectivity_13);
  mediump vec3 tmpvar_15;
  tmpvar_15 = _LightColor0.xyz;
  lowp float shadow_16;
  shadow_16 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  atten_2 = shadow_16;
  mediump float tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_17 = tmpvar_18.y;
  highp vec3 tmpvar_19;
  highp vec4 tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = -(xlv_TEXCOORD1);
  tmpvar_19 = tmpvar_21;
  tmpvar_20 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_22;
  mediump vec3 worldNormal_23;
  highp vec3 tmpvar_24;
  highp vec3 I_25;
  I_25 = -(tmpvar_19);
  tmpvar_24 = (I_25 - (2.0 * (
    dot (n_10, I_25)
   * n_10)));
  worldNormal_23 = tmpvar_24;
  mediump vec4 hdr_26;
  hdr_26 = tmpvar_20;
  highp float mip_27;
  mediump float tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = (1.0 - _Glossiness);
  tmpvar_28 = (tmpvar_29 * 7.0);
  mip_27 = tmpvar_28;
  highp vec4 tmpvar_30;
  tmpvar_30.xyz = worldNormal_23;
  tmpvar_30.w = mip_27;
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (unity_SpecCube0, tmpvar_30.xyz, mip_27);
  mediump vec4 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  tmpvar_22 = ((tmpvar_32.w * hdr_26.x) * tmpvar_32.xyz);
  tmpvar_22 = (tmpvar_22 * tmpvar_17);
  mediump vec2 tmpvar_33;
  tmpvar_33.x = dot ((tmpvar_21 - (2.0 * 
    (dot (n_10, tmpvar_21) * n_10)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_33.y = (1.0 - clamp (dot (n_10, tmpvar_21), 0.0, 1.0));
  mediump vec2 tmpvar_34;
  tmpvar_34 = ((tmpvar_33 * tmpvar_33) * (tmpvar_33 * tmpvar_33));
  mediump vec2 tmpvar_35;
  tmpvar_35.x = tmpvar_34.x;
  tmpvar_35.y = tmpvar_29;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (unity_NHxRoughness, tmpvar_35);
  mediump vec3 tmpvar_37;
  tmpvar_37 = (((
    ((tmpvar_12 + ((tmpvar_36.w * 16.0) * tmpvar_14)) * (tmpvar_15 * atten_2))
   * 
    clamp (dot (n_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_17)
   * tmpvar_12)) + (tmpvar_22 * mix (tmpvar_14, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_13)), 0.0, 1.0)
  ), tmpvar_34.yyy)));
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = tmpvar_37;
  c_1.w = tmpvar_38.w;
  c_1.xyz = tmpvar_37;
  c_1.xyz = c_1.xyz;
  mediump vec4 xlat_varoutput_39;
  xlat_varoutput_39.xyz = c_1.xyz;
  xlat_varoutput_39.w = 1.0;
  gl_FragData[0] = xlat_varoutput_39;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec4 t4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp float t21;
void main()
{
    //Instruction 5094
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 5095
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 5096
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 5097
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 5098
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 5099
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 5100
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 5101
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 5102
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 5103
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 5104
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 5105
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 5106
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 5107
    //DP3
    t16_2 = dot(t1.xyz, t1.xyz);
    //Instruction 5108
    //RSQ
    t16_2 = inversesqrt(t16_2);
    //Instruction 5109
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * vec3(t16_2);
    //Instruction 5110
    //MUL
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 5111
    //MAD
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    //Instruction 5112
    //MAD
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    //Instruction 5113
    //DP3
    t21 = dot(t1.xyz, t1.xyz);
    //Instruction 5114
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 5115
    //MUL
    t1.xyz = vec3(t21) * t1.xyz;
    //Instruction 5116
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 5117
    //MOV
    vs_TEXCOORD2.w = 0.0;
    //Instruction 5118
    //MUL
    t3.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 5119
    //MUL
    t3.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 5120
    //MUL
    t3.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 5121
    //MUL
    t4.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 5122
    //MUL
    t4.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 5123
    //MUL
    t4.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 5124
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 5125
    //MUL
    t4.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 5126
    //MUL
    t4.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 5127
    //MUL
    t4.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 5128
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 5129
    //DP3
    t21 = dot(t3.xyz, t3.xyz);
    //Instruction 5130
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 5131
    //MUL
    t2.xyz = vec3(t21) * t3.xyz;
    //Instruction 5132
    //MUL
    t16_5.xyz = t1.yzx * t2.zxy;
    //Instruction 5133
    //MAD
    t16_5.xyz = t2.yzx * t1.zxy + (-t16_5.xyz);
    //Instruction 5134
    //MUL
    vs_TEXCOORD3.xyz = t16_5.xyz * in_TANGENT0.www;
    //Instruction 5135
    //MOV
    vs_TEXCOORD3.w = 0.0;
    //Instruction 5136
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 5137
    //MOV
    vs_TEXCOORD4.xyz = t2.xyz;
    //Instruction 5138
    //MUL
    t16_5.x = t2.y * t2.y;
    //Instruction 5139
    //MAD
    t16_5.x = t2.x * t2.x + (-t16_5.x);
    //Instruction 5140
    //MUL
    t16_1 = t2.yzzx * t2.xyzz;
    //Instruction 5141
    //DP4
    t16_6.x = dot(unity_SHBr, t16_1);
    //Instruction 5142
    //DP4
    t16_6.y = dot(unity_SHBg, t16_1);
    //Instruction 5143
    //DP4
    t16_6.z = dot(unity_SHBb, t16_1);
    //Instruction 5144
    //MAD
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    //Instruction 5145
    //MOV
    t2.w = 1.0;
    //Instruction 5146
    //DP4
    t16_6.x = dot(unity_SHAr, t2);
    //Instruction 5147
    //DP4
    t16_6.y = dot(unity_SHAg, t2);
    //Instruction 5148
    //DP4
    t16_6.z = dot(unity_SHAb, t2);
    //Instruction 5149
    //ADD
    t16_5.xyz = t16_5.xyz + t16_6.xyz;
    //Instruction 5150
    //ADD
    t1 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 5151
    //MUL
    t3 = t2.yyyy * t1;
    //Instruction 5152
    //MUL
    t1 = t1 * t1;
    //Instruction 5153
    //ADD
    t4 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 5154
    //ADD
    t0 = (-t0.zzzz) + unity_4LightPosZ0;
    //Instruction 5155
    //MAD
    t3 = t4 * t2.xxxx + t3;
    //Instruction 5156
    //MAD
    t2 = t0 * t2.zzzz + t3;
    //Instruction 5157
    //MAD
    t1 = t4 * t4 + t1;
    //Instruction 5158
    //MAD
    t0 = t0 * t0 + t1;
    //Instruction 5159
    //RSQ
    t1 = inversesqrt(t0);
    //Instruction 5160
    //MAD
    t0 = t0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 5161
    //DIV
    t0 = vec4(1.0, 1.0, 1.0, 1.0) / t0;
    //Instruction 5162
    //MUL
    t1 = t1 * t2;
    //Instruction 5163
    //MAX
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 5164
    //MUL
    t0 = t0 * t1;
    //Instruction 5165
    //MUL
    t3.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 5166
    //MAD
    t3.xyz = unity_LightColor[0].xyz * t0.xxx + t3.xyz;
    //Instruction 5167
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t3.xyz;
    //Instruction 5168
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 5169
    //ADD
    t0.xyz = t0.xyz + t16_5.xyz;
    //Instruction 5170
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 5171
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 5172
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 5173
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 5174
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 5175
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 5176
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 5177
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 5178
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 5179
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 5180
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 5181
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec4 t16_1;
lowp vec4 t10_1;
mediump vec4 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
lowp float t10_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump float t16_8;
mediump vec3 t16_13;
lowp vec3 t10_13;
mediump float t16_24;
mediump float t16_26;
void main()
{
    //Instruction 5046
    //SAMPLE_C_LZ
    vec3 txVec20 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec20, 0.0);
    //Instruction 5047
    //ADD
    t16_8 = (-_LightShadowData.x) + 1.0;
    //Instruction 5048
    //MAD
    t16_0.x = t16_0.x * t16_8 + _LightShadowData.x;
    //Instruction 5049
    //MUL
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 5050
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 5051
    //MAD
    t16_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 5052
    //MUL
    t16_3.xyz = t16_2.yyy * vs_TEXCOORD3.xyz;
    //Instruction 5053
    //MAD
    t16_2.xyw = t16_2.xxx * vs_TEXCOORD2.xyz + t16_3.xyz;
    //Instruction 5054
    //MAD
    t16_2.xyz = t16_2.zzz * vs_TEXCOORD4.xyz + t16_2.xyw;
    //Instruction 5055
    //DP3
    t16_24 = dot((-vs_TEXCOORD1.xyz), t16_2.xyz);
    //Instruction 5056
    //ADD
    t16_26 = t16_24 + t16_24;
    //Instruction 5057
    //MOV
    t16_24 = t16_24;
    t16_24 = clamp(t16_24, 0.0, 1.0);
    //Instruction 5058
    //ADD
    t16_3.y = (-t16_24) + 1.0;
    //Instruction 5059
    //MAD
    t16_4.xyz = t16_2.xyz * (-vec3(t16_26)) + (-vs_TEXCOORD1.xyz);
    //Instruction 5060
    //DP3
    t16_3.x = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 5061
    //MUL
    t16_3.xy = t16_3.xy * t16_3.xy;
    //Instruction 5062
    //MUL
    t16_1.yz = t16_3.xy * t16_3.xy;
    //Instruction 5063
    //ADD
    t16_1.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    //Instruction 5064
    //SAMPLE
    t10_5 = texture(unity_NHxRoughness, t16_1.yw).w;
    //Instruction 5065
    //MUL
    t16_24 = t16_1.x * 7.000000;
    //Instruction 5066
    //MUL
    t16_5 = t10_5 * 16.000000;
    //Instruction 5067
    //SAMPLE
    t10_13.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 5068
    //MUL
    t16_6.xyz = t10_13.xyz * _Color.xyz;
    //Instruction 5069
    //MAD
    t16_3.xyz = _Color.xyz * t10_13.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 5070
    //MAD
    t16_3.xyz = vec3(_Metallic) * t16_3.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 5071
    //MAD
    t16_26 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 5072
    //MUL
    t16_4.xyz = vec3(t16_26) * t16_6.xyz;
    //Instruction 5073
    //ADD
    t16_26 = (-t16_26) + _Glossiness;
    //Instruction 5074
    //ADD
    t16_26 = t16_26 + 1.0;
    t16_26 = clamp(t16_26, 0.0, 1.0);
    //Instruction 5075
    //ADD
    t16_7.xyz = (-t16_3.xyz) + vec3(t16_26);
    //Instruction 5076
    //MAD
    t16_7.xyz = t16_1.zzz * t16_7.xyz + t16_3.xyz;
    //Instruction 5077
    //MAD
    t16_3.xyz = vec3(t16_5) * t16_3.xyz + t16_4.xyz;
    //Instruction 5078
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 5079
    //SAMPLE
    t10_5 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 5080
    //MUL
    t16_3.xyz = vec3(t10_5) * vs_TEXCOORD5.xyz;
    //Instruction 5081
    //MUL
    t16_3.xyz = t16_4.xyz * t16_3.xyz;
    //Instruction 5082
    //DP3
    t16_26 = dot(t16_2.xyz, _WorldSpaceLightPos0.xyz);
    t16_26 = clamp(t16_26, 0.0, 1.0);
    //Instruction 5083
    //MAD
    t16_0.xyz = t16_0.xyz * vec3(t16_26) + t16_3.xyz;
    //Instruction 5084
    //DP3
    t16_13.x = dot(vs_TEXCOORD1.xyz, t16_2.xyz);
    //Instruction 5085
    //ADD
    t16_13.x = t16_13.x + t16_13.x;
    //Instruction 5086
    //MAD
    t16_13.xyz = t16_2.xyz * (-t16_13.xxx) + vs_TEXCOORD1.xyz;
    //Instruction 5087
    //SAMPLE_L
    t10_1 = textureLod(unity_SpecCube0, t16_13.xyz, t16_24);
    //Instruction 5088
    //MUL
    t16_24 = t10_1.w * unity_SpecCube0_HDR.x;
    //Instruction 5089
    //MUL
    t16_2.xyz = t10_1.xyz * vec3(t16_24);
    //Instruction 5090
    //MUL
    t16_2.xyz = vec3(t10_5) * t16_2.xyz;
    //Instruction 5091
    //MAD
    SV_Target0.xyz = t16_2.xyz * t16_7.xyz + t16_0.xyz;
    //Instruction 5092
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 5093
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_NORMALMAP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp mat3 tangentToWorld_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex);
  tmpvar_6 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_14;
  n_14 = (tmpvar_11.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  highp vec3 dir_20;
  dir_20 = tmpvar_4.xyz;
  highp mat3 tmpvar_21;
  tmpvar_21[0] = _Object2World[0].xyz;
  tmpvar_21[1] = _Object2World[1].xyz;
  tmpvar_21[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = normalize((tmpvar_21 * dir_20));
  tmpvar_22.w = tmpvar_4.w;
  highp vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22.www;
  mediump vec3 normal_24;
  normal_24 = tmpvar_19;
  mediump vec3 tangent_25;
  tangent_25 = tmpvar_22.xyz;
  mediump vec3 flip_26;
  flip_26 = tmpvar_23;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (((normal_24.yzx * tangent_25.zxy) - (normal_24.zxy * tangent_25.yzx)) * flip_26);
  mediump mat3 tmpvar_28;
  tmpvar_28[0].x = tangent_25.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = normal_24.x;
  tmpvar_28[1].x = tangent_25.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = normal_24.y;
  tmpvar_28[2].x = tangent_25.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = normal_24.z;
  tangentToWorld_5 = tmpvar_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_5[0].x;
  v_29.y = tangentToWorld_5[1].x;
  v_29.z = tangentToWorld_5[2].x;
  tmpvar_7.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_5[0].y;
  v_30.y = tangentToWorld_5[1].y;
  v_30.z = tangentToWorld_5[2].y;
  tmpvar_8.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_5[0].z;
  v_31.y = tangentToWorld_5[1].z;
  v_31.z = tangentToWorld_5[2].z;
  tmpvar_9.xyz = v_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = tmpvar_19;
  mediump vec4 normal_33;
  normal_33 = tmpvar_32;
  mediump vec3 x2_34;
  mediump vec3 x1_35;
  x1_35.x = dot (unity_SHAr, normal_33);
  x1_35.y = dot (unity_SHAg, normal_33);
  x1_35.z = dot (unity_SHAb, normal_33);
  mediump vec4 tmpvar_36;
  tmpvar_36 = (normal_33.xyzz * normal_33.yzzx);
  x2_34.x = dot (unity_SHBr, tmpvar_36);
  x2_34.y = dot (unity_SHBg, tmpvar_36);
  x2_34.z = dot (unity_SHBb, tmpvar_36);
  tmpvar_10.xyz = ((x2_34 + (unity_SHC.xyz * 
    ((normal_33.x * normal_33.x) - (normal_33.y * normal_33.y))
  )) + x1_35);
  highp float tmpvar_37;
  tmpvar_37 = (unity_FogParams.x * tmpvar_6.z);
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = normalize(n_14);
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD2_1 = tmpvar_8;
  xlv_TEXCOORD2_2 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD7 = exp2((-(tmpvar_37) * tmpvar_37));
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD2.xyz;
  tmpvar_3 = xlv_TEXCOORD2_1.xyz;
  tmpvar_4 = xlv_TEXCOORD2_2.xyz;
  mediump mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_2.x;
  tmpvar_5[0].y = tmpvar_3.x;
  tmpvar_5[0].z = tmpvar_4.x;
  tmpvar_5[1].x = tmpvar_2.y;
  tmpvar_5[1].y = tmpvar_3.y;
  tmpvar_5[1].z = tmpvar_4.y;
  tmpvar_5[2].x = tmpvar_2.z;
  tmpvar_5[2].y = tmpvar_3.z;
  tmpvar_5[2].z = tmpvar_4.z;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_BumpMap, xlv_TEXCOORD0.xy);
  mediump vec4 packednormal_8;
  packednormal_8 = tmpvar_7;
  mediump vec3 n_9;
  n_9 = (((packednormal_8.xyz * 2.0) - 1.0) * tmpvar_5);
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * tmpvar_6.xyz);
  mediump vec3 tmpvar_11;
  mediump float oneMinusReflectivity_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_10, vec3(_Metallic));
  oneMinusReflectivity_12 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_11 = (tmpvar_10 * oneMinusReflectivity_12);
  mediump vec3 tmpvar_14;
  tmpvar_14 = _LightColor0.xyz;
  mediump float tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_15 = tmpvar_16.y;
  highp vec3 tmpvar_17;
  highp vec4 tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = -(xlv_TEXCOORD1);
  tmpvar_17 = tmpvar_19;
  tmpvar_18 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_20;
  mediump vec3 worldNormal_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = -(tmpvar_17);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (n_9, I_23)
   * n_9)));
  worldNormal_21 = tmpvar_22;
  mediump vec4 hdr_24;
  hdr_24 = tmpvar_18;
  highp float mip_25;
  mediump float tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = (1.0 - _Glossiness);
  tmpvar_26 = (tmpvar_27 * 7.0);
  mip_25 = tmpvar_26;
  highp vec4 tmpvar_28;
  tmpvar_28.xyz = worldNormal_21;
  tmpvar_28.w = mip_25;
  lowp vec4 tmpvar_29;
  tmpvar_29 = textureCube (unity_SpecCube0, tmpvar_28.xyz, mip_25);
  mediump vec4 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  tmpvar_20 = ((tmpvar_30.w * hdr_24.x) * tmpvar_30.xyz);
  tmpvar_20 = (tmpvar_20 * tmpvar_15);
  mediump vec2 tmpvar_31;
  tmpvar_31.x = dot ((tmpvar_19 - (2.0 * 
    (dot (n_9, tmpvar_19) * n_9)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_31.y = (1.0 - clamp (dot (n_9, tmpvar_19), 0.0, 1.0));
  mediump vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31 * tmpvar_31) * (tmpvar_31 * tmpvar_31));
  mediump vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = tmpvar_27;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (unity_NHxRoughness, tmpvar_33);
  mediump vec3 tmpvar_35;
  tmpvar_35 = (((
    ((tmpvar_11 + ((tmpvar_34.w * 16.0) * tmpvar_13)) * tmpvar_14)
   * 
    clamp (dot (n_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_15)
   * tmpvar_11)) + (tmpvar_20 * mix (tmpvar_13, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_12)), 0.0, 1.0)
  ), tmpvar_32.yyy)));
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = tmpvar_35;
  c_1.w = tmpvar_36.w;
  c_1.xyz = tmpvar_35;
  c_1.xyz = c_1.xyz;
  highp float tmpvar_37;
  tmpvar_37 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_37));
  mediump vec4 xlat_varoutput_38;
  xlat_varoutput_38.xyz = c_1.xyz;
  xlat_varoutput_38.w = 1.0;
  gl_FragData[0] = xlat_varoutput_38;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump float t16_1;
highp vec3 t2;
highp vec3 t3;
mediump vec3 t16_4;
mediump vec3 t16_5;
highp float t18;
void main()
{
    //Instruction 5230
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 5231
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 5232
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 5233
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 5234
    //MOV
    gl_Position = t0;
    //Instruction 5235
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 5236
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 5237
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 5238
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 5239
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 5240
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 5241
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 5242
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 5243
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 5244
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 5245
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 5246
    //ADD
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 5247
    //DP3
    t16_1 = dot(t0.xyz, t0.xyz);
    //Instruction 5248
    //RSQ
    t16_1 = inversesqrt(t16_1);
    //Instruction 5249
    //MUL
    vs_TEXCOORD1.xyz = t0.xyz * vec3(t16_1);
    //Instruction 5250
    //MUL
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 5251
    //MAD
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    //Instruction 5252
    //MAD
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    //Instruction 5253
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 5254
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 5255
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 5256
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 5257
    //MOV
    vs_TEXCOORD2.w = 0.0;
    //Instruction 5258
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 5259
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 5260
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 5261
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 5262
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 5263
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 5264
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 5265
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 5266
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 5267
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 5268
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 5269
    //DP3
    t18 = dot(t2.xyz, t2.xyz);
    //Instruction 5270
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 5271
    //MUL
    t1.xyz = vec3(t18) * t2.xyz;
    //Instruction 5272
    //MUL
    t16_4.xyz = t0.yzx * t1.zxy;
    //Instruction 5273
    //MAD
    t16_4.xyz = t1.yzx * t0.zxy + (-t16_4.xyz);
    //Instruction 5274
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 5275
    //MOV
    vs_TEXCOORD3.w = 0.0;
    //Instruction 5276
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 5277
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 5278
    //MUL
    t16_4.x = t1.y * t1.y;
    //Instruction 5279
    //MAD
    t16_4.x = t1.x * t1.x + (-t16_4.x);
    //Instruction 5280
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 5281
    //DP4
    t16_5.x = dot(unity_SHBr, t16_0);
    //Instruction 5282
    //DP4
    t16_5.y = dot(unity_SHBg, t16_0);
    //Instruction 5283
    //DP4
    t16_5.z = dot(unity_SHBb, t16_0);
    //Instruction 5284
    //MAD
    t16_4.xyz = unity_SHC.xyz * t16_4.xxx + t16_5.xyz;
    //Instruction 5285
    //MOV
    t1.w = 1.0;
    //Instruction 5286
    //DP4
    t16_5.x = dot(unity_SHAr, t1);
    //Instruction 5287
    //DP4
    t16_5.y = dot(unity_SHAg, t1);
    //Instruction 5288
    //DP4
    t16_5.z = dot(unity_SHAb, t1);
    //Instruction 5289
    //ADD
    vs_TEXCOORD5.xyz = t16_4.xyz + t16_5.xyz;
    //Instruction 5290
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 5291
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp vec3 t4;
mediump vec3 t16_4;
lowp float t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump vec3 t16_12;
lowp vec3 t10_12;
mediump float t16_25;
mediump float t16_26;
highp float t28;
void main()
{
    //Instruction 5182
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 5183
    //MAD
    t16_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 5184
    //MUL
    t16_2.xyz = t16_1.yyy * vs_TEXCOORD3.xyz;
    //Instruction 5185
    //MAD
    t16_1.xyw = t16_1.xxx * vs_TEXCOORD2.xyz + t16_2.xyz;
    //Instruction 5186
    //MAD
    t16_1.xyz = t16_1.zzz * vs_TEXCOORD4.xyz + t16_1.xyw;
    //Instruction 5187
    //DP3
    t16_25 = dot((-vs_TEXCOORD1.xyz), t16_1.xyz);
    //Instruction 5188
    //ADD
    t16_2.x = t16_25 + t16_25;
    //Instruction 5189
    //MOV
    t16_25 = t16_25;
    t16_25 = clamp(t16_25, 0.0, 1.0);
    //Instruction 5190
    //ADD
    t16_3.y = (-t16_25) + 1.0;
    //Instruction 5191
    //MAD
    t16_2.xyz = t16_1.xyz * (-t16_2.xxx) + (-vs_TEXCOORD1.xyz);
    //Instruction 5192
    //DP3
    t16_3.x = dot(t16_2.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 5193
    //MUL
    t16_2.xy = t16_3.xy * t16_3.xy;
    //Instruction 5194
    //MUL
    t16_0.yz = t16_2.xy * t16_2.xy;
    //Instruction 5195
    //ADD
    t16_0.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    //Instruction 5196
    //SAMPLE
    t10_4 = texture(unity_NHxRoughness, t16_0.yw).w;
    //Instruction 5197
    //MUL
    t16_25 = t16_0.x * 7.000000;
    //Instruction 5198
    //MUL
    t16_4.x = t10_4 * 16.000000;
    //Instruction 5199
    //SAMPLE
    t10_12.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 5200
    //MUL
    t16_5.xyz = t10_12.xyz * _Color.xyz;
    //Instruction 5201
    //MAD
    t16_2.xyz = _Color.xyz * t10_12.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 5202
    //MAD
    t16_2.xyz = vec3(_Metallic) * t16_2.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 5203
    //MAD
    t16_26 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 5204
    //MUL
    t16_3.xyz = vec3(t16_26) * t16_5.xyz;
    //Instruction 5205
    //ADD
    t16_26 = (-t16_26) + _Glossiness;
    //Instruction 5206
    //ADD
    t16_26 = t16_26 + 1.0;
    t16_26 = clamp(t16_26, 0.0, 1.0);
    //Instruction 5207
    //ADD
    t16_6.xyz = (-t16_2.xyz) + vec3(t16_26);
    //Instruction 5208
    //MAD
    t16_6.xyz = t16_0.zzz * t16_6.xyz + t16_2.xyz;
    //Instruction 5209
    //MAD
    t16_2.xyz = t16_4.xxx * t16_2.xyz + t16_3.xyz;
    //Instruction 5210
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 5211
    //SAMPLE
    t10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 5212
    //MUL
    t16_7.xyz = vec3(t10_4) * vs_TEXCOORD5.xyz;
    //Instruction 5213
    //MUL
    t16_3.xyz = t16_3.xyz * t16_7.xyz;
    //Instruction 5214
    //DP3
    t16_26 = dot(t16_1.xyz, _WorldSpaceLightPos0.xyz);
    t16_26 = clamp(t16_26, 0.0, 1.0);
    //Instruction 5215
    //MAD
    t16_2.xyz = t16_2.xyz * vec3(t16_26) + t16_3.xyz;
    //Instruction 5216
    //DP3
    t16_12.x = dot(vs_TEXCOORD1.xyz, t16_1.xyz);
    //Instruction 5217
    //ADD
    t16_12.x = t16_12.x + t16_12.x;
    //Instruction 5218
    //MAD
    t16_12.xyz = t16_1.xyz * (-t16_12.xxx) + vs_TEXCOORD1.xyz;
    //Instruction 5219
    //SAMPLE_L
    t10_0 = textureLod(unity_SpecCube0, t16_12.xyz, t16_25);
    //Instruction 5220
    //MUL
    t16_1.x = t10_0.w * unity_SpecCube0_HDR.x;
    //Instruction 5221
    //MUL
    t16_1.xyz = t10_0.xyz * t16_1.xxx;
    //Instruction 5222
    //MUL
    t16_1.xyz = vec3(t10_4) * t16_1.xyz;
    //Instruction 5223
    //MAD
    t16_1.xyz = t16_1.xyz * t16_6.xyz + t16_2.xyz;
    //Instruction 5224
    //ADD
    t16_4.xyz = t16_1.xyz + (-unity_FogColor.xyz);
    //Instruction 5225
    //MOV
    t28 = vs_TEXCOORD7;
    t28 = clamp(t28, 0.0, 1.0);
    //Instruction 5226
    //MAD
    t4.xyz = vec3(t28) * t16_4.xyz + unity_FogColor.xyz;
    //Instruction 5227
    //MOV
    SV_Target0.xyz = t4.xyz;
    //Instruction 5228
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 5229
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_NORMALMAP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp mat3 tangentToWorld_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  tmpvar_6 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_15;
  n_15 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp vec4 v_17;
  v_17.x = _World2Object[0].x;
  v_17.y = _World2Object[1].x;
  v_17.z = _World2Object[2].x;
  v_17.w = _World2Object[3].x;
  highp vec4 v_18;
  v_18.x = _World2Object[0].y;
  v_18.y = _World2Object[1].y;
  v_18.z = _World2Object[2].y;
  v_18.w = _World2Object[3].y;
  highp vec4 v_19;
  v_19.x = _World2Object[0].z;
  v_19.y = _World2Object[1].z;
  v_19.z = _World2Object[2].z;
  v_19.w = _World2Object[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(((
    (v_17.xyz * norm_16.x)
   + 
    (v_18.xyz * norm_16.y)
  ) + (v_19.xyz * norm_16.z)));
  highp vec3 dir_21;
  dir_21 = tmpvar_4.xyz;
  highp mat3 tmpvar_22;
  tmpvar_22[0] = _Object2World[0].xyz;
  tmpvar_22[1] = _Object2World[1].xyz;
  tmpvar_22[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_23;
  tmpvar_23.xyz = normalize((tmpvar_22 * dir_21));
  tmpvar_23.w = tmpvar_4.w;
  highp vec3 tmpvar_24;
  tmpvar_24 = tmpvar_23.www;
  mediump vec3 normal_25;
  normal_25 = tmpvar_20;
  mediump vec3 tangent_26;
  tangent_26 = tmpvar_23.xyz;
  mediump vec3 flip_27;
  flip_27 = tmpvar_24;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (((normal_25.yzx * tangent_26.zxy) - (normal_25.zxy * tangent_26.yzx)) * flip_27);
  mediump mat3 tmpvar_29;
  tmpvar_29[0].x = tangent_26.x;
  tmpvar_29[0].y = tmpvar_28.x;
  tmpvar_29[0].z = normal_25.x;
  tmpvar_29[1].x = tangent_26.y;
  tmpvar_29[1].y = tmpvar_28.y;
  tmpvar_29[1].z = normal_25.y;
  tmpvar_29[2].x = tangent_26.z;
  tmpvar_29[2].y = tmpvar_28.z;
  tmpvar_29[2].z = normal_25.z;
  tangentToWorld_5 = tmpvar_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_5[0].x;
  v_30.y = tangentToWorld_5[1].x;
  v_30.z = tangentToWorld_5[2].x;
  tmpvar_7.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_5[0].y;
  v_31.y = tangentToWorld_5[1].y;
  v_31.z = tangentToWorld_5[2].y;
  tmpvar_8.xyz = v_31;
  highp vec3 v_32;
  v_32.x = tangentToWorld_5[0].z;
  v_32.y = tangentToWorld_5[1].z;
  v_32.z = tangentToWorld_5[2].z;
  tmpvar_9.xyz = v_32;
  tmpvar_11 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = tmpvar_20;
  mediump vec4 normal_34;
  normal_34 = tmpvar_33;
  mediump vec3 x2_35;
  mediump vec3 x1_36;
  x1_36.x = dot (unity_SHAr, normal_34);
  x1_36.y = dot (unity_SHAg, normal_34);
  x1_36.z = dot (unity_SHAb, normal_34);
  mediump vec4 tmpvar_37;
  tmpvar_37 = (normal_34.xyzz * normal_34.yzzx);
  x2_35.x = dot (unity_SHBr, tmpvar_37);
  x2_35.y = dot (unity_SHBg, tmpvar_37);
  x2_35.z = dot (unity_SHBb, tmpvar_37);
  tmpvar_10.xyz = ((x2_35 + (unity_SHC.xyz * 
    ((normal_34.x * normal_34.x) - (normal_34.y * normal_34.y))
  )) + x1_36);
  highp float tmpvar_38;
  tmpvar_38 = (unity_FogParams.x * tmpvar_6.z);
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = normalize(n_15);
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD2_1 = tmpvar_8;
  xlv_TEXCOORD2_2 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_11;
  xlv_TEXCOORD7 = exp2((-(tmpvar_38) * tmpvar_38));
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  mediump float atten_2;
  mediump vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_3 = xlv_TEXCOORD2.xyz;
  tmpvar_4 = xlv_TEXCOORD2_1.xyz;
  tmpvar_5 = xlv_TEXCOORD2_2.xyz;
  mediump mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_3.x;
  tmpvar_6[0].y = tmpvar_4.x;
  tmpvar_6[0].z = tmpvar_5.x;
  tmpvar_6[1].x = tmpvar_3.y;
  tmpvar_6[1].y = tmpvar_4.y;
  tmpvar_6[1].z = tmpvar_5.y;
  tmpvar_6[2].x = tmpvar_3.z;
  tmpvar_6[2].y = tmpvar_4.z;
  tmpvar_6[2].z = tmpvar_5.z;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_BumpMap, xlv_TEXCOORD0.xy);
  mediump vec4 packednormal_9;
  packednormal_9 = tmpvar_8;
  mediump vec3 n_10;
  n_10 = (((packednormal_9.xyz * 2.0) - 1.0) * tmpvar_6);
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * tmpvar_7.xyz);
  mediump vec3 tmpvar_12;
  mediump float oneMinusReflectivity_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_11, vec3(_Metallic));
  oneMinusReflectivity_13 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_12 = (tmpvar_11 * oneMinusReflectivity_13);
  mediump vec3 tmpvar_15;
  tmpvar_15 = _LightColor0.xyz;
  lowp float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_16 = tmpvar_17;
  atten_2 = tmpvar_16;
  mediump float tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_18 = tmpvar_19.y;
  highp vec3 tmpvar_20;
  highp vec4 tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = -(xlv_TEXCOORD1);
  tmpvar_20 = tmpvar_22;
  tmpvar_21 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_23;
  mediump vec3 worldNormal_24;
  highp vec3 tmpvar_25;
  highp vec3 I_26;
  I_26 = -(tmpvar_20);
  tmpvar_25 = (I_26 - (2.0 * (
    dot (n_10, I_26)
   * n_10)));
  worldNormal_24 = tmpvar_25;
  mediump vec4 hdr_27;
  hdr_27 = tmpvar_21;
  highp float mip_28;
  mediump float tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = (1.0 - _Glossiness);
  tmpvar_29 = (tmpvar_30 * 7.0);
  mip_28 = tmpvar_29;
  highp vec4 tmpvar_31;
  tmpvar_31.xyz = worldNormal_24;
  tmpvar_31.w = mip_28;
  lowp vec4 tmpvar_32;
  tmpvar_32 = textureCube (unity_SpecCube0, tmpvar_31.xyz, mip_28);
  mediump vec4 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  tmpvar_23 = ((tmpvar_33.w * hdr_27.x) * tmpvar_33.xyz);
  tmpvar_23 = (tmpvar_23 * tmpvar_18);
  mediump vec2 tmpvar_34;
  tmpvar_34.x = dot ((tmpvar_22 - (2.0 * 
    (dot (n_10, tmpvar_22) * n_10)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_34.y = (1.0 - clamp (dot (n_10, tmpvar_22), 0.0, 1.0));
  mediump vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34 * tmpvar_34) * (tmpvar_34 * tmpvar_34));
  mediump vec2 tmpvar_36;
  tmpvar_36.x = tmpvar_35.x;
  tmpvar_36.y = tmpvar_30;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (unity_NHxRoughness, tmpvar_36);
  mediump vec3 tmpvar_38;
  tmpvar_38 = (((
    ((tmpvar_12 + ((tmpvar_37.w * 16.0) * tmpvar_14)) * (tmpvar_15 * atten_2))
   * 
    clamp (dot (n_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_18)
   * tmpvar_12)) + (tmpvar_23 * mix (tmpvar_14, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_13)), 0.0, 1.0)
  ), tmpvar_35.yyy)));
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = tmpvar_38;
  c_1.w = tmpvar_39.w;
  c_1.xyz = tmpvar_38;
  c_1.xyz = c_1.xyz;
  highp float tmpvar_40;
  tmpvar_40 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_40));
  mediump vec4 xlat_varoutput_41;
  xlat_varoutput_41.xyz = c_1.xyz;
  xlat_varoutput_41.w = 1.0;
  gl_FragData[0] = xlat_varoutput_41;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" "_NORMALMAP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp mat3 tangentToWorld_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex);
  tmpvar_6 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_14;
  n_14 = (tmpvar_11.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  highp vec3 dir_20;
  dir_20 = tmpvar_4.xyz;
  highp mat3 tmpvar_21;
  tmpvar_21[0] = _Object2World[0].xyz;
  tmpvar_21[1] = _Object2World[1].xyz;
  tmpvar_21[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = normalize((tmpvar_21 * dir_20));
  tmpvar_22.w = tmpvar_4.w;
  highp vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22.www;
  mediump vec3 normal_24;
  normal_24 = tmpvar_19;
  mediump vec3 tangent_25;
  tangent_25 = tmpvar_22.xyz;
  mediump vec3 flip_26;
  flip_26 = tmpvar_23;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (((normal_24.yzx * tangent_25.zxy) - (normal_24.zxy * tangent_25.yzx)) * flip_26);
  mediump mat3 tmpvar_28;
  tmpvar_28[0].x = tangent_25.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = normal_24.x;
  tmpvar_28[1].x = tangent_25.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = normal_24.y;
  tmpvar_28[2].x = tangent_25.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = normal_24.z;
  tangentToWorld_5 = tmpvar_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_5[0].x;
  v_29.y = tangentToWorld_5[1].x;
  v_29.z = tangentToWorld_5[2].x;
  tmpvar_7.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_5[0].y;
  v_30.y = tangentToWorld_5[1].y;
  v_30.z = tangentToWorld_5[2].y;
  tmpvar_8.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_5[0].z;
  v_31.y = tangentToWorld_5[1].z;
  v_31.z = tangentToWorld_5[2].z;
  tmpvar_9.xyz = v_31;
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = tmpvar_19;
  mediump vec4 normal_33;
  normal_33 = tmpvar_32;
  mediump vec3 x2_34;
  mediump vec3 x1_35;
  x1_35.x = dot (unity_SHAr, normal_33);
  x1_35.y = dot (unity_SHAg, normal_33);
  x1_35.z = dot (unity_SHAb, normal_33);
  mediump vec4 tmpvar_36;
  tmpvar_36 = (normal_33.xyzz * normal_33.yzzx);
  x2_34.x = dot (unity_SHBr, tmpvar_36);
  x2_34.y = dot (unity_SHBg, tmpvar_36);
  x2_34.z = dot (unity_SHBb, tmpvar_36);
  tmpvar_10.xyz = ((x2_34 + (unity_SHC.xyz * 
    ((normal_33.x * normal_33.x) - (normal_33.y * normal_33.y))
  )) + x1_35);
  highp vec3 lightColor0_37;
  lightColor0_37 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_38;
  lightColor1_38 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_39;
  lightColor2_39 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_40;
  lightColor3_40 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_41;
  lightAttenSq_41 = unity_4LightAtten0;
  highp vec3 col_42;
  highp vec4 ndotl_43;
  highp vec4 lengthSq_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (unity_4LightPosX0 - tmpvar_11.x);
  highp vec4 tmpvar_46;
  tmpvar_46 = (unity_4LightPosY0 - tmpvar_11.y);
  highp vec4 tmpvar_47;
  tmpvar_47 = (unity_4LightPosZ0 - tmpvar_11.z);
  lengthSq_44 = (tmpvar_45 * tmpvar_45);
  lengthSq_44 = (lengthSq_44 + (tmpvar_46 * tmpvar_46));
  lengthSq_44 = (lengthSq_44 + (tmpvar_47 * tmpvar_47));
  ndotl_43 = (tmpvar_45 * tmpvar_19.x);
  ndotl_43 = (ndotl_43 + (tmpvar_46 * tmpvar_19.y));
  ndotl_43 = (ndotl_43 + (tmpvar_47 * tmpvar_19.z));
  highp vec4 tmpvar_48;
  tmpvar_48 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_43 * inversesqrt(lengthSq_44)));
  ndotl_43 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_48 * (1.0/((1.0 + 
    (lengthSq_44 * lightAttenSq_41)
  ))));
  col_42 = (lightColor0_37 * tmpvar_49.x);
  col_42 = (col_42 + (lightColor1_38 * tmpvar_49.y));
  col_42 = (col_42 + (lightColor2_39 * tmpvar_49.z));
  col_42 = (col_42 + (lightColor3_40 * tmpvar_49.w));
  tmpvar_10.xyz = (tmpvar_10.xyz + col_42);
  highp float tmpvar_50;
  tmpvar_50 = (unity_FogParams.x * tmpvar_6.z);
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = normalize(n_14);
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD2_1 = tmpvar_8;
  xlv_TEXCOORD2_2 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD7 = exp2((-(tmpvar_50) * tmpvar_50));
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD2.xyz;
  tmpvar_3 = xlv_TEXCOORD2_1.xyz;
  tmpvar_4 = xlv_TEXCOORD2_2.xyz;
  mediump mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_2.x;
  tmpvar_5[0].y = tmpvar_3.x;
  tmpvar_5[0].z = tmpvar_4.x;
  tmpvar_5[1].x = tmpvar_2.y;
  tmpvar_5[1].y = tmpvar_3.y;
  tmpvar_5[1].z = tmpvar_4.y;
  tmpvar_5[2].x = tmpvar_2.z;
  tmpvar_5[2].y = tmpvar_3.z;
  tmpvar_5[2].z = tmpvar_4.z;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_BumpMap, xlv_TEXCOORD0.xy);
  mediump vec4 packednormal_8;
  packednormal_8 = tmpvar_7;
  mediump vec3 n_9;
  n_9 = (((packednormal_8.xyz * 2.0) - 1.0) * tmpvar_5);
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * tmpvar_6.xyz);
  mediump vec3 tmpvar_11;
  mediump float oneMinusReflectivity_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_10, vec3(_Metallic));
  oneMinusReflectivity_12 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_11 = (tmpvar_10 * oneMinusReflectivity_12);
  mediump vec3 tmpvar_14;
  tmpvar_14 = _LightColor0.xyz;
  mediump float tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_15 = tmpvar_16.y;
  highp vec3 tmpvar_17;
  highp vec4 tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = -(xlv_TEXCOORD1);
  tmpvar_17 = tmpvar_19;
  tmpvar_18 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_20;
  mediump vec3 worldNormal_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = -(tmpvar_17);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (n_9, I_23)
   * n_9)));
  worldNormal_21 = tmpvar_22;
  mediump vec4 hdr_24;
  hdr_24 = tmpvar_18;
  highp float mip_25;
  mediump float tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = (1.0 - _Glossiness);
  tmpvar_26 = (tmpvar_27 * 7.0);
  mip_25 = tmpvar_26;
  highp vec4 tmpvar_28;
  tmpvar_28.xyz = worldNormal_21;
  tmpvar_28.w = mip_25;
  lowp vec4 tmpvar_29;
  tmpvar_29 = textureCube (unity_SpecCube0, tmpvar_28.xyz, mip_25);
  mediump vec4 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  tmpvar_20 = ((tmpvar_30.w * hdr_24.x) * tmpvar_30.xyz);
  tmpvar_20 = (tmpvar_20 * tmpvar_15);
  mediump vec2 tmpvar_31;
  tmpvar_31.x = dot ((tmpvar_19 - (2.0 * 
    (dot (n_9, tmpvar_19) * n_9)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_31.y = (1.0 - clamp (dot (n_9, tmpvar_19), 0.0, 1.0));
  mediump vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31 * tmpvar_31) * (tmpvar_31 * tmpvar_31));
  mediump vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = tmpvar_27;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (unity_NHxRoughness, tmpvar_33);
  mediump vec3 tmpvar_35;
  tmpvar_35 = (((
    ((tmpvar_11 + ((tmpvar_34.w * 16.0) * tmpvar_13)) * tmpvar_14)
   * 
    clamp (dot (n_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_15)
   * tmpvar_11)) + (tmpvar_20 * mix (tmpvar_13, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_12)), 0.0, 1.0)
  ), tmpvar_32.yyy)));
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = tmpvar_35;
  c_1.w = tmpvar_36.w;
  c_1.xyz = tmpvar_35;
  c_1.xyz = c_1.xyz;
  highp float tmpvar_37;
  tmpvar_37 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_37));
  mediump vec4 xlat_varoutput_38;
  xlat_varoutput_38.xyz = c_1.xyz;
  xlat_varoutput_38.w = 1.0;
  gl_FragData[0] = xlat_varoutput_38;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec4 t4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp float t21;
void main()
{
    //Instruction 5340
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 5341
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 5342
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 5343
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 5344
    //MOV
    gl_Position = t0;
    //Instruction 5345
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 5346
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 5347
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 5348
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 5349
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 5350
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 5351
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 5352
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 5353
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 5354
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 5355
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 5356
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 5357
    //DP3
    t16_2 = dot(t1.xyz, t1.xyz);
    //Instruction 5358
    //RSQ
    t16_2 = inversesqrt(t16_2);
    //Instruction 5359
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * vec3(t16_2);
    //Instruction 5360
    //MUL
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 5361
    //MAD
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    //Instruction 5362
    //MAD
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    //Instruction 5363
    //DP3
    t21 = dot(t1.xyz, t1.xyz);
    //Instruction 5364
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 5365
    //MUL
    t1.xyz = vec3(t21) * t1.xyz;
    //Instruction 5366
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 5367
    //MOV
    vs_TEXCOORD2.w = 0.0;
    //Instruction 5368
    //MUL
    t3.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 5369
    //MUL
    t3.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 5370
    //MUL
    t3.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 5371
    //MUL
    t4.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 5372
    //MUL
    t4.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 5373
    //MUL
    t4.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 5374
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 5375
    //MUL
    t4.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 5376
    //MUL
    t4.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 5377
    //MUL
    t4.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 5378
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 5379
    //DP3
    t21 = dot(t3.xyz, t3.xyz);
    //Instruction 5380
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 5381
    //MUL
    t2.xyz = vec3(t21) * t3.xyz;
    //Instruction 5382
    //MUL
    t16_5.xyz = t1.yzx * t2.zxy;
    //Instruction 5383
    //MAD
    t16_5.xyz = t2.yzx * t1.zxy + (-t16_5.xyz);
    //Instruction 5384
    //MUL
    vs_TEXCOORD3.xyz = t16_5.xyz * in_TANGENT0.www;
    //Instruction 5385
    //MOV
    vs_TEXCOORD3.w = 0.0;
    //Instruction 5386
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 5387
    //MOV
    vs_TEXCOORD4.xyz = t2.xyz;
    //Instruction 5388
    //MUL
    t16_5.x = t2.y * t2.y;
    //Instruction 5389
    //MAD
    t16_5.x = t2.x * t2.x + (-t16_5.x);
    //Instruction 5390
    //MUL
    t16_1 = t2.yzzx * t2.xyzz;
    //Instruction 5391
    //DP4
    t16_6.x = dot(unity_SHBr, t16_1);
    //Instruction 5392
    //DP4
    t16_6.y = dot(unity_SHBg, t16_1);
    //Instruction 5393
    //DP4
    t16_6.z = dot(unity_SHBb, t16_1);
    //Instruction 5394
    //MAD
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    //Instruction 5395
    //MOV
    t2.w = 1.0;
    //Instruction 5396
    //DP4
    t16_6.x = dot(unity_SHAr, t2);
    //Instruction 5397
    //DP4
    t16_6.y = dot(unity_SHAg, t2);
    //Instruction 5398
    //DP4
    t16_6.z = dot(unity_SHAb, t2);
    //Instruction 5399
    //ADD
    t16_5.xyz = t16_5.xyz + t16_6.xyz;
    //Instruction 5400
    //ADD
    t1 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 5401
    //MUL
    t3 = t2.yyyy * t1;
    //Instruction 5402
    //MUL
    t1 = t1 * t1;
    //Instruction 5403
    //ADD
    t4 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 5404
    //ADD
    t0 = (-t0.zzzz) + unity_4LightPosZ0;
    //Instruction 5405
    //MAD
    t3 = t4 * t2.xxxx + t3;
    //Instruction 5406
    //MAD
    t2 = t0 * t2.zzzz + t3;
    //Instruction 5407
    //MAD
    t1 = t4 * t4 + t1;
    //Instruction 5408
    //MAD
    t0 = t0 * t0 + t1;
    //Instruction 5409
    //RSQ
    t1 = inversesqrt(t0);
    //Instruction 5410
    //MAD
    t0 = t0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 5411
    //DIV
    t0 = vec4(1.0, 1.0, 1.0, 1.0) / t0;
    //Instruction 5412
    //MUL
    t1 = t1 * t2;
    //Instruction 5413
    //MAX
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 5414
    //MUL
    t0 = t0 * t1;
    //Instruction 5415
    //MUL
    t3.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 5416
    //MAD
    t3.xyz = unity_LightColor[0].xyz * t0.xxx + t3.xyz;
    //Instruction 5417
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t3.xyz;
    //Instruction 5418
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 5419
    //ADD
    t0.xyz = t0.xyz + t16_5.xyz;
    //Instruction 5420
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 5421
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 5422
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp vec3 t4;
mediump vec3 t16_4;
lowp float t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump vec3 t16_12;
lowp vec3 t10_12;
mediump float t16_25;
mediump float t16_26;
highp float t28;
void main()
{
    //Instruction 5292
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 5293
    //MAD
    t16_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 5294
    //MUL
    t16_2.xyz = t16_1.yyy * vs_TEXCOORD3.xyz;
    //Instruction 5295
    //MAD
    t16_1.xyw = t16_1.xxx * vs_TEXCOORD2.xyz + t16_2.xyz;
    //Instruction 5296
    //MAD
    t16_1.xyz = t16_1.zzz * vs_TEXCOORD4.xyz + t16_1.xyw;
    //Instruction 5297
    //DP3
    t16_25 = dot((-vs_TEXCOORD1.xyz), t16_1.xyz);
    //Instruction 5298
    //ADD
    t16_2.x = t16_25 + t16_25;
    //Instruction 5299
    //MOV
    t16_25 = t16_25;
    t16_25 = clamp(t16_25, 0.0, 1.0);
    //Instruction 5300
    //ADD
    t16_3.y = (-t16_25) + 1.0;
    //Instruction 5301
    //MAD
    t16_2.xyz = t16_1.xyz * (-t16_2.xxx) + (-vs_TEXCOORD1.xyz);
    //Instruction 5302
    //DP3
    t16_3.x = dot(t16_2.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 5303
    //MUL
    t16_2.xy = t16_3.xy * t16_3.xy;
    //Instruction 5304
    //MUL
    t16_0.yz = t16_2.xy * t16_2.xy;
    //Instruction 5305
    //ADD
    t16_0.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    //Instruction 5306
    //SAMPLE
    t10_4 = texture(unity_NHxRoughness, t16_0.yw).w;
    //Instruction 5307
    //MUL
    t16_25 = t16_0.x * 7.000000;
    //Instruction 5308
    //MUL
    t16_4.x = t10_4 * 16.000000;
    //Instruction 5309
    //SAMPLE
    t10_12.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 5310
    //MUL
    t16_5.xyz = t10_12.xyz * _Color.xyz;
    //Instruction 5311
    //MAD
    t16_2.xyz = _Color.xyz * t10_12.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 5312
    //MAD
    t16_2.xyz = vec3(_Metallic) * t16_2.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 5313
    //MAD
    t16_26 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 5314
    //MUL
    t16_3.xyz = vec3(t16_26) * t16_5.xyz;
    //Instruction 5315
    //ADD
    t16_26 = (-t16_26) + _Glossiness;
    //Instruction 5316
    //ADD
    t16_26 = t16_26 + 1.0;
    t16_26 = clamp(t16_26, 0.0, 1.0);
    //Instruction 5317
    //ADD
    t16_6.xyz = (-t16_2.xyz) + vec3(t16_26);
    //Instruction 5318
    //MAD
    t16_6.xyz = t16_0.zzz * t16_6.xyz + t16_2.xyz;
    //Instruction 5319
    //MAD
    t16_2.xyz = t16_4.xxx * t16_2.xyz + t16_3.xyz;
    //Instruction 5320
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 5321
    //SAMPLE
    t10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 5322
    //MUL
    t16_7.xyz = vec3(t10_4) * vs_TEXCOORD5.xyz;
    //Instruction 5323
    //MUL
    t16_3.xyz = t16_3.xyz * t16_7.xyz;
    //Instruction 5324
    //DP3
    t16_26 = dot(t16_1.xyz, _WorldSpaceLightPos0.xyz);
    t16_26 = clamp(t16_26, 0.0, 1.0);
    //Instruction 5325
    //MAD
    t16_2.xyz = t16_2.xyz * vec3(t16_26) + t16_3.xyz;
    //Instruction 5326
    //DP3
    t16_12.x = dot(vs_TEXCOORD1.xyz, t16_1.xyz);
    //Instruction 5327
    //ADD
    t16_12.x = t16_12.x + t16_12.x;
    //Instruction 5328
    //MAD
    t16_12.xyz = t16_1.xyz * (-t16_12.xxx) + vs_TEXCOORD1.xyz;
    //Instruction 5329
    //SAMPLE_L
    t10_0 = textureLod(unity_SpecCube0, t16_12.xyz, t16_25);
    //Instruction 5330
    //MUL
    t16_1.x = t10_0.w * unity_SpecCube0_HDR.x;
    //Instruction 5331
    //MUL
    t16_1.xyz = t10_0.xyz * t16_1.xxx;
    //Instruction 5332
    //MUL
    t16_1.xyz = vec3(t10_4) * t16_1.xyz;
    //Instruction 5333
    //MAD
    t16_1.xyz = t16_1.xyz * t16_6.xyz + t16_2.xyz;
    //Instruction 5334
    //ADD
    t16_4.xyz = t16_1.xyz + (-unity_FogColor.xyz);
    //Instruction 5335
    //MOV
    t28 = vs_TEXCOORD7;
    t28 = clamp(t28, 0.0, 1.0);
    //Instruction 5336
    //MAD
    t4.xyz = vec3(t28) * t16_4.xyz + unity_FogColor.xyz;
    //Instruction 5337
    //MOV
    SV_Target0.xyz = t4.xyz;
    //Instruction 5338
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 5339
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" "_NORMALMAP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp mat3 tangentToWorld_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  tmpvar_6 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_15;
  n_15 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp vec4 v_17;
  v_17.x = _World2Object[0].x;
  v_17.y = _World2Object[1].x;
  v_17.z = _World2Object[2].x;
  v_17.w = _World2Object[3].x;
  highp vec4 v_18;
  v_18.x = _World2Object[0].y;
  v_18.y = _World2Object[1].y;
  v_18.z = _World2Object[2].y;
  v_18.w = _World2Object[3].y;
  highp vec4 v_19;
  v_19.x = _World2Object[0].z;
  v_19.y = _World2Object[1].z;
  v_19.z = _World2Object[2].z;
  v_19.w = _World2Object[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(((
    (v_17.xyz * norm_16.x)
   + 
    (v_18.xyz * norm_16.y)
  ) + (v_19.xyz * norm_16.z)));
  highp vec3 dir_21;
  dir_21 = tmpvar_4.xyz;
  highp mat3 tmpvar_22;
  tmpvar_22[0] = _Object2World[0].xyz;
  tmpvar_22[1] = _Object2World[1].xyz;
  tmpvar_22[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_23;
  tmpvar_23.xyz = normalize((tmpvar_22 * dir_21));
  tmpvar_23.w = tmpvar_4.w;
  highp vec3 tmpvar_24;
  tmpvar_24 = tmpvar_23.www;
  mediump vec3 normal_25;
  normal_25 = tmpvar_20;
  mediump vec3 tangent_26;
  tangent_26 = tmpvar_23.xyz;
  mediump vec3 flip_27;
  flip_27 = tmpvar_24;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (((normal_25.yzx * tangent_26.zxy) - (normal_25.zxy * tangent_26.yzx)) * flip_27);
  mediump mat3 tmpvar_29;
  tmpvar_29[0].x = tangent_26.x;
  tmpvar_29[0].y = tmpvar_28.x;
  tmpvar_29[0].z = normal_25.x;
  tmpvar_29[1].x = tangent_26.y;
  tmpvar_29[1].y = tmpvar_28.y;
  tmpvar_29[1].z = normal_25.y;
  tmpvar_29[2].x = tangent_26.z;
  tmpvar_29[2].y = tmpvar_28.z;
  tmpvar_29[2].z = normal_25.z;
  tangentToWorld_5 = tmpvar_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_5[0].x;
  v_30.y = tangentToWorld_5[1].x;
  v_30.z = tangentToWorld_5[2].x;
  tmpvar_7.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_5[0].y;
  v_31.y = tangentToWorld_5[1].y;
  v_31.z = tangentToWorld_5[2].y;
  tmpvar_8.xyz = v_31;
  highp vec3 v_32;
  v_32.x = tangentToWorld_5[0].z;
  v_32.y = tangentToWorld_5[1].z;
  v_32.z = tangentToWorld_5[2].z;
  tmpvar_9.xyz = v_32;
  tmpvar_11 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = tmpvar_20;
  mediump vec4 normal_34;
  normal_34 = tmpvar_33;
  mediump vec3 x2_35;
  mediump vec3 x1_36;
  x1_36.x = dot (unity_SHAr, normal_34);
  x1_36.y = dot (unity_SHAg, normal_34);
  x1_36.z = dot (unity_SHAb, normal_34);
  mediump vec4 tmpvar_37;
  tmpvar_37 = (normal_34.xyzz * normal_34.yzzx);
  x2_35.x = dot (unity_SHBr, tmpvar_37);
  x2_35.y = dot (unity_SHBg, tmpvar_37);
  x2_35.z = dot (unity_SHBb, tmpvar_37);
  tmpvar_10.xyz = ((x2_35 + (unity_SHC.xyz * 
    ((normal_34.x * normal_34.x) - (normal_34.y * normal_34.y))
  )) + x1_36);
  highp vec3 lightColor0_38;
  lightColor0_38 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_39;
  lightColor1_39 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_40;
  lightColor2_40 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_41;
  lightColor3_41 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_42;
  lightAttenSq_42 = unity_4LightAtten0;
  highp vec3 col_43;
  highp vec4 ndotl_44;
  highp vec4 lengthSq_45;
  highp vec4 tmpvar_46;
  tmpvar_46 = (unity_4LightPosX0 - tmpvar_12.x);
  highp vec4 tmpvar_47;
  tmpvar_47 = (unity_4LightPosY0 - tmpvar_12.y);
  highp vec4 tmpvar_48;
  tmpvar_48 = (unity_4LightPosZ0 - tmpvar_12.z);
  lengthSq_45 = (tmpvar_46 * tmpvar_46);
  lengthSq_45 = (lengthSq_45 + (tmpvar_47 * tmpvar_47));
  lengthSq_45 = (lengthSq_45 + (tmpvar_48 * tmpvar_48));
  ndotl_44 = (tmpvar_46 * tmpvar_20.x);
  ndotl_44 = (ndotl_44 + (tmpvar_47 * tmpvar_20.y));
  ndotl_44 = (ndotl_44 + (tmpvar_48 * tmpvar_20.z));
  highp vec4 tmpvar_49;
  tmpvar_49 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_44 * inversesqrt(lengthSq_45)));
  ndotl_44 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = (tmpvar_49 * (1.0/((1.0 + 
    (lengthSq_45 * lightAttenSq_42)
  ))));
  col_43 = (lightColor0_38 * tmpvar_50.x);
  col_43 = (col_43 + (lightColor1_39 * tmpvar_50.y));
  col_43 = (col_43 + (lightColor2_40 * tmpvar_50.z));
  col_43 = (col_43 + (lightColor3_41 * tmpvar_50.w));
  tmpvar_10.xyz = (tmpvar_10.xyz + col_43);
  highp float tmpvar_51;
  tmpvar_51 = (unity_FogParams.x * tmpvar_6.z);
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = normalize(n_15);
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD2_1 = tmpvar_8;
  xlv_TEXCOORD2_2 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_11;
  xlv_TEXCOORD7 = exp2((-(tmpvar_51) * tmpvar_51));
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  mediump float atten_2;
  mediump vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_3 = xlv_TEXCOORD2.xyz;
  tmpvar_4 = xlv_TEXCOORD2_1.xyz;
  tmpvar_5 = xlv_TEXCOORD2_2.xyz;
  mediump mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_3.x;
  tmpvar_6[0].y = tmpvar_4.x;
  tmpvar_6[0].z = tmpvar_5.x;
  tmpvar_6[1].x = tmpvar_3.y;
  tmpvar_6[1].y = tmpvar_4.y;
  tmpvar_6[1].z = tmpvar_5.y;
  tmpvar_6[2].x = tmpvar_3.z;
  tmpvar_6[2].y = tmpvar_4.z;
  tmpvar_6[2].z = tmpvar_5.z;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_BumpMap, xlv_TEXCOORD0.xy);
  mediump vec4 packednormal_9;
  packednormal_9 = tmpvar_8;
  mediump vec3 n_10;
  n_10 = (((packednormal_9.xyz * 2.0) - 1.0) * tmpvar_6);
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * tmpvar_7.xyz);
  mediump vec3 tmpvar_12;
  mediump float oneMinusReflectivity_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_11, vec3(_Metallic));
  oneMinusReflectivity_13 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_12 = (tmpvar_11 * oneMinusReflectivity_13);
  mediump vec3 tmpvar_15;
  tmpvar_15 = _LightColor0.xyz;
  lowp float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_16 = tmpvar_17;
  atten_2 = tmpvar_16;
  mediump float tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_18 = tmpvar_19.y;
  highp vec3 tmpvar_20;
  highp vec4 tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = -(xlv_TEXCOORD1);
  tmpvar_20 = tmpvar_22;
  tmpvar_21 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_23;
  mediump vec3 worldNormal_24;
  highp vec3 tmpvar_25;
  highp vec3 I_26;
  I_26 = -(tmpvar_20);
  tmpvar_25 = (I_26 - (2.0 * (
    dot (n_10, I_26)
   * n_10)));
  worldNormal_24 = tmpvar_25;
  mediump vec4 hdr_27;
  hdr_27 = tmpvar_21;
  highp float mip_28;
  mediump float tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = (1.0 - _Glossiness);
  tmpvar_29 = (tmpvar_30 * 7.0);
  mip_28 = tmpvar_29;
  highp vec4 tmpvar_31;
  tmpvar_31.xyz = worldNormal_24;
  tmpvar_31.w = mip_28;
  lowp vec4 tmpvar_32;
  tmpvar_32 = textureCube (unity_SpecCube0, tmpvar_31.xyz, mip_28);
  mediump vec4 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  tmpvar_23 = ((tmpvar_33.w * hdr_27.x) * tmpvar_33.xyz);
  tmpvar_23 = (tmpvar_23 * tmpvar_18);
  mediump vec2 tmpvar_34;
  tmpvar_34.x = dot ((tmpvar_22 - (2.0 * 
    (dot (n_10, tmpvar_22) * n_10)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_34.y = (1.0 - clamp (dot (n_10, tmpvar_22), 0.0, 1.0));
  mediump vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34 * tmpvar_34) * (tmpvar_34 * tmpvar_34));
  mediump vec2 tmpvar_36;
  tmpvar_36.x = tmpvar_35.x;
  tmpvar_36.y = tmpvar_30;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (unity_NHxRoughness, tmpvar_36);
  mediump vec3 tmpvar_38;
  tmpvar_38 = (((
    ((tmpvar_12 + ((tmpvar_37.w * 16.0) * tmpvar_14)) * (tmpvar_15 * atten_2))
   * 
    clamp (dot (n_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_18)
   * tmpvar_12)) + (tmpvar_23 * mix (tmpvar_14, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_13)), 0.0, 1.0)
  ), tmpvar_35.yyy)));
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = tmpvar_38;
  c_1.w = tmpvar_39.w;
  c_1.xyz = tmpvar_38;
  c_1.xyz = c_1.xyz;
  highp float tmpvar_40;
  tmpvar_40 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_40));
  mediump vec4 xlat_varoutput_41;
  xlat_varoutput_41.xyz = c_1.xyz;
  xlat_varoutput_41.w = 1.0;
  gl_FragData[0] = xlat_varoutput_41;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_NORMALMAP" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp mat3 tangentToWorld_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  tmpvar_6 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_15;
  n_15 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp vec4 v_17;
  v_17.x = _World2Object[0].x;
  v_17.y = _World2Object[1].x;
  v_17.z = _World2Object[2].x;
  v_17.w = _World2Object[3].x;
  highp vec4 v_18;
  v_18.x = _World2Object[0].y;
  v_18.y = _World2Object[1].y;
  v_18.z = _World2Object[2].y;
  v_18.w = _World2Object[3].y;
  highp vec4 v_19;
  v_19.x = _World2Object[0].z;
  v_19.y = _World2Object[1].z;
  v_19.z = _World2Object[2].z;
  v_19.w = _World2Object[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(((
    (v_17.xyz * norm_16.x)
   + 
    (v_18.xyz * norm_16.y)
  ) + (v_19.xyz * norm_16.z)));
  highp vec3 dir_21;
  dir_21 = tmpvar_4.xyz;
  highp mat3 tmpvar_22;
  tmpvar_22[0] = _Object2World[0].xyz;
  tmpvar_22[1] = _Object2World[1].xyz;
  tmpvar_22[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_23;
  tmpvar_23.xyz = normalize((tmpvar_22 * dir_21));
  tmpvar_23.w = tmpvar_4.w;
  highp vec3 tmpvar_24;
  tmpvar_24 = tmpvar_23.www;
  mediump vec3 normal_25;
  normal_25 = tmpvar_20;
  mediump vec3 tangent_26;
  tangent_26 = tmpvar_23.xyz;
  mediump vec3 flip_27;
  flip_27 = tmpvar_24;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (((normal_25.yzx * tangent_26.zxy) - (normal_25.zxy * tangent_26.yzx)) * flip_27);
  mediump mat3 tmpvar_29;
  tmpvar_29[0].x = tangent_26.x;
  tmpvar_29[0].y = tmpvar_28.x;
  tmpvar_29[0].z = normal_25.x;
  tmpvar_29[1].x = tangent_26.y;
  tmpvar_29[1].y = tmpvar_28.y;
  tmpvar_29[1].z = normal_25.y;
  tmpvar_29[2].x = tangent_26.z;
  tmpvar_29[2].y = tmpvar_28.z;
  tmpvar_29[2].z = normal_25.z;
  tangentToWorld_5 = tmpvar_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_5[0].x;
  v_30.y = tangentToWorld_5[1].x;
  v_30.z = tangentToWorld_5[2].x;
  tmpvar_7.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_5[0].y;
  v_31.y = tangentToWorld_5[1].y;
  v_31.z = tangentToWorld_5[2].y;
  tmpvar_8.xyz = v_31;
  highp vec3 v_32;
  v_32.x = tangentToWorld_5[0].z;
  v_32.y = tangentToWorld_5[1].z;
  v_32.z = tangentToWorld_5[2].z;
  tmpvar_9.xyz = v_32;
  tmpvar_11 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = tmpvar_20;
  mediump vec4 normal_34;
  normal_34 = tmpvar_33;
  mediump vec3 x2_35;
  mediump vec3 x1_36;
  x1_36.x = dot (unity_SHAr, normal_34);
  x1_36.y = dot (unity_SHAg, normal_34);
  x1_36.z = dot (unity_SHAb, normal_34);
  mediump vec4 tmpvar_37;
  tmpvar_37 = (normal_34.xyzz * normal_34.yzzx);
  x2_35.x = dot (unity_SHBr, tmpvar_37);
  x2_35.y = dot (unity_SHBg, tmpvar_37);
  x2_35.z = dot (unity_SHBb, tmpvar_37);
  tmpvar_10.xyz = ((x2_35 + (unity_SHC.xyz * 
    ((normal_34.x * normal_34.x) - (normal_34.y * normal_34.y))
  )) + x1_36);
  highp float tmpvar_38;
  tmpvar_38 = (unity_FogParams.x * tmpvar_6.z);
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = normalize(n_15);
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD2_1 = tmpvar_8;
  xlv_TEXCOORD2_2 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_11;
  xlv_TEXCOORD7 = exp2((-(tmpvar_38) * tmpvar_38));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform lowp sampler2DShadow _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  mediump float atten_2;
  mediump vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_3 = xlv_TEXCOORD2.xyz;
  tmpvar_4 = xlv_TEXCOORD2_1.xyz;
  tmpvar_5 = xlv_TEXCOORD2_2.xyz;
  mediump mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_3.x;
  tmpvar_6[0].y = tmpvar_4.x;
  tmpvar_6[0].z = tmpvar_5.x;
  tmpvar_6[1].x = tmpvar_3.y;
  tmpvar_6[1].y = tmpvar_4.y;
  tmpvar_6[1].z = tmpvar_5.y;
  tmpvar_6[2].x = tmpvar_3.z;
  tmpvar_6[2].y = tmpvar_4.z;
  tmpvar_6[2].z = tmpvar_5.z;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_BumpMap, xlv_TEXCOORD0.xy);
  mediump vec4 packednormal_9;
  packednormal_9 = tmpvar_8;
  mediump vec3 n_10;
  n_10 = (((packednormal_9.xyz * 2.0) - 1.0) * tmpvar_6);
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * tmpvar_7.xyz);
  mediump vec3 tmpvar_12;
  mediump float oneMinusReflectivity_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_11, vec3(_Metallic));
  oneMinusReflectivity_13 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_12 = (tmpvar_11 * oneMinusReflectivity_13);
  mediump vec3 tmpvar_15;
  tmpvar_15 = _LightColor0.xyz;
  lowp float shadow_16;
  shadow_16 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  atten_2 = shadow_16;
  mediump float tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_17 = tmpvar_18.y;
  highp vec3 tmpvar_19;
  highp vec4 tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = -(xlv_TEXCOORD1);
  tmpvar_19 = tmpvar_21;
  tmpvar_20 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_22;
  mediump vec3 worldNormal_23;
  highp vec3 tmpvar_24;
  highp vec3 I_25;
  I_25 = -(tmpvar_19);
  tmpvar_24 = (I_25 - (2.0 * (
    dot (n_10, I_25)
   * n_10)));
  worldNormal_23 = tmpvar_24;
  mediump vec4 hdr_26;
  hdr_26 = tmpvar_20;
  highp float mip_27;
  mediump float tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = (1.0 - _Glossiness);
  tmpvar_28 = (tmpvar_29 * 7.0);
  mip_27 = tmpvar_28;
  highp vec4 tmpvar_30;
  tmpvar_30.xyz = worldNormal_23;
  tmpvar_30.w = mip_27;
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (unity_SpecCube0, tmpvar_30.xyz, mip_27);
  mediump vec4 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  tmpvar_22 = ((tmpvar_32.w * hdr_26.x) * tmpvar_32.xyz);
  tmpvar_22 = (tmpvar_22 * tmpvar_17);
  mediump vec2 tmpvar_33;
  tmpvar_33.x = dot ((tmpvar_21 - (2.0 * 
    (dot (n_10, tmpvar_21) * n_10)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_33.y = (1.0 - clamp (dot (n_10, tmpvar_21), 0.0, 1.0));
  mediump vec2 tmpvar_34;
  tmpvar_34 = ((tmpvar_33 * tmpvar_33) * (tmpvar_33 * tmpvar_33));
  mediump vec2 tmpvar_35;
  tmpvar_35.x = tmpvar_34.x;
  tmpvar_35.y = tmpvar_29;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (unity_NHxRoughness, tmpvar_35);
  mediump vec3 tmpvar_37;
  tmpvar_37 = (((
    ((tmpvar_12 + ((tmpvar_36.w * 16.0) * tmpvar_14)) * (tmpvar_15 * atten_2))
   * 
    clamp (dot (n_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_17)
   * tmpvar_12)) + (tmpvar_22 * mix (tmpvar_14, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_13)), 0.0, 1.0)
  ), tmpvar_34.yyy)));
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = tmpvar_37;
  c_1.w = tmpvar_38.w;
  c_1.xyz = tmpvar_37;
  c_1.xyz = c_1.xyz;
  highp float tmpvar_39;
  tmpvar_39 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_39));
  mediump vec4 xlat_varoutput_40;
  xlat_varoutput_40.xyz = c_1.xyz;
  xlat_varoutput_40.w = 1.0;
  gl_FragData[0] = xlat_varoutput_40;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump float t16_1;
highp vec3 t2;
highp vec3 t3;
mediump vec3 t16_4;
mediump vec3 t16_5;
highp float t18;
void main()
{
    //Instruction 5639
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 5640
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 5641
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 5642
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 5643
    //MOV
    gl_Position = t0;
    //Instruction 5644
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 5645
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 5646
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 5647
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 5648
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 5649
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 5650
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 5651
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 5652
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 5653
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 5654
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 5655
    //ADD
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 5656
    //DP3
    t16_1 = dot(t0.xyz, t0.xyz);
    //Instruction 5657
    //RSQ
    t16_1 = inversesqrt(t16_1);
    //Instruction 5658
    //MUL
    vs_TEXCOORD1.xyz = t0.xyz * vec3(t16_1);
    //Instruction 5659
    //MUL
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 5660
    //MAD
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    //Instruction 5661
    //MAD
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    //Instruction 5662
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 5663
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 5664
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 5665
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 5666
    //MOV
    vs_TEXCOORD2.w = 0.0;
    //Instruction 5667
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 5668
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 5669
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 5670
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 5671
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 5672
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 5673
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 5674
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 5675
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 5676
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 5677
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 5678
    //DP3
    t18 = dot(t2.xyz, t2.xyz);
    //Instruction 5679
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 5680
    //MUL
    t1.xyz = vec3(t18) * t2.xyz;
    //Instruction 5681
    //MUL
    t16_4.xyz = t0.yzx * t1.zxy;
    //Instruction 5682
    //MAD
    t16_4.xyz = t1.yzx * t0.zxy + (-t16_4.xyz);
    //Instruction 5683
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 5684
    //MOV
    vs_TEXCOORD3.w = 0.0;
    //Instruction 5685
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 5686
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 5687
    //MUL
    t16_4.x = t1.y * t1.y;
    //Instruction 5688
    //MAD
    t16_4.x = t1.x * t1.x + (-t16_4.x);
    //Instruction 5689
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 5690
    //DP4
    t16_5.x = dot(unity_SHBr, t16_0);
    //Instruction 5691
    //DP4
    t16_5.y = dot(unity_SHBg, t16_0);
    //Instruction 5692
    //DP4
    t16_5.z = dot(unity_SHBb, t16_0);
    //Instruction 5693
    //MAD
    t16_4.xyz = unity_SHC.xyz * t16_4.xxx + t16_5.xyz;
    //Instruction 5694
    //MOV
    t1.w = 1.0;
    //Instruction 5695
    //DP4
    t16_5.x = dot(unity_SHAr, t1);
    //Instruction 5696
    //DP4
    t16_5.y = dot(unity_SHAg, t1);
    //Instruction 5697
    //DP4
    t16_5.z = dot(unity_SHAb, t1);
    //Instruction 5698
    //ADD
    vs_TEXCOORD5.xyz = t16_4.xyz + t16_5.xyz;
    //Instruction 5699
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 5700
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 5701
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 5702
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 5703
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 5704
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 5705
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 5706
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 5707
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 5708
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 5709
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec4 t16_1;
lowp vec4 t10_1;
mediump vec4 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
highp vec3 t5;
mediump vec3 t16_5;
lowp float t10_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump float t16_8;
mediump vec3 t16_13;
lowp vec3 t10_13;
mediump float t16_24;
mediump float t16_26;
highp float t29;
void main()
{
    //Instruction 5587
    //SAMPLE_C_LZ
    vec3 txVec21 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec21, 0.0);
    //Instruction 5588
    //ADD
    t16_8 = (-_LightShadowData.x) + 1.0;
    //Instruction 5589
    //MAD
    t16_0.x = t16_0.x * t16_8 + _LightShadowData.x;
    //Instruction 5590
    //MUL
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 5591
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 5592
    //MAD
    t16_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 5593
    //MUL
    t16_3.xyz = t16_2.yyy * vs_TEXCOORD3.xyz;
    //Instruction 5594
    //MAD
    t16_2.xyw = t16_2.xxx * vs_TEXCOORD2.xyz + t16_3.xyz;
    //Instruction 5595
    //MAD
    t16_2.xyz = t16_2.zzz * vs_TEXCOORD4.xyz + t16_2.xyw;
    //Instruction 5596
    //DP3
    t16_24 = dot((-vs_TEXCOORD1.xyz), t16_2.xyz);
    //Instruction 5597
    //ADD
    t16_26 = t16_24 + t16_24;
    //Instruction 5598
    //MOV
    t16_24 = t16_24;
    t16_24 = clamp(t16_24, 0.0, 1.0);
    //Instruction 5599
    //ADD
    t16_3.y = (-t16_24) + 1.0;
    //Instruction 5600
    //MAD
    t16_4.xyz = t16_2.xyz * (-vec3(t16_26)) + (-vs_TEXCOORD1.xyz);
    //Instruction 5601
    //DP3
    t16_3.x = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 5602
    //MUL
    t16_3.xy = t16_3.xy * t16_3.xy;
    //Instruction 5603
    //MUL
    t16_1.yz = t16_3.xy * t16_3.xy;
    //Instruction 5604
    //ADD
    t16_1.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    //Instruction 5605
    //SAMPLE
    t10_5 = texture(unity_NHxRoughness, t16_1.yw).w;
    //Instruction 5606
    //MUL
    t16_24 = t16_1.x * 7.000000;
    //Instruction 5607
    //MUL
    t16_5.x = t10_5 * 16.000000;
    //Instruction 5608
    //SAMPLE
    t10_13.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 5609
    //MUL
    t16_6.xyz = t10_13.xyz * _Color.xyz;
    //Instruction 5610
    //MAD
    t16_3.xyz = _Color.xyz * t10_13.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 5611
    //MAD
    t16_3.xyz = vec3(_Metallic) * t16_3.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 5612
    //MAD
    t16_26 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 5613
    //MUL
    t16_4.xyz = vec3(t16_26) * t16_6.xyz;
    //Instruction 5614
    //ADD
    t16_26 = (-t16_26) + _Glossiness;
    //Instruction 5615
    //ADD
    t16_26 = t16_26 + 1.0;
    t16_26 = clamp(t16_26, 0.0, 1.0);
    //Instruction 5616
    //ADD
    t16_7.xyz = (-t16_3.xyz) + vec3(t16_26);
    //Instruction 5617
    //MAD
    t16_7.xyz = t16_1.zzz * t16_7.xyz + t16_3.xyz;
    //Instruction 5618
    //MAD
    t16_3.xyz = t16_5.xxx * t16_3.xyz + t16_4.xyz;
    //Instruction 5619
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 5620
    //SAMPLE
    t10_5 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 5621
    //MUL
    t16_3.xyz = vec3(t10_5) * vs_TEXCOORD5.xyz;
    //Instruction 5622
    //MUL
    t16_3.xyz = t16_4.xyz * t16_3.xyz;
    //Instruction 5623
    //DP3
    t16_26 = dot(t16_2.xyz, _WorldSpaceLightPos0.xyz);
    t16_26 = clamp(t16_26, 0.0, 1.0);
    //Instruction 5624
    //MAD
    t16_0.xyz = t16_0.xyz * vec3(t16_26) + t16_3.xyz;
    //Instruction 5625
    //DP3
    t16_13.x = dot(vs_TEXCOORD1.xyz, t16_2.xyz);
    //Instruction 5626
    //ADD
    t16_13.x = t16_13.x + t16_13.x;
    //Instruction 5627
    //MAD
    t16_13.xyz = t16_2.xyz * (-t16_13.xxx) + vs_TEXCOORD1.xyz;
    //Instruction 5628
    //SAMPLE_L
    t10_1 = textureLod(unity_SpecCube0, t16_13.xyz, t16_24);
    //Instruction 5629
    //MUL
    t16_24 = t10_1.w * unity_SpecCube0_HDR.x;
    //Instruction 5630
    //MUL
    t16_2.xyz = t10_1.xyz * vec3(t16_24);
    //Instruction 5631
    //MUL
    t16_2.xyz = vec3(t10_5) * t16_2.xyz;
    //Instruction 5632
    //MAD
    t16_0.xyz = t16_2.xyz * t16_7.xyz + t16_0.xyz;
    //Instruction 5633
    //ADD
    t16_5.xyz = t16_0.xyz + (-unity_FogColor.xyz);
    //Instruction 5634
    //MOV
    t29 = vs_TEXCOORD7;
    t29 = clamp(t29, 0.0, 1.0);
    //Instruction 5635
    //MAD
    t5.xyz = vec3(t29) * t16_5.xyz + unity_FogColor.xyz;
    //Instruction 5636
    //MOV
    SV_Target0.xyz = t5.xyz;
    //Instruction 5637
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 5638
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" "_NORMALMAP" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp mat3 tangentToWorld_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  tmpvar_6 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_15;
  n_15 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp vec4 v_17;
  v_17.x = _World2Object[0].x;
  v_17.y = _World2Object[1].x;
  v_17.z = _World2Object[2].x;
  v_17.w = _World2Object[3].x;
  highp vec4 v_18;
  v_18.x = _World2Object[0].y;
  v_18.y = _World2Object[1].y;
  v_18.z = _World2Object[2].y;
  v_18.w = _World2Object[3].y;
  highp vec4 v_19;
  v_19.x = _World2Object[0].z;
  v_19.y = _World2Object[1].z;
  v_19.z = _World2Object[2].z;
  v_19.w = _World2Object[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(((
    (v_17.xyz * norm_16.x)
   + 
    (v_18.xyz * norm_16.y)
  ) + (v_19.xyz * norm_16.z)));
  highp vec3 dir_21;
  dir_21 = tmpvar_4.xyz;
  highp mat3 tmpvar_22;
  tmpvar_22[0] = _Object2World[0].xyz;
  tmpvar_22[1] = _Object2World[1].xyz;
  tmpvar_22[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_23;
  tmpvar_23.xyz = normalize((tmpvar_22 * dir_21));
  tmpvar_23.w = tmpvar_4.w;
  highp vec3 tmpvar_24;
  tmpvar_24 = tmpvar_23.www;
  mediump vec3 normal_25;
  normal_25 = tmpvar_20;
  mediump vec3 tangent_26;
  tangent_26 = tmpvar_23.xyz;
  mediump vec3 flip_27;
  flip_27 = tmpvar_24;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (((normal_25.yzx * tangent_26.zxy) - (normal_25.zxy * tangent_26.yzx)) * flip_27);
  mediump mat3 tmpvar_29;
  tmpvar_29[0].x = tangent_26.x;
  tmpvar_29[0].y = tmpvar_28.x;
  tmpvar_29[0].z = normal_25.x;
  tmpvar_29[1].x = tangent_26.y;
  tmpvar_29[1].y = tmpvar_28.y;
  tmpvar_29[1].z = normal_25.y;
  tmpvar_29[2].x = tangent_26.z;
  tmpvar_29[2].y = tmpvar_28.z;
  tmpvar_29[2].z = normal_25.z;
  tangentToWorld_5 = tmpvar_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_5[0].x;
  v_30.y = tangentToWorld_5[1].x;
  v_30.z = tangentToWorld_5[2].x;
  tmpvar_7.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_5[0].y;
  v_31.y = tangentToWorld_5[1].y;
  v_31.z = tangentToWorld_5[2].y;
  tmpvar_8.xyz = v_31;
  highp vec3 v_32;
  v_32.x = tangentToWorld_5[0].z;
  v_32.y = tangentToWorld_5[1].z;
  v_32.z = tangentToWorld_5[2].z;
  tmpvar_9.xyz = v_32;
  tmpvar_11 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = tmpvar_20;
  mediump vec4 normal_34;
  normal_34 = tmpvar_33;
  mediump vec3 x2_35;
  mediump vec3 x1_36;
  x1_36.x = dot (unity_SHAr, normal_34);
  x1_36.y = dot (unity_SHAg, normal_34);
  x1_36.z = dot (unity_SHAb, normal_34);
  mediump vec4 tmpvar_37;
  tmpvar_37 = (normal_34.xyzz * normal_34.yzzx);
  x2_35.x = dot (unity_SHBr, tmpvar_37);
  x2_35.y = dot (unity_SHBg, tmpvar_37);
  x2_35.z = dot (unity_SHBb, tmpvar_37);
  tmpvar_10.xyz = ((x2_35 + (unity_SHC.xyz * 
    ((normal_34.x * normal_34.x) - (normal_34.y * normal_34.y))
  )) + x1_36);
  highp vec3 lightColor0_38;
  lightColor0_38 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_39;
  lightColor1_39 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_40;
  lightColor2_40 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_41;
  lightColor3_41 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_42;
  lightAttenSq_42 = unity_4LightAtten0;
  highp vec3 col_43;
  highp vec4 ndotl_44;
  highp vec4 lengthSq_45;
  highp vec4 tmpvar_46;
  tmpvar_46 = (unity_4LightPosX0 - tmpvar_12.x);
  highp vec4 tmpvar_47;
  tmpvar_47 = (unity_4LightPosY0 - tmpvar_12.y);
  highp vec4 tmpvar_48;
  tmpvar_48 = (unity_4LightPosZ0 - tmpvar_12.z);
  lengthSq_45 = (tmpvar_46 * tmpvar_46);
  lengthSq_45 = (lengthSq_45 + (tmpvar_47 * tmpvar_47));
  lengthSq_45 = (lengthSq_45 + (tmpvar_48 * tmpvar_48));
  ndotl_44 = (tmpvar_46 * tmpvar_20.x);
  ndotl_44 = (ndotl_44 + (tmpvar_47 * tmpvar_20.y));
  ndotl_44 = (ndotl_44 + (tmpvar_48 * tmpvar_20.z));
  highp vec4 tmpvar_49;
  tmpvar_49 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_44 * inversesqrt(lengthSq_45)));
  ndotl_44 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = (tmpvar_49 * (1.0/((1.0 + 
    (lengthSq_45 * lightAttenSq_42)
  ))));
  col_43 = (lightColor0_38 * tmpvar_50.x);
  col_43 = (col_43 + (lightColor1_39 * tmpvar_50.y));
  col_43 = (col_43 + (lightColor2_40 * tmpvar_50.z));
  col_43 = (col_43 + (lightColor3_41 * tmpvar_50.w));
  tmpvar_10.xyz = (tmpvar_10.xyz + col_43);
  highp float tmpvar_51;
  tmpvar_51 = (unity_FogParams.x * tmpvar_6.z);
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = normalize(n_15);
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD2_1 = tmpvar_8;
  xlv_TEXCOORD2_2 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_11;
  xlv_TEXCOORD7 = exp2((-(tmpvar_51) * tmpvar_51));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform lowp sampler2DShadow _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  mediump float atten_2;
  mediump vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_3 = xlv_TEXCOORD2.xyz;
  tmpvar_4 = xlv_TEXCOORD2_1.xyz;
  tmpvar_5 = xlv_TEXCOORD2_2.xyz;
  mediump mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_3.x;
  tmpvar_6[0].y = tmpvar_4.x;
  tmpvar_6[0].z = tmpvar_5.x;
  tmpvar_6[1].x = tmpvar_3.y;
  tmpvar_6[1].y = tmpvar_4.y;
  tmpvar_6[1].z = tmpvar_5.y;
  tmpvar_6[2].x = tmpvar_3.z;
  tmpvar_6[2].y = tmpvar_4.z;
  tmpvar_6[2].z = tmpvar_5.z;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_BumpMap, xlv_TEXCOORD0.xy);
  mediump vec4 packednormal_9;
  packednormal_9 = tmpvar_8;
  mediump vec3 n_10;
  n_10 = (((packednormal_9.xyz * 2.0) - 1.0) * tmpvar_6);
  mediump vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * tmpvar_7.xyz);
  mediump vec3 tmpvar_12;
  mediump float oneMinusReflectivity_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_11, vec3(_Metallic));
  oneMinusReflectivity_13 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_12 = (tmpvar_11 * oneMinusReflectivity_13);
  mediump vec3 tmpvar_15;
  tmpvar_15 = _LightColor0.xyz;
  lowp float shadow_16;
  shadow_16 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  atten_2 = shadow_16;
  mediump float tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_17 = tmpvar_18.y;
  highp vec3 tmpvar_19;
  highp vec4 tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = -(xlv_TEXCOORD1);
  tmpvar_19 = tmpvar_21;
  tmpvar_20 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_22;
  mediump vec3 worldNormal_23;
  highp vec3 tmpvar_24;
  highp vec3 I_25;
  I_25 = -(tmpvar_19);
  tmpvar_24 = (I_25 - (2.0 * (
    dot (n_10, I_25)
   * n_10)));
  worldNormal_23 = tmpvar_24;
  mediump vec4 hdr_26;
  hdr_26 = tmpvar_20;
  highp float mip_27;
  mediump float tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = (1.0 - _Glossiness);
  tmpvar_28 = (tmpvar_29 * 7.0);
  mip_27 = tmpvar_28;
  highp vec4 tmpvar_30;
  tmpvar_30.xyz = worldNormal_23;
  tmpvar_30.w = mip_27;
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (unity_SpecCube0, tmpvar_30.xyz, mip_27);
  mediump vec4 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  tmpvar_22 = ((tmpvar_32.w * hdr_26.x) * tmpvar_32.xyz);
  tmpvar_22 = (tmpvar_22 * tmpvar_17);
  mediump vec2 tmpvar_33;
  tmpvar_33.x = dot ((tmpvar_21 - (2.0 * 
    (dot (n_10, tmpvar_21) * n_10)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_33.y = (1.0 - clamp (dot (n_10, tmpvar_21), 0.0, 1.0));
  mediump vec2 tmpvar_34;
  tmpvar_34 = ((tmpvar_33 * tmpvar_33) * (tmpvar_33 * tmpvar_33));
  mediump vec2 tmpvar_35;
  tmpvar_35.x = tmpvar_34.x;
  tmpvar_35.y = tmpvar_29;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (unity_NHxRoughness, tmpvar_35);
  mediump vec3 tmpvar_37;
  tmpvar_37 = (((
    ((tmpvar_12 + ((tmpvar_36.w * 16.0) * tmpvar_14)) * (tmpvar_15 * atten_2))
   * 
    clamp (dot (n_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_17)
   * tmpvar_12)) + (tmpvar_22 * mix (tmpvar_14, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_13)), 0.0, 1.0)
  ), tmpvar_34.yyy)));
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = tmpvar_37;
  c_1.w = tmpvar_38.w;
  c_1.xyz = tmpvar_37;
  c_1.xyz = c_1.xyz;
  highp float tmpvar_39;
  tmpvar_39 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_39));
  mediump vec4 xlat_varoutput_40;
  xlat_varoutput_40.xyz = c_1.xyz;
  xlat_varoutput_40.w = 1.0;
  gl_FragData[0] = xlat_varoutput_40;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec4 t4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp float t21;
void main()
{
    //Instruction 5762
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 5763
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 5764
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 5765
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 5766
    //MOV
    gl_Position = t0;
    //Instruction 5767
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 5768
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 5769
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 5770
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 5771
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 5772
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 5773
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 5774
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 5775
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 5776
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 5777
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 5778
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 5779
    //DP3
    t16_2 = dot(t1.xyz, t1.xyz);
    //Instruction 5780
    //RSQ
    t16_2 = inversesqrt(t16_2);
    //Instruction 5781
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * vec3(t16_2);
    //Instruction 5782
    //MUL
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 5783
    //MAD
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    //Instruction 5784
    //MAD
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    //Instruction 5785
    //DP3
    t21 = dot(t1.xyz, t1.xyz);
    //Instruction 5786
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 5787
    //MUL
    t1.xyz = vec3(t21) * t1.xyz;
    //Instruction 5788
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 5789
    //MOV
    vs_TEXCOORD2.w = 0.0;
    //Instruction 5790
    //MUL
    t3.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 5791
    //MUL
    t3.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 5792
    //MUL
    t3.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 5793
    //MUL
    t4.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 5794
    //MUL
    t4.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 5795
    //MUL
    t4.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 5796
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 5797
    //MUL
    t4.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 5798
    //MUL
    t4.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 5799
    //MUL
    t4.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 5800
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 5801
    //DP3
    t21 = dot(t3.xyz, t3.xyz);
    //Instruction 5802
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 5803
    //MUL
    t2.xyz = vec3(t21) * t3.xyz;
    //Instruction 5804
    //MUL
    t16_5.xyz = t1.yzx * t2.zxy;
    //Instruction 5805
    //MAD
    t16_5.xyz = t2.yzx * t1.zxy + (-t16_5.xyz);
    //Instruction 5806
    //MUL
    vs_TEXCOORD3.xyz = t16_5.xyz * in_TANGENT0.www;
    //Instruction 5807
    //MOV
    vs_TEXCOORD3.w = 0.0;
    //Instruction 5808
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 5809
    //MOV
    vs_TEXCOORD4.xyz = t2.xyz;
    //Instruction 5810
    //MUL
    t16_5.x = t2.y * t2.y;
    //Instruction 5811
    //MAD
    t16_5.x = t2.x * t2.x + (-t16_5.x);
    //Instruction 5812
    //MUL
    t16_1 = t2.yzzx * t2.xyzz;
    //Instruction 5813
    //DP4
    t16_6.x = dot(unity_SHBr, t16_1);
    //Instruction 5814
    //DP4
    t16_6.y = dot(unity_SHBg, t16_1);
    //Instruction 5815
    //DP4
    t16_6.z = dot(unity_SHBb, t16_1);
    //Instruction 5816
    //MAD
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    //Instruction 5817
    //MOV
    t2.w = 1.0;
    //Instruction 5818
    //DP4
    t16_6.x = dot(unity_SHAr, t2);
    //Instruction 5819
    //DP4
    t16_6.y = dot(unity_SHAg, t2);
    //Instruction 5820
    //DP4
    t16_6.z = dot(unity_SHAb, t2);
    //Instruction 5821
    //ADD
    t16_5.xyz = t16_5.xyz + t16_6.xyz;
    //Instruction 5822
    //ADD
    t1 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 5823
    //MUL
    t3 = t2.yyyy * t1;
    //Instruction 5824
    //MUL
    t1 = t1 * t1;
    //Instruction 5825
    //ADD
    t4 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 5826
    //ADD
    t0 = (-t0.zzzz) + unity_4LightPosZ0;
    //Instruction 5827
    //MAD
    t3 = t4 * t2.xxxx + t3;
    //Instruction 5828
    //MAD
    t2 = t0 * t2.zzzz + t3;
    //Instruction 5829
    //MAD
    t1 = t4 * t4 + t1;
    //Instruction 5830
    //MAD
    t0 = t0 * t0 + t1;
    //Instruction 5831
    //RSQ
    t1 = inversesqrt(t0);
    //Instruction 5832
    //MAD
    t0 = t0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 5833
    //DIV
    t0 = vec4(1.0, 1.0, 1.0, 1.0) / t0;
    //Instruction 5834
    //MUL
    t1 = t1 * t2;
    //Instruction 5835
    //MAX
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 5836
    //MUL
    t0 = t0 * t1;
    //Instruction 5837
    //MUL
    t3.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 5838
    //MAD
    t3.xyz = unity_LightColor[0].xyz * t0.xxx + t3.xyz;
    //Instruction 5839
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t3.xyz;
    //Instruction 5840
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 5841
    //ADD
    t0.xyz = t0.xyz + t16_5.xyz;
    //Instruction 5842
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 5843
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 5844
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 5845
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 5846
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 5847
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 5848
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 5849
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 5850
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 5851
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 5852
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 5853
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec4 t16_1;
lowp vec4 t10_1;
mediump vec4 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
highp vec3 t5;
mediump vec3 t16_5;
lowp float t10_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump float t16_8;
mediump vec3 t16_13;
lowp vec3 t10_13;
mediump float t16_24;
mediump float t16_26;
highp float t29;
void main()
{
    //Instruction 5710
    //SAMPLE_C_LZ
    vec3 txVec22 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec22, 0.0);
    //Instruction 5711
    //ADD
    t16_8 = (-_LightShadowData.x) + 1.0;
    //Instruction 5712
    //MAD
    t16_0.x = t16_0.x * t16_8 + _LightShadowData.x;
    //Instruction 5713
    //MUL
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 5714
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 5715
    //MAD
    t16_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 5716
    //MUL
    t16_3.xyz = t16_2.yyy * vs_TEXCOORD3.xyz;
    //Instruction 5717
    //MAD
    t16_2.xyw = t16_2.xxx * vs_TEXCOORD2.xyz + t16_3.xyz;
    //Instruction 5718
    //MAD
    t16_2.xyz = t16_2.zzz * vs_TEXCOORD4.xyz + t16_2.xyw;
    //Instruction 5719
    //DP3
    t16_24 = dot((-vs_TEXCOORD1.xyz), t16_2.xyz);
    //Instruction 5720
    //ADD
    t16_26 = t16_24 + t16_24;
    //Instruction 5721
    //MOV
    t16_24 = t16_24;
    t16_24 = clamp(t16_24, 0.0, 1.0);
    //Instruction 5722
    //ADD
    t16_3.y = (-t16_24) + 1.0;
    //Instruction 5723
    //MAD
    t16_4.xyz = t16_2.xyz * (-vec3(t16_26)) + (-vs_TEXCOORD1.xyz);
    //Instruction 5724
    //DP3
    t16_3.x = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 5725
    //MUL
    t16_3.xy = t16_3.xy * t16_3.xy;
    //Instruction 5726
    //MUL
    t16_1.yz = t16_3.xy * t16_3.xy;
    //Instruction 5727
    //ADD
    t16_1.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    //Instruction 5728
    //SAMPLE
    t10_5 = texture(unity_NHxRoughness, t16_1.yw).w;
    //Instruction 5729
    //MUL
    t16_24 = t16_1.x * 7.000000;
    //Instruction 5730
    //MUL
    t16_5.x = t10_5 * 16.000000;
    //Instruction 5731
    //SAMPLE
    t10_13.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 5732
    //MUL
    t16_6.xyz = t10_13.xyz * _Color.xyz;
    //Instruction 5733
    //MAD
    t16_3.xyz = _Color.xyz * t10_13.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 5734
    //MAD
    t16_3.xyz = vec3(_Metallic) * t16_3.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 5735
    //MAD
    t16_26 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 5736
    //MUL
    t16_4.xyz = vec3(t16_26) * t16_6.xyz;
    //Instruction 5737
    //ADD
    t16_26 = (-t16_26) + _Glossiness;
    //Instruction 5738
    //ADD
    t16_26 = t16_26 + 1.0;
    t16_26 = clamp(t16_26, 0.0, 1.0);
    //Instruction 5739
    //ADD
    t16_7.xyz = (-t16_3.xyz) + vec3(t16_26);
    //Instruction 5740
    //MAD
    t16_7.xyz = t16_1.zzz * t16_7.xyz + t16_3.xyz;
    //Instruction 5741
    //MAD
    t16_3.xyz = t16_5.xxx * t16_3.xyz + t16_4.xyz;
    //Instruction 5742
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 5743
    //SAMPLE
    t10_5 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 5744
    //MUL
    t16_3.xyz = vec3(t10_5) * vs_TEXCOORD5.xyz;
    //Instruction 5745
    //MUL
    t16_3.xyz = t16_4.xyz * t16_3.xyz;
    //Instruction 5746
    //DP3
    t16_26 = dot(t16_2.xyz, _WorldSpaceLightPos0.xyz);
    t16_26 = clamp(t16_26, 0.0, 1.0);
    //Instruction 5747
    //MAD
    t16_0.xyz = t16_0.xyz * vec3(t16_26) + t16_3.xyz;
    //Instruction 5748
    //DP3
    t16_13.x = dot(vs_TEXCOORD1.xyz, t16_2.xyz);
    //Instruction 5749
    //ADD
    t16_13.x = t16_13.x + t16_13.x;
    //Instruction 5750
    //MAD
    t16_13.xyz = t16_2.xyz * (-t16_13.xxx) + vs_TEXCOORD1.xyz;
    //Instruction 5751
    //SAMPLE_L
    t10_1 = textureLod(unity_SpecCube0, t16_13.xyz, t16_24);
    //Instruction 5752
    //MUL
    t16_24 = t10_1.w * unity_SpecCube0_HDR.x;
    //Instruction 5753
    //MUL
    t16_2.xyz = t10_1.xyz * vec3(t16_24);
    //Instruction 5754
    //MUL
    t16_2.xyz = vec3(t10_5) * t16_2.xyz;
    //Instruction 5755
    //MAD
    t16_0.xyz = t16_2.xyz * t16_7.xyz + t16_0.xyz;
    //Instruction 5756
    //ADD
    t16_5.xyz = t16_0.xyz + (-unity_FogColor.xyz);
    //Instruction 5757
    //MOV
    t29 = vs_TEXCOORD7;
    t29 = clamp(t29, 0.0, 1.0);
    //Instruction 5758
    //MAD
    t5.xyz = vec3(t29) * t16_5.xyz + unity_FogColor.xyz;
    //Instruction 5759
    //MOV
    SV_Target0.xyz = t5.xyz;
    //Instruction 5760
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 5761
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_NORMALMAP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_NORMALMAP" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_NORMALMAP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_NORMALMAP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_NORMALMAP" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_NORMALMAP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3"
}
}
 }
 Pass {
  Name "FORWARD_DELTA"
  Tags { "LIGHTMODE"="ForwardAdd" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  ZWrite Off
  Fog {
   Color (0,0,0,0)
  }
  Blend [_SrcBlend] One
  GpuProgramID 456985
Program "vp" {
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp vec3 lightDir_5;
  highp mat3 tangentToWorld_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex);
  tmpvar_7 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_14;
  n_14 = (tmpvar_11.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  highp vec3 dir_20;
  dir_20 = tmpvar_4.xyz;
  highp mat3 tmpvar_21;
  tmpvar_21[0] = _Object2World[0].xyz;
  tmpvar_21[1] = _Object2World[1].xyz;
  tmpvar_21[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = normalize((tmpvar_21 * dir_20));
  tmpvar_22.w = tmpvar_4.w;
  highp vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22.www;
  mediump vec3 normal_24;
  normal_24 = tmpvar_19;
  mediump vec3 tangent_25;
  tangent_25 = tmpvar_22.xyz;
  mediump vec3 flip_26;
  flip_26 = tmpvar_23;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (((normal_24.yzx * tangent_25.zxy) - (normal_24.zxy * tangent_25.yzx)) * flip_26);
  mediump mat3 tmpvar_28;
  tmpvar_28[0].x = tangent_25.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = normal_24.x;
  tmpvar_28[1].x = tangent_25.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = normal_24.y;
  tmpvar_28[2].x = tangent_25.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = normal_24.z;
  tangentToWorld_6 = tmpvar_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_6[0].x;
  v_29.y = tangentToWorld_6[1].x;
  v_29.z = tangentToWorld_6[2].x;
  tmpvar_8.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_6[0].y;
  v_30.y = tangentToWorld_6[1].y;
  v_30.z = tangentToWorld_6[2].y;
  tmpvar_9.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_6[0].z;
  v_31.y = tangentToWorld_6[1].z;
  v_31.z = tangentToWorld_6[2].z;
  tmpvar_10.xyz = v_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (_WorldSpaceLightPos0.xyz - (tmpvar_11.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 n_33;
  n_33 = tmpvar_32;
  mediump vec3 tmpvar_34;
  tmpvar_34 = normalize(n_33);
  lightDir_5 = tmpvar_34;
  tmpvar_8.w = lightDir_5.x;
  tmpvar_9.w = lightDir_5.y;
  tmpvar_10.w = lightDir_5.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = normalize(n_14);
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD2_1 = tmpvar_9;
  xlv_TEXCOORD2_2 = tmpvar_10;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _LightTexture0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  highp float tmpvar_5;
  tmpvar_5 = dot (xlv_TEXCOORD5, xlv_TEXCOORD5);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightTexture0, vec2(tmpvar_5));
  mediump float atten_7;
  atten_7 = tmpvar_6.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _LightColor0.xyz;
  tmpvar_8 = (tmpvar_8 * atten_7);
  mediump vec3 viewDir_9;
  viewDir_9 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_10;
  tmpvar_10.x = dot ((viewDir_9 - (2.0 * 
    (dot (tmpvar_1, viewDir_9) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_10.y = (1.0 - clamp (dot (tmpvar_1, viewDir_9), 0.0, 1.0));
  mediump vec2 tmpvar_11;
  tmpvar_11.x = ((tmpvar_10 * tmpvar_10) * (tmpvar_10 * tmpvar_10)).x;
  tmpvar_11.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_NHxRoughness, tmpvar_11);
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_12.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic)))
  ) * tmpvar_8) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  mediump vec4 xlat_varoutput_14;
  xlat_varoutput_14.xyz = tmpvar_13.xyz;
  xlat_varoutput_14.w = 1.0;
  gl_FragData[0] = xlat_varoutput_14;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 5453
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 5454
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 5455
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 5456
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 5457
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 5458
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 5459
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 5460
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 5461
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 5462
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 5463
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 5464
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 5465
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 5466
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 5467
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 5468
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 5469
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 5470
    //DP3
    t16_2.x = dot(t0.xyz, t0.xyz);
    //Instruction 5471
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 5472
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xxx;
    //Instruction 5473
    //MOV
    vs_TEXCOORD2.w = t16_2.x;
    //Instruction 5474
    //MUL
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 5475
    //MAD
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    //Instruction 5476
    //MAD
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    //Instruction 5477
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 5478
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 5479
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 5480
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 5481
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 5482
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 5483
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 5484
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 5485
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 5486
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 5487
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 5488
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 5489
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 5490
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 5491
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 5492
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 5493
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 5494
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 5495
    //MUL
    t16_4.xyz = t0.yzx * t1.zxy;
    //Instruction 5496
    //MAD
    t16_4.xyz = t1.yzx * t0.zxy + (-t16_4.xyz);
    //Instruction 5497
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 5498
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 5499
    //MOV
    vs_TEXCOORD3.w = t16_2.y;
    //Instruction 5500
    //MOV
    vs_TEXCOORD4.w = t16_2.z;
    //Instruction 5501
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 5502
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 5503
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 5504
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 5505
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 5506
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 5507
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 5508
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 5509
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 5510
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 5511
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 5512
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 5513
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 5514
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 5515
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 5516
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 5517
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 5518
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 5519
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 5520
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D unity_NHxRoughness;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
highp float t3;
mediump float t16_3;
lowp float t10_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
lowp vec3 t10_7;
mediump float t16_12;
void main()
{
    //Instruction 5423
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 5424
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 5425
    //MUL
    t16_0.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 5426
    //DP3
    t16_12 = dot((-vs_TEXCOORD1.xyz), t16_0.xyz);
    //Instruction 5427
    //ADD
    t16_12 = t16_12 + t16_12;
    //Instruction 5428
    //MAD
    t16_1.xyz = t16_0.xyz * (-vec3(t16_12)) + (-vs_TEXCOORD1.xyz);
    //Instruction 5429
    //MOV
    t16_2.x = vs_TEXCOORD2.w;
    //Instruction 5430
    //MOV
    t16_2.y = vs_TEXCOORD3.w;
    //Instruction 5431
    //MOV
    t16_2.z = vs_TEXCOORD4.w;
    //Instruction 5432
    //DP3
    t16_12 = dot(t16_1.xyz, t16_2.xyz);
    //Instruction 5433
    //DP3
    t16_0.x = dot(t16_0.xyz, t16_2.xyz);
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 5434
    //MUL
    t16_4.x = t16_12 * t16_12;
    //Instruction 5435
    //MUL
    t16_1.x = t16_4.x * t16_4.x;
    //Instruction 5436
    //ADD
    t16_1.y = (-_Glossiness) + 1.0;
    //Instruction 5437
    //SAMPLE
    t10_3 = texture(unity_NHxRoughness, t16_1.xy).w;
    //Instruction 5438
    //MUL
    t16_3 = t10_3 * 16.000000;
    //Instruction 5439
    //SAMPLE
    t10_7.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 5440
    //MAD
    t16_4.xyz = _Color.xyz * t10_7.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 5441
    //MUL
    t16_7.xyz = t10_7.xyz * _Color.xyz;
    //Instruction 5442
    //MAD
    t16_4.xyz = vec3(_Metallic) * t16_4.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 5443
    //MUL
    t16_4.xyz = t16_4.xyz * vec3(t16_3);
    //Instruction 5444
    //MAD
    t16_1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 5445
    //MAD
    t16_4.xyz = t16_7.xyz * t16_1.xxx + t16_4.xyz;
    //Instruction 5446
    //DP3
    t3 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 5447
    //SAMPLE
    t10_3 = texture(_LightTexture0, vec2(t3)).w;
    //Instruction 5448
    //MUL
    t16_1.xyz = vec3(t10_3) * _LightColor0.xyz;
    //Instruction 5449
    //MUL
    t16_4.xyz = t16_4.xyz * t16_1.xyz;
    //Instruction 5450
    //MUL
    SV_Target0.xyz = t16_0.xxx * t16_4.xyz;
    //Instruction 5451
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 5452
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp mat3 tangentToWorld_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  tmpvar_6 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_13;
  n_13 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_14;
  norm_14 = tmpvar_1;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  highp vec3 dir_19;
  dir_19 = tmpvar_4.xyz;
  highp mat3 tmpvar_20;
  tmpvar_20[0] = _Object2World[0].xyz;
  tmpvar_20[1] = _Object2World[1].xyz;
  tmpvar_20[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_21;
  tmpvar_21.xyz = normalize((tmpvar_20 * dir_19));
  tmpvar_21.w = tmpvar_4.w;
  highp vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21.www;
  mediump vec3 normal_23;
  normal_23 = tmpvar_18;
  mediump vec3 tangent_24;
  tangent_24 = tmpvar_21.xyz;
  mediump vec3 flip_25;
  flip_25 = tmpvar_22;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (((normal_23.yzx * tangent_24.zxy) - (normal_23.zxy * tangent_24.yzx)) * flip_25);
  mediump mat3 tmpvar_27;
  tmpvar_27[0].x = tangent_24.x;
  tmpvar_27[0].y = tmpvar_26.x;
  tmpvar_27[0].z = normal_23.x;
  tmpvar_27[1].x = tangent_24.y;
  tmpvar_27[1].y = tmpvar_26.y;
  tmpvar_27[1].z = normal_23.y;
  tmpvar_27[2].x = tangent_24.z;
  tmpvar_27[2].y = tmpvar_26.z;
  tmpvar_27[2].z = normal_23.z;
  tangentToWorld_5 = tmpvar_27;
  highp vec3 v_28;
  v_28.x = tangentToWorld_5[0].x;
  v_28.y = tangentToWorld_5[1].x;
  v_28.z = tangentToWorld_5[2].x;
  tmpvar_7.xyz = v_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_5[0].y;
  v_29.y = tangentToWorld_5[1].y;
  v_29.z = tangentToWorld_5[2].y;
  tmpvar_8.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_5[0].z;
  v_30.y = tangentToWorld_5[1].z;
  v_30.z = tangentToWorld_5[2].z;
  tmpvar_9.xyz = v_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  tmpvar_7.w = tmpvar_31.x;
  tmpvar_8.w = tmpvar_31.y;
  tmpvar_9.w = tmpvar_31.z;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = normalize(n_13);
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD2_1 = tmpvar_8;
  xlv_TEXCOORD2_2 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  mediump vec3 tmpvar_5;
  tmpvar_5 = _LightColor0.xyz;
  mediump vec3 viewDir_6;
  viewDir_6 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_7;
  tmpvar_7.x = dot ((viewDir_6 - (2.0 * 
    (dot (tmpvar_1, viewDir_6) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_7.y = (1.0 - clamp (dot (tmpvar_1, viewDir_6), 0.0, 1.0));
  mediump vec2 tmpvar_8;
  tmpvar_8.x = ((tmpvar_7 * tmpvar_7) * (tmpvar_7 * tmpvar_7)).x;
  tmpvar_8.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (unity_NHxRoughness, tmpvar_8);
  mediump vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_9.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic)))
  ) * tmpvar_5) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  mediump vec4 xlat_varoutput_11;
  xlat_varoutput_11.xyz = tmpvar_10.xyz;
  xlat_varoutput_11.w = 1.0;
  gl_FragData[0] = xlat_varoutput_11;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
mediump vec3 t16_5;
void main()
{
    //Instruction 5881
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 5882
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 5883
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 5884
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 5885
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 5886
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 5887
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 5888
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 5889
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 5890
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 5891
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 5892
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 5893
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 5894
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 5895
    //DP3
    t16_2 = dot(t1.xyz, t1.xyz);
    //Instruction 5896
    //RSQ
    t16_2 = inversesqrt(t16_2);
    //Instruction 5897
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * vec3(t16_2);
    //Instruction 5898
    //MOV
    t1.w = t0.x;
    //Instruction 5899
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 5900
    //MAD
    t3.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t3.xyz;
    //Instruction 5901
    //MAD
    t3.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t3.xyz;
    //Instruction 5902
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 5903
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 5904
    //MUL
    t1.xyz = t0.xxx * t3.xyz;
    //Instruction 5905
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 5906
    //MUL
    t3.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 5907
    //MUL
    t3.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 5908
    //MUL
    t3.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 5909
    //MUL
    t4.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 5910
    //MUL
    t4.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 5911
    //MUL
    t4.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 5912
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 5913
    //MUL
    t4.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 5914
    //MUL
    t4.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 5915
    //MUL
    t4.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 5916
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 5917
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 5918
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 5919
    //MUL
    t2.xyz = t0.xxx * t3.xyz;
    //Instruction 5920
    //MUL
    t16_5.xyz = t1.yzx * t2.zxy;
    //Instruction 5921
    //MAD
    t16_5.xyz = t2.yzx * t1.zxy + (-t16_5.xyz);
    //Instruction 5922
    //MUL
    vs_TEXCOORD3.xyz = t16_5.xyz * in_TANGENT0.www;
    //Instruction 5923
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 5924
    //MOV
    t2.w = t0.z;
    //Instruction 5925
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 5926
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D unity_NHxRoughness;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
mediump float t16_3;
lowp float t10_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
lowp vec3 t10_7;
mediump float t16_12;
void main()
{
    //Instruction 5854
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 5855
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 5856
    //MUL
    t16_0.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 5857
    //DP3
    t16_12 = dot((-vs_TEXCOORD1.xyz), t16_0.xyz);
    //Instruction 5858
    //ADD
    t16_12 = t16_12 + t16_12;
    //Instruction 5859
    //MAD
    t16_1.xyz = t16_0.xyz * (-vec3(t16_12)) + (-vs_TEXCOORD1.xyz);
    //Instruction 5860
    //MOV
    t16_2.x = vs_TEXCOORD2.w;
    //Instruction 5861
    //MOV
    t16_2.y = vs_TEXCOORD3.w;
    //Instruction 5862
    //MOV
    t16_2.z = vs_TEXCOORD4.w;
    //Instruction 5863
    //DP3
    t16_12 = dot(t16_1.xyz, t16_2.xyz);
    //Instruction 5864
    //DP3
    t16_0.x = dot(t16_0.xyz, t16_2.xyz);
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 5865
    //MUL
    t16_4.x = t16_12 * t16_12;
    //Instruction 5866
    //MUL
    t16_1.x = t16_4.x * t16_4.x;
    //Instruction 5867
    //ADD
    t16_1.y = (-_Glossiness) + 1.0;
    //Instruction 5868
    //SAMPLE
    t10_3 = texture(unity_NHxRoughness, t16_1.xy).w;
    //Instruction 5869
    //MUL
    t16_3 = t10_3 * 16.000000;
    //Instruction 5870
    //SAMPLE
    t10_7.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 5871
    //MAD
    t16_4.xyz = _Color.xyz * t10_7.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 5872
    //MUL
    t16_7.xyz = t10_7.xyz * _Color.xyz;
    //Instruction 5873
    //MAD
    t16_4.xyz = vec3(_Metallic) * t16_4.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 5874
    //MUL
    t16_4.xyz = t16_4.xyz * vec3(t16_3);
    //Instruction 5875
    //MAD
    t16_1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 5876
    //MAD
    t16_4.xyz = t16_7.xyz * t16_1.xxx + t16_4.xyz;
    //Instruction 5877
    //MUL
    t16_4.xyz = t16_4.xyz * _LightColor0.xyz;
    //Instruction 5878
    //MUL
    SV_Target0.xyz = t16_0.xxx * t16_4.xyz;
    //Instruction 5879
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 5880
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp vec3 lightDir_5;
  highp mat3 tangentToWorld_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  tmpvar_7 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_15;
  n_15 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp vec4 v_17;
  v_17.x = _World2Object[0].x;
  v_17.y = _World2Object[1].x;
  v_17.z = _World2Object[2].x;
  v_17.w = _World2Object[3].x;
  highp vec4 v_18;
  v_18.x = _World2Object[0].y;
  v_18.y = _World2Object[1].y;
  v_18.z = _World2Object[2].y;
  v_18.w = _World2Object[3].y;
  highp vec4 v_19;
  v_19.x = _World2Object[0].z;
  v_19.y = _World2Object[1].z;
  v_19.z = _World2Object[2].z;
  v_19.w = _World2Object[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(((
    (v_17.xyz * norm_16.x)
   + 
    (v_18.xyz * norm_16.y)
  ) + (v_19.xyz * norm_16.z)));
  highp vec3 dir_21;
  dir_21 = tmpvar_4.xyz;
  highp mat3 tmpvar_22;
  tmpvar_22[0] = _Object2World[0].xyz;
  tmpvar_22[1] = _Object2World[1].xyz;
  tmpvar_22[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_23;
  tmpvar_23.xyz = normalize((tmpvar_22 * dir_21));
  tmpvar_23.w = tmpvar_4.w;
  highp vec3 tmpvar_24;
  tmpvar_24 = tmpvar_23.www;
  mediump vec3 normal_25;
  normal_25 = tmpvar_20;
  mediump vec3 tangent_26;
  tangent_26 = tmpvar_23.xyz;
  mediump vec3 flip_27;
  flip_27 = tmpvar_24;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (((normal_25.yzx * tangent_26.zxy) - (normal_25.zxy * tangent_26.yzx)) * flip_27);
  mediump mat3 tmpvar_29;
  tmpvar_29[0].x = tangent_26.x;
  tmpvar_29[0].y = tmpvar_28.x;
  tmpvar_29[0].z = normal_25.x;
  tmpvar_29[1].x = tangent_26.y;
  tmpvar_29[1].y = tmpvar_28.y;
  tmpvar_29[1].z = normal_25.y;
  tmpvar_29[2].x = tangent_26.z;
  tmpvar_29[2].y = tmpvar_28.z;
  tmpvar_29[2].z = normal_25.z;
  tangentToWorld_6 = tmpvar_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_6[0].x;
  v_30.y = tangentToWorld_6[1].x;
  v_30.z = tangentToWorld_6[2].x;
  tmpvar_8.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_6[0].y;
  v_31.y = tangentToWorld_6[1].y;
  v_31.z = tangentToWorld_6[2].y;
  tmpvar_9.xyz = v_31;
  highp vec3 v_32;
  v_32.x = tangentToWorld_6[0].z;
  v_32.y = tangentToWorld_6[1].z;
  v_32.z = tangentToWorld_6[2].z;
  tmpvar_10.xyz = v_32;
  tmpvar_11 = (_LightMatrix0 * (_Object2World * _glesVertex));
  highp vec3 tmpvar_33;
  tmpvar_33 = (_WorldSpaceLightPos0.xyz - (tmpvar_12.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 n_34;
  n_34 = tmpvar_33;
  mediump vec3 tmpvar_35;
  tmpvar_35 = normalize(n_34);
  lightDir_5 = tmpvar_35;
  tmpvar_8.w = lightDir_5.x;
  tmpvar_9.w = lightDir_5.y;
  tmpvar_10.w = lightDir_5.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = normalize(n_15);
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD2_1 = tmpvar_9;
  xlv_TEXCOORD2_2 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_5;
  mediump vec2 P_6;
  P_6 = ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5);
  tmpvar_5 = texture2D (_LightTexture0, P_6);
  highp vec3 LightCoord_7;
  LightCoord_7 = xlv_TEXCOORD5.xyz;
  highp float tmpvar_8;
  tmpvar_8 = dot (LightCoord_7, LightCoord_7);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LightTextureB0, vec2(tmpvar_8));
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  tmpvar_10 = (tmpvar_10 * ((
    float((xlv_TEXCOORD5.z > 0.0))
   * tmpvar_5.w) * tmpvar_9.w));
  mediump vec3 viewDir_11;
  viewDir_11 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_12;
  tmpvar_12.x = dot ((viewDir_11 - (2.0 * 
    (dot (tmpvar_1, viewDir_11) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_12.y = (1.0 - clamp (dot (tmpvar_1, viewDir_11), 0.0, 1.0));
  mediump vec2 tmpvar_13;
  tmpvar_13.x = ((tmpvar_12 * tmpvar_12) * (tmpvar_12 * tmpvar_12)).x;
  tmpvar_13.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_NHxRoughness, tmpvar_13);
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_14.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic)))
  ) * tmpvar_10) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  mediump vec4 xlat_varoutput_16;
  xlat_varoutput_16.xyz = tmpvar_15.xyz;
  xlat_varoutput_16.w = 1.0;
  gl_FragData[0] = xlat_varoutput_16;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 5558
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 5559
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 5560
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 5561
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 5562
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 5563
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 5564
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 5565
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 5566
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 5567
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 5568
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 5569
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 5570
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 5571
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 5572
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 5573
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 5574
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 5575
    //DP3
    t16_2.x = dot(t0.xyz, t0.xyz);
    //Instruction 5576
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 5577
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xxx;
    //Instruction 5578
    //MOV
    vs_TEXCOORD2.w = t16_2.x;
    //Instruction 5579
    //MUL
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 5580
    //MAD
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    //Instruction 5581
    //MAD
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    //Instruction 5582
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 5583
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 5584
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 5585
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 5586
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 5587
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 5588
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 5589
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 5590
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 5591
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 5592
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 5593
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 5594
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 5595
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 5596
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 5597
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 5598
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 5599
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 5600
    //MUL
    t16_4.xyz = t0.yzx * t1.zxy;
    //Instruction 5601
    //MAD
    t16_4.xyz = t1.yzx * t0.zxy + (-t16_4.xyz);
    //Instruction 5602
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 5603
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 5604
    //MOV
    vs_TEXCOORD3.w = t16_2.y;
    //Instruction 5605
    //MOV
    vs_TEXCOORD4.w = t16_2.z;
    //Instruction 5606
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 5607
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 5608
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 5609
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 5610
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 5611
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 5612
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 5613
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 5614
    //DP4
    t0.x = dot(t16_0, t1);
    //Instruction 5615
    //MOV
    t16_2.x = _LightMatrix0[0].y;
    //Instruction 5616
    //MOV
    t16_2.y = _LightMatrix0[1].y;
    //Instruction 5617
    //MOV
    t16_2.z = _LightMatrix0[2].y;
    //Instruction 5618
    //MOV
    t16_2.w = _LightMatrix0[3].y;
    //Instruction 5619
    //DP4
    t0.y = dot(t16_2, t1);
    //Instruction 5620
    //MOV
    t16_2.x = _LightMatrix0[0].z;
    //Instruction 5621
    //MOV
    t16_2.y = _LightMatrix0[1].z;
    //Instruction 5622
    //MOV
    t16_2.z = _LightMatrix0[2].z;
    //Instruction 5623
    //MOV
    t16_2.w = _LightMatrix0[3].z;
    //Instruction 5624
    //DP4
    t0.z = dot(t16_2, t1);
    //Instruction 5625
    //MOV
    t16_2.x = _LightMatrix0[0].w;
    //Instruction 5626
    //MOV
    t16_2.y = _LightMatrix0[1].w;
    //Instruction 5627
    //MOV
    t16_2.z = _LightMatrix0[2].w;
    //Instruction 5628
    //MOV
    t16_2.w = _LightMatrix0[3].w;
    //Instruction 5629
    //DP4
    t0.w = dot(t16_2, t1);
    //Instruction 5630
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 5631
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2D unity_NHxRoughness;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump float t16_1;
lowp float t10_1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_7;
lowp vec3 t10_7;
bool tb7;
mediump vec3 t16_9;
mediump float t16_18;
void main()
{
    //Instruction 5521
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    //Instruction 5522
    //ADD
    t16_0.xy = t16_0.xy + vec2(0.500000, 0.500000);
    //Instruction 5523
    //SAMPLE
    t10_1 = texture(_LightTexture0, t16_0.xy).w;
    //Instruction 5524
    //LT
    tb7 = 0.0<vs_TEXCOORD5.z;
    //Instruction 5525
    //MOVC
    t10_2 = (tb7) ? 1.0 : 0.0;
    //Instruction 5526
    //MUL
    t10_2 = t10_1 * t10_2;
    //Instruction 5527
    //DP3
    t16_1 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 5528
    //SAMPLE
    t10_1 = texture(_LightTextureB0, vec2(t16_1)).w;
    //Instruction 5529
    //MUL
    t10_2 = t10_1 * t10_2;
    //Instruction 5530
    //MUL
    t16_0.xyz = vec3(t10_2) * _LightColor0.xyz;
    //Instruction 5531
    //DP3
    t16_18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 5532
    //RSQ
    t16_18 = inversesqrt(t16_18);
    //Instruction 5533
    //MUL
    t16_3.xyz = vec3(t16_18) * vs_TEXCOORD4.xyz;
    //Instruction 5534
    //DP3
    t16_18 = dot((-vs_TEXCOORD1.xyz), t16_3.xyz);
    //Instruction 5535
    //ADD
    t16_18 = t16_18 + t16_18;
    //Instruction 5536
    //MAD
    t16_4.xyz = t16_3.xyz * (-vec3(t16_18)) + (-vs_TEXCOORD1.xyz);
    //Instruction 5537
    //MOV
    t16_5.x = vs_TEXCOORD2.w;
    //Instruction 5538
    //MOV
    t16_5.y = vs_TEXCOORD3.w;
    //Instruction 5539
    //MOV
    t16_5.z = vs_TEXCOORD4.w;
    //Instruction 5540
    //DP3
    t16_18 = dot(t16_4.xyz, t16_5.xyz);
    //Instruction 5541
    //DP3
    t16_3.x = dot(t16_3.xyz, t16_5.xyz);
    t16_3.x = clamp(t16_3.x, 0.0, 1.0);
    //Instruction 5542
    //MUL
    t16_18 = t16_18 * t16_18;
    //Instruction 5543
    //MUL
    t16_4.x = t16_18 * t16_18;
    //Instruction 5544
    //ADD
    t16_4.y = (-_Glossiness) + 1.0;
    //Instruction 5545
    //SAMPLE
    t10_1 = texture(unity_NHxRoughness, t16_4.xy).w;
    //Instruction 5546
    //MUL
    t16_1 = t10_1 * 16.000000;
    //Instruction 5547
    //SAMPLE
    t10_7.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 5548
    //MAD
    t16_9.xyz = _Color.xyz * t10_7.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 5549
    //MUL
    t16_7.xyz = t10_7.xyz * _Color.xyz;
    //Instruction 5550
    //MAD
    t16_9.xyz = vec3(_Metallic) * t16_9.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 5551
    //MUL
    t16_9.xyz = vec3(t16_1) * t16_9.xyz;
    //Instruction 5552
    //MAD
    t16_18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 5553
    //MAD
    t16_9.xyz = t16_7.xyz * vec3(t16_18) + t16_9.xyz;
    //Instruction 5554
    //MUL
    t16_0.xyz = t16_0.xyz * t16_9.xyz;
    //Instruction 5555
    //MUL
    SV_Target0.xyz = t16_3.xxx * t16_0.xyz;
    //Instruction 5556
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 5557
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp vec3 lightDir_5;
  highp mat3 tangentToWorld_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex);
  tmpvar_7 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_14;
  n_14 = (tmpvar_11.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  highp vec3 dir_20;
  dir_20 = tmpvar_4.xyz;
  highp mat3 tmpvar_21;
  tmpvar_21[0] = _Object2World[0].xyz;
  tmpvar_21[1] = _Object2World[1].xyz;
  tmpvar_21[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = normalize((tmpvar_21 * dir_20));
  tmpvar_22.w = tmpvar_4.w;
  highp vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22.www;
  mediump vec3 normal_24;
  normal_24 = tmpvar_19;
  mediump vec3 tangent_25;
  tangent_25 = tmpvar_22.xyz;
  mediump vec3 flip_26;
  flip_26 = tmpvar_23;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (((normal_24.yzx * tangent_25.zxy) - (normal_24.zxy * tangent_25.yzx)) * flip_26);
  mediump mat3 tmpvar_28;
  tmpvar_28[0].x = tangent_25.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = normal_24.x;
  tmpvar_28[1].x = tangent_25.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = normal_24.y;
  tmpvar_28[2].x = tangent_25.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = normal_24.z;
  tangentToWorld_6 = tmpvar_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_6[0].x;
  v_29.y = tangentToWorld_6[1].x;
  v_29.z = tangentToWorld_6[2].x;
  tmpvar_8.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_6[0].y;
  v_30.y = tangentToWorld_6[1].y;
  v_30.z = tangentToWorld_6[2].y;
  tmpvar_9.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_6[0].z;
  v_31.y = tangentToWorld_6[1].z;
  v_31.z = tangentToWorld_6[2].z;
  tmpvar_10.xyz = v_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (_WorldSpaceLightPos0.xyz - (tmpvar_11.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 n_33;
  n_33 = tmpvar_32;
  mediump vec3 tmpvar_34;
  tmpvar_34 = normalize(n_33);
  lightDir_5 = tmpvar_34;
  tmpvar_8.w = lightDir_5.x;
  tmpvar_9.w = lightDir_5.y;
  tmpvar_10.w = lightDir_5.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = normalize(n_14);
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD2_1 = tmpvar_9;
  xlv_TEXCOORD2_2 = tmpvar_10;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  highp float tmpvar_5;
  tmpvar_5 = dot (xlv_TEXCOORD5, xlv_TEXCOORD5);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightTextureB0, vec2(tmpvar_5));
  lowp vec4 tmpvar_7;
  tmpvar_7 = textureCube (_LightTexture0, xlv_TEXCOORD5);
  mediump float atten_8;
  atten_8 = (tmpvar_6.w * tmpvar_7.w);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  tmpvar_9 = (tmpvar_9 * atten_8);
  mediump vec3 viewDir_10;
  viewDir_10 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_11;
  tmpvar_11.x = dot ((viewDir_10 - (2.0 * 
    (dot (tmpvar_1, viewDir_10) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_11.y = (1.0 - clamp (dot (tmpvar_1, viewDir_10), 0.0, 1.0));
  mediump vec2 tmpvar_12;
  tmpvar_12.x = ((tmpvar_11 * tmpvar_11) * (tmpvar_11 * tmpvar_11)).x;
  tmpvar_12.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (unity_NHxRoughness, tmpvar_12);
  mediump vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_13.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic)))
  ) * tmpvar_9) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  mediump vec4 xlat_varoutput_15;
  xlat_varoutput_15.xyz = tmpvar_14.xyz;
  xlat_varoutput_15.w = 1.0;
  gl_FragData[0] = xlat_varoutput_15;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 5959
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 5960
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 5961
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 5962
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 5963
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 5964
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 5965
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 5966
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 5967
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 5968
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 5969
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 5970
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 5971
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 5972
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 5973
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 5974
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 5975
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 5976
    //DP3
    t16_2.x = dot(t0.xyz, t0.xyz);
    //Instruction 5977
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 5978
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xxx;
    //Instruction 5979
    //MOV
    vs_TEXCOORD2.w = t16_2.x;
    //Instruction 5980
    //MUL
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 5981
    //MAD
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    //Instruction 5982
    //MAD
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    //Instruction 5983
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 5984
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 5985
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 5986
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 5987
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 5988
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 5989
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 5990
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 5991
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 5992
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 5993
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 5994
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 5995
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 5996
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 5997
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 5998
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 5999
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 6000
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 6001
    //MUL
    t16_4.xyz = t0.yzx * t1.zxy;
    //Instruction 6002
    //MAD
    t16_4.xyz = t1.yzx * t0.zxy + (-t16_4.xyz);
    //Instruction 6003
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 6004
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 6005
    //MOV
    vs_TEXCOORD3.w = t16_2.y;
    //Instruction 6006
    //MOV
    vs_TEXCOORD4.w = t16_2.z;
    //Instruction 6007
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 6008
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 6009
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 6010
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 6011
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 6012
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 6013
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 6014
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 6015
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 6016
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 6017
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 6018
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 6019
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 6020
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 6021
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 6022
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 6023
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 6024
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 6025
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 6026
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform lowp sampler2D unity_NHxRoughness;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
highp float t0;
mediump float t16_0;
lowp float t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
lowp vec3 t10_5;
mediump vec3 t16_7;
mediump float t16_16;
void main()
{
    //Instruction 5927
    //DP3
    t0 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 5928
    //SAMPLE
    t10_0 = texture(_LightTextureB0, vec2(t0)).w;
    //Instruction 5929
    //SAMPLE
    t10_5.x = texture(_LightTexture0, vs_TEXCOORD5.xyz).w;
    //Instruction 5930
    //MUL
    t16_0 = t10_5.x * t10_0;
    //Instruction 5931
    //MUL
    t16_1.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 5932
    //DP3
    t16_16 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 5933
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 5934
    //MUL
    t16_2.xyz = vec3(t16_16) * vs_TEXCOORD4.xyz;
    //Instruction 5935
    //DP3
    t16_16 = dot((-vs_TEXCOORD1.xyz), t16_2.xyz);
    //Instruction 5936
    //ADD
    t16_16 = t16_16 + t16_16;
    //Instruction 5937
    //MAD
    t16_3.xyz = t16_2.xyz * (-vec3(t16_16)) + (-vs_TEXCOORD1.xyz);
    //Instruction 5938
    //MOV
    t16_4.x = vs_TEXCOORD2.w;
    //Instruction 5939
    //MOV
    t16_4.y = vs_TEXCOORD3.w;
    //Instruction 5940
    //MOV
    t16_4.z = vs_TEXCOORD4.w;
    //Instruction 5941
    //DP3
    t16_16 = dot(t16_3.xyz, t16_4.xyz);
    //Instruction 5942
    //DP3
    t16_2.x = dot(t16_2.xyz, t16_4.xyz);
    t16_2.x = clamp(t16_2.x, 0.0, 1.0);
    //Instruction 5943
    //MUL
    t16_16 = t16_16 * t16_16;
    //Instruction 5944
    //MUL
    t16_3.x = t16_16 * t16_16;
    //Instruction 5945
    //ADD
    t16_3.y = (-_Glossiness) + 1.0;
    //Instruction 5946
    //SAMPLE
    t10_0 = texture(unity_NHxRoughness, t16_3.xy).w;
    //Instruction 5947
    //MUL
    t16_0 = t10_0 * 16.000000;
    //Instruction 5948
    //SAMPLE
    t10_5.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 5949
    //MAD
    t16_7.xyz = _Color.xyz * t10_5.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 5950
    //MUL
    t16_5.xyz = t10_5.xyz * _Color.xyz;
    //Instruction 5951
    //MAD
    t16_7.xyz = vec3(_Metallic) * t16_7.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 5952
    //MUL
    t16_7.xyz = vec3(t16_0) * t16_7.xyz;
    //Instruction 5953
    //MAD
    t16_16 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 5954
    //MAD
    t16_7.xyz = t16_5.xyz * vec3(t16_16) + t16_7.xyz;
    //Instruction 5955
    //MUL
    t16_1.xyz = t16_1.xyz * t16_7.xyz;
    //Instruction 5956
    //MUL
    SV_Target0.xyz = t16_2.xxx * t16_1.xyz;
    //Instruction 5957
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 5958
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec2 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp mat3 tangentToWorld_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  tmpvar_6 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_13;
  n_13 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_14;
  norm_14 = tmpvar_1;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  highp vec3 dir_19;
  dir_19 = tmpvar_4.xyz;
  highp mat3 tmpvar_20;
  tmpvar_20[0] = _Object2World[0].xyz;
  tmpvar_20[1] = _Object2World[1].xyz;
  tmpvar_20[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_21;
  tmpvar_21.xyz = normalize((tmpvar_20 * dir_19));
  tmpvar_21.w = tmpvar_4.w;
  highp vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21.www;
  mediump vec3 normal_23;
  normal_23 = tmpvar_18;
  mediump vec3 tangent_24;
  tangent_24 = tmpvar_21.xyz;
  mediump vec3 flip_25;
  flip_25 = tmpvar_22;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (((normal_23.yzx * tangent_24.zxy) - (normal_23.zxy * tangent_24.yzx)) * flip_25);
  mediump mat3 tmpvar_27;
  tmpvar_27[0].x = tangent_24.x;
  tmpvar_27[0].y = tmpvar_26.x;
  tmpvar_27[0].z = normal_23.x;
  tmpvar_27[1].x = tangent_24.y;
  tmpvar_27[1].y = tmpvar_26.y;
  tmpvar_27[1].z = normal_23.y;
  tmpvar_27[2].x = tangent_24.z;
  tmpvar_27[2].y = tmpvar_26.z;
  tmpvar_27[2].z = normal_23.z;
  tangentToWorld_5 = tmpvar_27;
  highp vec3 v_28;
  v_28.x = tangentToWorld_5[0].x;
  v_28.y = tangentToWorld_5[1].x;
  v_28.z = tangentToWorld_5[2].x;
  tmpvar_7.xyz = v_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_5[0].y;
  v_29.y = tangentToWorld_5[1].y;
  v_29.z = tangentToWorld_5[2].y;
  tmpvar_8.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_5[0].z;
  v_30.y = tangentToWorld_5[1].z;
  v_30.z = tangentToWorld_5[2].z;
  tmpvar_9.xyz = v_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  tmpvar_7.w = tmpvar_31.x;
  tmpvar_8.w = tmpvar_31.y;
  tmpvar_9.w = tmpvar_31.z;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = normalize(n_13);
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD2_1 = tmpvar_8;
  xlv_TEXCOORD2_2 = tmpvar_9;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _LightTexture0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec2 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightTexture0, xlv_TEXCOORD5);
  mediump float atten_6;
  atten_6 = tmpvar_5.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _LightColor0.xyz;
  tmpvar_7 = (tmpvar_7 * atten_6);
  mediump vec3 viewDir_8;
  viewDir_8 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_9;
  tmpvar_9.x = dot ((viewDir_8 - (2.0 * 
    (dot (tmpvar_1, viewDir_8) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_9.y = (1.0 - clamp (dot (tmpvar_1, viewDir_8), 0.0, 1.0));
  mediump vec2 tmpvar_10;
  tmpvar_10.x = ((tmpvar_9 * tmpvar_9) * (tmpvar_9 * tmpvar_9)).x;
  tmpvar_10.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_NHxRoughness, tmpvar_10);
  mediump vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_11.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic)))
  ) * tmpvar_7) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  mediump vec4 xlat_varoutput_13;
  xlat_varoutput_13.xyz = tmpvar_12.xyz;
  xlat_varoutput_13.w = 1.0;
  gl_FragData[0] = xlat_varoutput_13;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
mediump vec3 t16_5;
void main()
{
    //Instruction 5661
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 5662
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 5663
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 5664
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 5665
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 5666
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 5667
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 5668
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 5669
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 5670
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 5671
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 5672
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 5673
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 5674
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 5675
    //DP3
    t16_2 = dot(t1.xyz, t1.xyz);
    //Instruction 5676
    //RSQ
    t16_2 = inversesqrt(t16_2);
    //Instruction 5677
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * vec3(t16_2);
    //Instruction 5678
    //MOV
    t1.w = t0.x;
    //Instruction 5679
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 5680
    //MAD
    t3.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t3.xyz;
    //Instruction 5681
    //MAD
    t3.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t3.xyz;
    //Instruction 5682
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 5683
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 5684
    //MUL
    t1.xyz = t0.xxx * t3.xyz;
    //Instruction 5685
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 5686
    //MUL
    t3.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 5687
    //MUL
    t3.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 5688
    //MUL
    t3.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 5689
    //MUL
    t4.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 5690
    //MUL
    t4.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 5691
    //MUL
    t4.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 5692
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 5693
    //MUL
    t4.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 5694
    //MUL
    t4.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 5695
    //MUL
    t4.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 5696
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 5697
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 5698
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 5699
    //MUL
    t2.xyz = t0.xxx * t3.xyz;
    //Instruction 5700
    //MUL
    t16_5.xyz = t1.yzx * t2.zxy;
    //Instruction 5701
    //MAD
    t16_5.xyz = t2.yzx * t1.zxy + (-t16_5.xyz);
    //Instruction 5702
    //MUL
    vs_TEXCOORD3.xyz = t16_5.xyz * in_TANGENT0.www;
    //Instruction 5703
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 5704
    //MOV
    t2.w = t0.z;
    //Instruction 5705
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 5706
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 5707
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 5708
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 5709
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 5710
    //MOV
    t16_1.x = _LightMatrix0[0].x;
    //Instruction 5711
    //MOV
    t16_1.y = _LightMatrix0[1].x;
    //Instruction 5712
    //MOV
    t16_1.z = _LightMatrix0[2].x;
    //Instruction 5713
    //MOV
    t16_1.w = _LightMatrix0[3].x;
    //Instruction 5714
    //DP4
    vs_TEXCOORD5.x = dot(t16_1, t0);
    //Instruction 5715
    //MOV
    t16_1.x = _LightMatrix0[0].y;
    //Instruction 5716
    //MOV
    t16_1.y = _LightMatrix0[1].y;
    //Instruction 5717
    //MOV
    t16_1.z = _LightMatrix0[2].y;
    //Instruction 5718
    //MOV
    t16_1.w = _LightMatrix0[3].y;
    //Instruction 5719
    //DP4
    vs_TEXCOORD5.y = dot(t16_1, t0);
    //Instruction 5720
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D unity_NHxRoughness;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
mediump float t16_3;
lowp float t10_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
lowp vec3 t10_7;
mediump float t16_12;
void main()
{
    //Instruction 5632
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 5633
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 5634
    //MUL
    t16_0.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 5635
    //DP3
    t16_12 = dot((-vs_TEXCOORD1.xyz), t16_0.xyz);
    //Instruction 5636
    //ADD
    t16_12 = t16_12 + t16_12;
    //Instruction 5637
    //MAD
    t16_1.xyz = t16_0.xyz * (-vec3(t16_12)) + (-vs_TEXCOORD1.xyz);
    //Instruction 5638
    //MOV
    t16_2.x = vs_TEXCOORD2.w;
    //Instruction 5639
    //MOV
    t16_2.y = vs_TEXCOORD3.w;
    //Instruction 5640
    //MOV
    t16_2.z = vs_TEXCOORD4.w;
    //Instruction 5641
    //DP3
    t16_12 = dot(t16_1.xyz, t16_2.xyz);
    //Instruction 5642
    //DP3
    t16_0.x = dot(t16_0.xyz, t16_2.xyz);
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 5643
    //MUL
    t16_4.x = t16_12 * t16_12;
    //Instruction 5644
    //MUL
    t16_1.x = t16_4.x * t16_4.x;
    //Instruction 5645
    //ADD
    t16_1.y = (-_Glossiness) + 1.0;
    //Instruction 5646
    //SAMPLE
    t10_3 = texture(unity_NHxRoughness, t16_1.xy).w;
    //Instruction 5647
    //MUL
    t16_3 = t10_3 * 16.000000;
    //Instruction 5648
    //SAMPLE
    t10_7.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 5649
    //MAD
    t16_4.xyz = _Color.xyz * t10_7.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 5650
    //MUL
    t16_7.xyz = t10_7.xyz * _Color.xyz;
    //Instruction 5651
    //MAD
    t16_4.xyz = vec3(_Metallic) * t16_4.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 5652
    //MUL
    t16_4.xyz = t16_4.xyz * vec3(t16_3);
    //Instruction 5653
    //MAD
    t16_1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 5654
    //MAD
    t16_4.xyz = t16_7.xyz * t16_1.xxx + t16_4.xyz;
    //Instruction 5655
    //SAMPLE
    t10_3 = texture(_LightTexture0, vs_TEXCOORD5.xy).w;
    //Instruction 5656
    //MUL
    t16_1.xyz = vec3(t10_3) * _LightColor0.xyz;
    //Instruction 5657
    //MUL
    t16_4.xyz = t16_4.xyz * t16_1.xyz;
    //Instruction 5658
    //MUL
    SV_Target0.xyz = t16_0.xxx * t16_4.xyz;
    //Instruction 5659
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 5660
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp vec3 lightDir_5;
  highp mat3 tangentToWorld_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec4 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = (_Object2World * _glesVertex);
  tmpvar_7 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_14;
  texcoord_14.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_15;
  if ((_UVSec == 0.0)) {
    tmpvar_15 = tmpvar_2;
  } else {
    tmpvar_15 = tmpvar_3;
  };
  texcoord_14.zw = ((tmpvar_15 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_16;
  n_16 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp vec4 v_18;
  v_18.x = _World2Object[0].x;
  v_18.y = _World2Object[1].x;
  v_18.z = _World2Object[2].x;
  v_18.w = _World2Object[3].x;
  highp vec4 v_19;
  v_19.x = _World2Object[0].y;
  v_19.y = _World2Object[1].y;
  v_19.z = _World2Object[2].y;
  v_19.w = _World2Object[3].y;
  highp vec4 v_20;
  v_20.x = _World2Object[0].z;
  v_20.y = _World2Object[1].z;
  v_20.z = _World2Object[2].z;
  v_20.w = _World2Object[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(((
    (v_18.xyz * norm_17.x)
   + 
    (v_19.xyz * norm_17.y)
  ) + (v_20.xyz * norm_17.z)));
  highp vec3 dir_22;
  dir_22 = tmpvar_4.xyz;
  highp mat3 tmpvar_23;
  tmpvar_23[0] = _Object2World[0].xyz;
  tmpvar_23[1] = _Object2World[1].xyz;
  tmpvar_23[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_24;
  tmpvar_24.xyz = normalize((tmpvar_23 * dir_22));
  tmpvar_24.w = tmpvar_4.w;
  highp vec3 tmpvar_25;
  tmpvar_25 = tmpvar_24.www;
  mediump vec3 normal_26;
  normal_26 = tmpvar_21;
  mediump vec3 tangent_27;
  tangent_27 = tmpvar_24.xyz;
  mediump vec3 flip_28;
  flip_28 = tmpvar_25;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (((normal_26.yzx * tangent_27.zxy) - (normal_26.zxy * tangent_27.yzx)) * flip_28);
  mediump mat3 tmpvar_30;
  tmpvar_30[0].x = tangent_27.x;
  tmpvar_30[0].y = tmpvar_29.x;
  tmpvar_30[0].z = normal_26.x;
  tmpvar_30[1].x = tangent_27.y;
  tmpvar_30[1].y = tmpvar_29.y;
  tmpvar_30[1].z = normal_26.y;
  tmpvar_30[2].x = tangent_27.z;
  tmpvar_30[2].y = tmpvar_29.z;
  tmpvar_30[2].z = normal_26.z;
  tangentToWorld_6 = tmpvar_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_6[0].x;
  v_31.y = tangentToWorld_6[1].x;
  v_31.z = tangentToWorld_6[2].x;
  tmpvar_8.xyz = v_31;
  highp vec3 v_32;
  v_32.x = tangentToWorld_6[0].y;
  v_32.y = tangentToWorld_6[1].y;
  v_32.z = tangentToWorld_6[2].y;
  tmpvar_9.xyz = v_32;
  highp vec3 v_33;
  v_33.x = tangentToWorld_6[0].z;
  v_33.y = tangentToWorld_6[1].z;
  v_33.z = tangentToWorld_6[2].z;
  tmpvar_10.xyz = v_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = (_Object2World * _glesVertex);
  tmpvar_11 = (_LightMatrix0 * tmpvar_34);
  tmpvar_12 = (unity_World2Shadow[0] * tmpvar_34);
  highp vec3 tmpvar_35;
  tmpvar_35 = (_WorldSpaceLightPos0.xyz - (tmpvar_13.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 n_36;
  n_36 = tmpvar_35;
  mediump vec3 tmpvar_37;
  tmpvar_37 = normalize(n_36);
  lightDir_5 = tmpvar_37;
  tmpvar_8.w = lightDir_5.x;
  tmpvar_9.w = lightDir_5.y;
  tmpvar_10.w = lightDir_5.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_14;
  xlv_TEXCOORD1 = normalize(n_16);
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD2_1 = tmpvar_9;
  xlv_TEXCOORD2_2 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _LightShadowData;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic));
  tmpvar_4 = (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  mediump vec3 tmpvar_6;
  tmpvar_6.x = xlv_TEXCOORD2.w;
  tmpvar_6.y = xlv_TEXCOORD2_1.w;
  tmpvar_6.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_7;
  mediump vec2 P_8;
  P_8 = ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5);
  tmpvar_7 = texture2D (_LightTexture0, P_8);
  highp vec3 LightCoord_9;
  LightCoord_9 = xlv_TEXCOORD5.xyz;
  highp float tmpvar_10;
  tmpvar_10 = dot (LightCoord_9, LightCoord_9);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_LightTextureB0, vec2(tmpvar_10));
  lowp float tmpvar_12;
  highp vec4 shadowCoord_13;
  shadowCoord_13 = xlv_TEXCOORD6;
  highp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_ShadowMapTexture, shadowCoord_13);
  mediump float tmpvar_15;
  if ((tmpvar_14.x < (shadowCoord_13.z / shadowCoord_13.w))) {
    tmpvar_15 = _LightShadowData.x;
  } else {
    tmpvar_15 = 1.0;
  };
  tmpvar_12 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = _LightColor0.xyz;
  tmpvar_16 = (tmpvar_16 * ((
    (float((xlv_TEXCOORD5.z > 0.0)) * tmpvar_7.w)
   * tmpvar_11.w) * tmpvar_12));
  mediump vec3 viewDir_17;
  viewDir_17 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_18;
  tmpvar_18.x = dot ((viewDir_17 - (2.0 * 
    (dot (tmpvar_1, viewDir_17) * tmpvar_1)
  )), tmpvar_6);
  tmpvar_18.y = (1.0 - clamp (dot (tmpvar_1, viewDir_17), 0.0, 1.0));
  mediump vec2 tmpvar_19;
  tmpvar_19.x = ((tmpvar_18 * tmpvar_18) * (tmpvar_18 * tmpvar_18)).x;
  tmpvar_19.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (unity_NHxRoughness, tmpvar_19);
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = (((tmpvar_4 + 
    ((tmpvar_20.w * 16.0) * tmpvar_5)
  ) * tmpvar_16) * clamp (dot (tmpvar_1, tmpvar_6), 0.0, 1.0));
  mediump vec4 xlat_varoutput_22;
  xlat_varoutput_22.xyz = tmpvar_21.xyz;
  xlat_varoutput_22.w = 1.0;
  gl_FragData[0] = xlat_varoutput_22;
}


#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp vec3 lightDir_5;
  highp mat3 tangentToWorld_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec4 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = (_Object2World * _glesVertex);
  tmpvar_7 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_14;
  texcoord_14.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_15;
  if ((_UVSec == 0.0)) {
    tmpvar_15 = tmpvar_2;
  } else {
    tmpvar_15 = tmpvar_3;
  };
  texcoord_14.zw = ((tmpvar_15 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_16;
  n_16 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp vec4 v_18;
  v_18.x = _World2Object[0].x;
  v_18.y = _World2Object[1].x;
  v_18.z = _World2Object[2].x;
  v_18.w = _World2Object[3].x;
  highp vec4 v_19;
  v_19.x = _World2Object[0].y;
  v_19.y = _World2Object[1].y;
  v_19.z = _World2Object[2].y;
  v_19.w = _World2Object[3].y;
  highp vec4 v_20;
  v_20.x = _World2Object[0].z;
  v_20.y = _World2Object[1].z;
  v_20.z = _World2Object[2].z;
  v_20.w = _World2Object[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(((
    (v_18.xyz * norm_17.x)
   + 
    (v_19.xyz * norm_17.y)
  ) + (v_20.xyz * norm_17.z)));
  highp vec3 dir_22;
  dir_22 = tmpvar_4.xyz;
  highp mat3 tmpvar_23;
  tmpvar_23[0] = _Object2World[0].xyz;
  tmpvar_23[1] = _Object2World[1].xyz;
  tmpvar_23[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_24;
  tmpvar_24.xyz = normalize((tmpvar_23 * dir_22));
  tmpvar_24.w = tmpvar_4.w;
  highp vec3 tmpvar_25;
  tmpvar_25 = tmpvar_24.www;
  mediump vec3 normal_26;
  normal_26 = tmpvar_21;
  mediump vec3 tangent_27;
  tangent_27 = tmpvar_24.xyz;
  mediump vec3 flip_28;
  flip_28 = tmpvar_25;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (((normal_26.yzx * tangent_27.zxy) - (normal_26.zxy * tangent_27.yzx)) * flip_28);
  mediump mat3 tmpvar_30;
  tmpvar_30[0].x = tangent_27.x;
  tmpvar_30[0].y = tmpvar_29.x;
  tmpvar_30[0].z = normal_26.x;
  tmpvar_30[1].x = tangent_27.y;
  tmpvar_30[1].y = tmpvar_29.y;
  tmpvar_30[1].z = normal_26.y;
  tmpvar_30[2].x = tangent_27.z;
  tmpvar_30[2].y = tmpvar_29.z;
  tmpvar_30[2].z = normal_26.z;
  tangentToWorld_6 = tmpvar_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_6[0].x;
  v_31.y = tangentToWorld_6[1].x;
  v_31.z = tangentToWorld_6[2].x;
  tmpvar_8.xyz = v_31;
  highp vec3 v_32;
  v_32.x = tangentToWorld_6[0].y;
  v_32.y = tangentToWorld_6[1].y;
  v_32.z = tangentToWorld_6[2].y;
  tmpvar_9.xyz = v_32;
  highp vec3 v_33;
  v_33.x = tangentToWorld_6[0].z;
  v_33.y = tangentToWorld_6[1].z;
  v_33.z = tangentToWorld_6[2].z;
  tmpvar_10.xyz = v_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = (_Object2World * _glesVertex);
  tmpvar_11 = (_LightMatrix0 * tmpvar_34);
  tmpvar_12 = (unity_World2Shadow[0] * tmpvar_34);
  highp vec3 tmpvar_35;
  tmpvar_35 = (_WorldSpaceLightPos0.xyz - (tmpvar_13.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 n_36;
  n_36 = tmpvar_35;
  mediump vec3 tmpvar_37;
  tmpvar_37 = normalize(n_36);
  lightDir_5 = tmpvar_37;
  tmpvar_8.w = lightDir_5.x;
  tmpvar_9.w = lightDir_5.y;
  tmpvar_10.w = lightDir_5.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_14;
  xlv_TEXCOORD1 = normalize(n_16);
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD2_1 = tmpvar_9;
  xlv_TEXCOORD2_2 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _LightShadowData;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_5;
  mediump vec2 P_6;
  P_6 = ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5);
  tmpvar_5 = texture2D (_LightTexture0, P_6);
  mediump float tmpvar_7;
  tmpvar_7 = dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightTextureB0, vec2(tmpvar_7));
  lowp float tmpvar_9;
  highp vec4 shadowCoord_10;
  shadowCoord_10 = xlv_TEXCOORD6;
  mediump float shadow_11;
  lowp float tmpvar_12;
  tmpvar_12 = shadow2DProjEXT (_ShadowMapTexture, shadowCoord_10);
  mediump float tmpvar_13;
  tmpvar_13 = tmpvar_12;
  shadow_11 = (_LightShadowData.x + (tmpvar_13 * (1.0 - _LightShadowData.x)));
  tmpvar_9 = shadow_11;
  mediump vec3 tmpvar_14;
  tmpvar_14 = _LightColor0.xyz;
  tmpvar_14 = (tmpvar_14 * ((
    (float((xlv_TEXCOORD5.z > 0.0)) * tmpvar_5.w)
   * tmpvar_8.w) * tmpvar_9));
  mediump vec3 viewDir_15;
  viewDir_15 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_16;
  tmpvar_16.x = dot ((viewDir_15 - (2.0 * 
    (dot (tmpvar_1, viewDir_15) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_16.y = (1.0 - clamp (dot (tmpvar_1, viewDir_15), 0.0, 1.0));
  mediump vec2 tmpvar_17;
  tmpvar_17.x = ((tmpvar_16 * tmpvar_16) * (tmpvar_16 * tmpvar_16)).x;
  tmpvar_17.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_NHxRoughness, tmpvar_17);
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_18.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic)))
  ) * tmpvar_14) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  mediump vec4 xlat_varoutput_20;
  xlat_varoutput_20.xyz = tmpvar_19.xyz;
  xlat_varoutput_20.w = 1.0;
  gl_FragData[0] = xlat_varoutput_20;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 5763
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 5764
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 5765
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 5766
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 5767
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 5768
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 5769
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 5770
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 5771
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 5772
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 5773
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 5774
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 5775
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 5776
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 5777
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 5778
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 5779
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 5780
    //DP3
    t16_2.x = dot(t0.xyz, t0.xyz);
    //Instruction 5781
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 5782
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xxx;
    //Instruction 5783
    //MOV
    vs_TEXCOORD2.w = t16_2.x;
    //Instruction 5784
    //MUL
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 5785
    //MAD
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    //Instruction 5786
    //MAD
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    //Instruction 5787
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 5788
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 5789
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 5790
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 5791
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 5792
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 5793
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 5794
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 5795
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 5796
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 5797
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 5798
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 5799
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 5800
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 5801
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 5802
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 5803
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 5804
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 5805
    //MUL
    t16_4.xyz = t0.yzx * t1.zxy;
    //Instruction 5806
    //MAD
    t16_4.xyz = t1.yzx * t0.zxy + (-t16_4.xyz);
    //Instruction 5807
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 5808
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 5809
    //MOV
    vs_TEXCOORD3.w = t16_2.y;
    //Instruction 5810
    //MOV
    vs_TEXCOORD4.w = t16_2.z;
    //Instruction 5811
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 5812
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 5813
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 5814
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 5815
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 5816
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 5817
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 5818
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 5819
    //DP4
    t0.x = dot(t16_0, t1);
    //Instruction 5820
    //MOV
    t16_2.x = _LightMatrix0[0].y;
    //Instruction 5821
    //MOV
    t16_2.y = _LightMatrix0[1].y;
    //Instruction 5822
    //MOV
    t16_2.z = _LightMatrix0[2].y;
    //Instruction 5823
    //MOV
    t16_2.w = _LightMatrix0[3].y;
    //Instruction 5824
    //DP4
    t0.y = dot(t16_2, t1);
    //Instruction 5825
    //MOV
    t16_2.x = _LightMatrix0[0].z;
    //Instruction 5826
    //MOV
    t16_2.y = _LightMatrix0[1].z;
    //Instruction 5827
    //MOV
    t16_2.z = _LightMatrix0[2].z;
    //Instruction 5828
    //MOV
    t16_2.w = _LightMatrix0[3].z;
    //Instruction 5829
    //DP4
    t0.z = dot(t16_2, t1);
    //Instruction 5830
    //MOV
    t16_2.x = _LightMatrix0[0].w;
    //Instruction 5831
    //MOV
    t16_2.y = _LightMatrix0[1].w;
    //Instruction 5832
    //MOV
    t16_2.z = _LightMatrix0[2].w;
    //Instruction 5833
    //MOV
    t16_2.w = _LightMatrix0[3].w;
    //Instruction 5834
    //DP4
    t0.w = dot(t16_2, t1);
    //Instruction 5835
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 5836
    //MUL
    t0 = t1.yyyy * unity_World2Shadow[0][1];
    //Instruction 5837
    //MAD
    t0 = unity_World2Shadow[0][0] * t1.xxxx + t0;
    //Instruction 5838
    //MAD
    t0 = unity_World2Shadow[0][2] * t1.zzzz + t0;
    //Instruction 5839
    //MAD
    t0 = unity_World2Shadow[0][3] * t1.wwww + t0;
    //Instruction 5840
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 5841
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp float t10_1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_7;
lowp vec3 t10_7;
bool tb7;
mediump vec3 t16_9;
mediump float t16_18;
void main()
{
    //Instruction 5721
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    //Instruction 5722
    //ADD
    t16_0.xy = t16_0.xy + vec2(0.500000, 0.500000);
    //Instruction 5723
    //SAMPLE
    t10_1 = texture(_LightTexture0, t16_0.xy).w;
    //Instruction 5724
    //LT
    tb7 = 0.0<vs_TEXCOORD5.z;
    //Instruction 5725
    //MOVC
    t10_2 = (tb7) ? 1.0 : 0.0;
    //Instruction 5726
    //MUL
    t10_2 = t10_1 * t10_2;
    //Instruction 5727
    //DP3
    t16_0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 5728
    //SAMPLE
    t10_1 = texture(_LightTextureB0, t16_0.xx).w;
    //Instruction 5729
    //MUL
    t10_2 = t10_1 * t10_2;
    //Instruction 5730
    //DIV
    t16_1.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
    //Instruction 5731
    //SAMPLE_C_LZ
    vec3 txVec21 = vec3(t16_1.xy,t16_1.z);
    t10_1 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec21, 0.0);
    //Instruction 5732
    //ADD
    t16_0.x = (-_LightShadowData.x) + 1.0;
    //Instruction 5733
    //MAD
    t16_0.x = t10_1 * t16_0.x + _LightShadowData.x;
    //Instruction 5734
    //MUL
    t10_2 = t16_0.x * t10_2;
    //Instruction 5735
    //MUL
    t16_0.xyz = vec3(t10_2) * _LightColor0.xyz;
    //Instruction 5736
    //DP3
    t16_18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 5737
    //RSQ
    t16_18 = inversesqrt(t16_18);
    //Instruction 5738
    //MUL
    t16_3.xyz = vec3(t16_18) * vs_TEXCOORD4.xyz;
    //Instruction 5739
    //DP3
    t16_18 = dot((-vs_TEXCOORD1.xyz), t16_3.xyz);
    //Instruction 5740
    //ADD
    t16_18 = t16_18 + t16_18;
    //Instruction 5741
    //MAD
    t16_4.xyz = t16_3.xyz * (-vec3(t16_18)) + (-vs_TEXCOORD1.xyz);
    //Instruction 5742
    //MOV
    t16_5.x = vs_TEXCOORD2.w;
    //Instruction 5743
    //MOV
    t16_5.y = vs_TEXCOORD3.w;
    //Instruction 5744
    //MOV
    t16_5.z = vs_TEXCOORD4.w;
    //Instruction 5745
    //DP3
    t16_18 = dot(t16_4.xyz, t16_5.xyz);
    //Instruction 5746
    //DP3
    t16_3.x = dot(t16_3.xyz, t16_5.xyz);
    t16_3.x = clamp(t16_3.x, 0.0, 1.0);
    //Instruction 5747
    //MUL
    t16_18 = t16_18 * t16_18;
    //Instruction 5748
    //MUL
    t16_4.x = t16_18 * t16_18;
    //Instruction 5749
    //ADD
    t16_4.y = (-_Glossiness) + 1.0;
    //Instruction 5750
    //SAMPLE
    t10_1 = texture(unity_NHxRoughness, t16_4.xy).w;
    //Instruction 5751
    //MUL
    t16_1.x = t10_1 * 16.000000;
    //Instruction 5752
    //SAMPLE
    t10_7.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 5753
    //MAD
    t16_9.xyz = _Color.xyz * t10_7.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 5754
    //MUL
    t16_7.xyz = t10_7.xyz * _Color.xyz;
    //Instruction 5755
    //MAD
    t16_9.xyz = vec3(_Metallic) * t16_9.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 5756
    //MUL
    t16_9.xyz = t16_1.xxx * t16_9.xyz;
    //Instruction 5757
    //MAD
    t16_18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 5758
    //MAD
    t16_9.xyz = t16_7.xyz * vec3(t16_18) + t16_9.xyz;
    //Instruction 5759
    //MUL
    t16_0.xyz = t16_0.xyz * t16_9.xyz;
    //Instruction 5760
    //MUL
    SV_Target0.xyz = t16_3.xxx * t16_0.xyz;
    //Instruction 5761
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 5762
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp mat3 tangentToWorld_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex);
  tmpvar_6 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_14;
  n_14 = (tmpvar_11.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  highp vec3 dir_20;
  dir_20 = tmpvar_4.xyz;
  highp mat3 tmpvar_21;
  tmpvar_21[0] = _Object2World[0].xyz;
  tmpvar_21[1] = _Object2World[1].xyz;
  tmpvar_21[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = normalize((tmpvar_21 * dir_20));
  tmpvar_22.w = tmpvar_4.w;
  highp vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22.www;
  mediump vec3 normal_24;
  normal_24 = tmpvar_19;
  mediump vec3 tangent_25;
  tangent_25 = tmpvar_22.xyz;
  mediump vec3 flip_26;
  flip_26 = tmpvar_23;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (((normal_24.yzx * tangent_25.zxy) - (normal_24.zxy * tangent_25.yzx)) * flip_26);
  mediump mat3 tmpvar_28;
  tmpvar_28[0].x = tangent_25.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = normal_24.x;
  tmpvar_28[1].x = tangent_25.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = normal_24.y;
  tmpvar_28[2].x = tangent_25.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = normal_24.z;
  tangentToWorld_5 = tmpvar_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_5[0].x;
  v_29.y = tangentToWorld_5[1].x;
  v_29.z = tangentToWorld_5[2].x;
  tmpvar_7.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_5[0].y;
  v_30.y = tangentToWorld_5[1].y;
  v_30.z = tangentToWorld_5[2].y;
  tmpvar_8.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_5[0].z;
  v_31.y = tangentToWorld_5[1].z;
  v_31.z = tangentToWorld_5[2].z;
  tmpvar_9.xyz = v_31;
  tmpvar_10 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec3 tmpvar_32;
  tmpvar_32 = (_WorldSpaceLightPos0.xyz - (tmpvar_11.xyz * _WorldSpaceLightPos0.w));
  tmpvar_7.w = tmpvar_32.x;
  tmpvar_8.w = tmpvar_32.y;
  tmpvar_9.w = tmpvar_32.z;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = normalize(n_14);
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD2_1 = tmpvar_8;
  xlv_TEXCOORD2_2 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _LightShadowData;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  lowp float tmpvar_5;
  highp float tmpvar_6;
  tmpvar_6 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_5 = tmpvar_6;
  mediump float atten_7;
  atten_7 = tmpvar_5;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _LightColor0.xyz;
  tmpvar_8 = (tmpvar_8 * atten_7);
  mediump vec3 viewDir_9;
  viewDir_9 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_10;
  tmpvar_10.x = dot ((viewDir_9 - (2.0 * 
    (dot (tmpvar_1, viewDir_9) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_10.y = (1.0 - clamp (dot (tmpvar_1, viewDir_9), 0.0, 1.0));
  mediump vec2 tmpvar_11;
  tmpvar_11.x = ((tmpvar_10 * tmpvar_10) * (tmpvar_10 * tmpvar_10)).x;
  tmpvar_11.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_NHxRoughness, tmpvar_11);
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_12.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic)))
  ) * tmpvar_8) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  mediump vec4 xlat_varoutput_14;
  xlat_varoutput_14.xyz = tmpvar_13.xyz;
  xlat_varoutput_14.w = 1.0;
  gl_FragData[0] = xlat_varoutput_14;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec2 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp mat3 tangentToWorld_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex);
  tmpvar_6 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_14;
  n_14 = (tmpvar_11.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  highp vec3 dir_20;
  dir_20 = tmpvar_4.xyz;
  highp mat3 tmpvar_21;
  tmpvar_21[0] = _Object2World[0].xyz;
  tmpvar_21[1] = _Object2World[1].xyz;
  tmpvar_21[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = normalize((tmpvar_21 * dir_20));
  tmpvar_22.w = tmpvar_4.w;
  highp vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22.www;
  mediump vec3 normal_24;
  normal_24 = tmpvar_19;
  mediump vec3 tangent_25;
  tangent_25 = tmpvar_22.xyz;
  mediump vec3 flip_26;
  flip_26 = tmpvar_23;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (((normal_24.yzx * tangent_25.zxy) - (normal_24.zxy * tangent_25.yzx)) * flip_26);
  mediump mat3 tmpvar_28;
  tmpvar_28[0].x = tangent_25.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = normal_24.x;
  tmpvar_28[1].x = tangent_25.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = normal_24.y;
  tmpvar_28[2].x = tangent_25.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = normal_24.z;
  tangentToWorld_5 = tmpvar_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_5[0].x;
  v_29.y = tangentToWorld_5[1].x;
  v_29.z = tangentToWorld_5[2].x;
  tmpvar_7.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_5[0].y;
  v_30.y = tangentToWorld_5[1].y;
  v_30.z = tangentToWorld_5[2].y;
  tmpvar_8.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_5[0].z;
  v_31.y = tangentToWorld_5[1].z;
  v_31.z = tangentToWorld_5[2].z;
  tmpvar_9.xyz = v_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (_Object2World * _glesVertex);
  tmpvar_10 = (unity_World2Shadow[0] * tmpvar_32);
  highp vec3 tmpvar_33;
  tmpvar_33 = (_WorldSpaceLightPos0.xyz - (tmpvar_11.xyz * _WorldSpaceLightPos0.w));
  tmpvar_7.w = tmpvar_33.x;
  tmpvar_8.w = tmpvar_33.y;
  tmpvar_9.w = tmpvar_33.z;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = normalize(n_14);
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD2_1 = tmpvar_8;
  xlv_TEXCOORD2_2 = tmpvar_9;
  xlv_TEXCOORD5 = (_LightMatrix0 * tmpvar_32).xy;
  xlv_TEXCOORD6 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _LightShadowData;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec2 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightTexture0, xlv_TEXCOORD5);
  lowp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_6 = tmpvar_7;
  mediump float atten_8;
  atten_8 = (tmpvar_5.w * tmpvar_6);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  tmpvar_9 = (tmpvar_9 * atten_8);
  mediump vec3 viewDir_10;
  viewDir_10 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_11;
  tmpvar_11.x = dot ((viewDir_10 - (2.0 * 
    (dot (tmpvar_1, viewDir_10) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_11.y = (1.0 - clamp (dot (tmpvar_1, viewDir_10), 0.0, 1.0));
  mediump vec2 tmpvar_12;
  tmpvar_12.x = ((tmpvar_11 * tmpvar_11) * (tmpvar_11 * tmpvar_11)).x;
  tmpvar_12.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (unity_NHxRoughness, tmpvar_12);
  mediump vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_13.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic)))
  ) * tmpvar_9) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  mediump vec4 xlat_varoutput_15;
  xlat_varoutput_15.xyz = tmpvar_14.xyz;
  xlat_varoutput_15.w = 1.0;
  gl_FragData[0] = xlat_varoutput_15;
}


#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp vec3 lightDir_5;
  highp mat3 tangentToWorld_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex);
  tmpvar_7 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_14;
  n_14 = (tmpvar_11.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  highp vec3 dir_20;
  dir_20 = tmpvar_4.xyz;
  highp mat3 tmpvar_21;
  tmpvar_21[0] = _Object2World[0].xyz;
  tmpvar_21[1] = _Object2World[1].xyz;
  tmpvar_21[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = normalize((tmpvar_21 * dir_20));
  tmpvar_22.w = tmpvar_4.w;
  highp vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22.www;
  mediump vec3 normal_24;
  normal_24 = tmpvar_19;
  mediump vec3 tangent_25;
  tangent_25 = tmpvar_22.xyz;
  mediump vec3 flip_26;
  flip_26 = tmpvar_23;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (((normal_24.yzx * tangent_25.zxy) - (normal_24.zxy * tangent_25.yzx)) * flip_26);
  mediump mat3 tmpvar_28;
  tmpvar_28[0].x = tangent_25.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = normal_24.x;
  tmpvar_28[1].x = tangent_25.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = normal_24.y;
  tmpvar_28[2].x = tangent_25.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = normal_24.z;
  tangentToWorld_6 = tmpvar_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_6[0].x;
  v_29.y = tangentToWorld_6[1].x;
  v_29.z = tangentToWorld_6[2].x;
  tmpvar_8.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_6[0].y;
  v_30.y = tangentToWorld_6[1].y;
  v_30.z = tangentToWorld_6[2].y;
  tmpvar_9.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_6[0].z;
  v_31.y = tangentToWorld_6[1].z;
  v_31.z = tangentToWorld_6[2].z;
  tmpvar_10.xyz = v_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (_WorldSpaceLightPos0.xyz - (tmpvar_11.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 n_33;
  n_33 = tmpvar_32;
  mediump vec3 tmpvar_34;
  tmpvar_34 = normalize(n_33);
  lightDir_5 = tmpvar_34;
  tmpvar_8.w = lightDir_5.x;
  tmpvar_9.w = lightDir_5.y;
  tmpvar_10.w = lightDir_5.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = normalize(n_14);
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD2_1 = tmpvar_9;
  xlv_TEXCOORD2_2 = tmpvar_10;
  highp vec4 tmpvar_35;
  tmpvar_35 = (_Object2World * _glesVertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * tmpvar_35).xyz;
  xlv_TEXCOORD6 = (tmpvar_35.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform mediump vec4 _LightShadowData;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform highp samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic));
  tmpvar_4 = (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  mediump vec3 tmpvar_6;
  tmpvar_6.x = xlv_TEXCOORD2.w;
  tmpvar_6.y = xlv_TEXCOORD2_1.w;
  tmpvar_6.z = xlv_TEXCOORD2_2.w;
  highp float tmpvar_7;
  tmpvar_7 = dot (xlv_TEXCOORD5, xlv_TEXCOORD5);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightTexture0, vec2(tmpvar_7));
  highp float mydist_9;
  mydist_9 = ((sqrt(
    dot (xlv_TEXCOORD6, xlv_TEXCOORD6)
  ) * _LightPositionRange.w) * 0.97);
  highp float tmpvar_10;
  tmpvar_10 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD6), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  mediump float tmpvar_11;
  if ((tmpvar_10 < mydist_9)) {
    tmpvar_11 = _LightShadowData.x;
  } else {
    tmpvar_11 = 1.0;
  };
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  tmpvar_12 = (tmpvar_12 * (tmpvar_8.w * tmpvar_11));
  mediump vec3 viewDir_13;
  viewDir_13 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_14;
  tmpvar_14.x = dot ((viewDir_13 - (2.0 * 
    (dot (tmpvar_1, viewDir_13) * tmpvar_1)
  )), tmpvar_6);
  tmpvar_14.y = (1.0 - clamp (dot (tmpvar_1, viewDir_13), 0.0, 1.0));
  mediump vec2 tmpvar_15;
  tmpvar_15.x = ((tmpvar_14 * tmpvar_14) * (tmpvar_14 * tmpvar_14)).x;
  tmpvar_15.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_NHxRoughness, tmpvar_15);
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = (((tmpvar_4 + 
    ((tmpvar_16.w * 16.0) * tmpvar_5)
  ) * tmpvar_12) * clamp (dot (tmpvar_1, tmpvar_6), 0.0, 1.0));
  mediump vec4 xlat_varoutput_18;
  xlat_varoutput_18.xyz = tmpvar_17.xyz;
  xlat_varoutput_18.w = 1.0;
  gl_FragData[0] = xlat_varoutput_18;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 5881
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 5882
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 5883
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 5884
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 5885
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 5886
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 5887
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 5888
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 5889
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 5890
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 5891
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 5892
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 5893
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 5894
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 5895
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 5896
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 5897
    //MAD
    t1.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 5898
    //ADD
    vs_TEXCOORD6.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 5899
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 5900
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 5901
    //MUL
    t16_2.xyz = t1.xyz * t16_2.xxx;
    //Instruction 5902
    //MOV
    vs_TEXCOORD2.w = t16_2.x;
    //Instruction 5903
    //MUL
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 5904
    //MAD
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    //Instruction 5905
    //MAD
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    //Instruction 5906
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 5907
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 5908
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 5909
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 5910
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 5911
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 5912
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 5913
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 5914
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 5915
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 5916
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 5917
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 5918
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 5919
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 5920
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 5921
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 5922
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 5923
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 5924
    //MUL
    t16_4.xyz = t0.yzx * t1.zxy;
    //Instruction 5925
    //MAD
    t16_4.xyz = t1.yzx * t0.zxy + (-t16_4.xyz);
    //Instruction 5926
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 5927
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 5928
    //MOV
    vs_TEXCOORD3.w = t16_2.y;
    //Instruction 5929
    //MOV
    vs_TEXCOORD4.w = t16_2.z;
    //Instruction 5930
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 5931
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 5932
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 5933
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 5934
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 5935
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 5936
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 5937
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 5938
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 5939
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 5940
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 5941
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 5942
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 5943
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 5944
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 5945
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 5946
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 5947
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 5948
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 5949
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2D unity_NHxRoughness;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
highp float t0;
mediump float t16_0;
lowp float t10_0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
highp float t6;
mediump vec3 t16_6;
lowp vec3 t10_6;
mediump vec3 t16_9;
mediump float t16_20;
void main()
{
    //Instruction 5842
    //DP3
    t0 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    //Instruction 5843
    //SQRT
    t0 = sqrt(t0);
    //Instruction 5844
    //MUL
    t0 = t0 * _LightPositionRange.w;
    //Instruction 5845
    //MUL
    t0 = t0 * 0.970000;
    //Instruction 5846
    //SAMPLE
    t1 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
    //Instruction 5847
    //DP4
    t6 = dot(t1, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 5848
    //LT
    tb0 = t6<t0;
    //Instruction 5849
    //MOVC
    t16_2.x = (tb0) ? _LightShadowData.x : 1.0;
    //Instruction 5850
    //DP3
    t0 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 5851
    //SAMPLE
    t10_0 = texture(_LightTexture0, vec2(t0)).w;
    //Instruction 5852
    //MUL
    t16_0 = t16_2.x * t10_0;
    //Instruction 5853
    //MUL
    t16_2.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 5854
    //DP3
    t16_20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 5855
    //RSQ
    t16_20 = inversesqrt(t16_20);
    //Instruction 5856
    //MUL
    t16_3.xyz = vec3(t16_20) * vs_TEXCOORD4.xyz;
    //Instruction 5857
    //DP3
    t16_20 = dot((-vs_TEXCOORD1.xyz), t16_3.xyz);
    //Instruction 5858
    //ADD
    t16_20 = t16_20 + t16_20;
    //Instruction 5859
    //MAD
    t16_4.xyz = t16_3.xyz * (-vec3(t16_20)) + (-vs_TEXCOORD1.xyz);
    //Instruction 5860
    //MOV
    t16_5.x = vs_TEXCOORD2.w;
    //Instruction 5861
    //MOV
    t16_5.y = vs_TEXCOORD3.w;
    //Instruction 5862
    //MOV
    t16_5.z = vs_TEXCOORD4.w;
    //Instruction 5863
    //DP3
    t16_20 = dot(t16_4.xyz, t16_5.xyz);
    //Instruction 5864
    //DP3
    t16_3.x = dot(t16_3.xyz, t16_5.xyz);
    t16_3.x = clamp(t16_3.x, 0.0, 1.0);
    //Instruction 5865
    //MUL
    t16_20 = t16_20 * t16_20;
    //Instruction 5866
    //MUL
    t16_4.x = t16_20 * t16_20;
    //Instruction 5867
    //ADD
    t16_4.y = (-_Glossiness) + 1.0;
    //Instruction 5868
    //SAMPLE
    t10_0 = texture(unity_NHxRoughness, t16_4.xy).w;
    //Instruction 5869
    //MUL
    t16_0 = t10_0 * 16.000000;
    //Instruction 5870
    //SAMPLE
    t10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 5871
    //MAD
    t16_9.xyz = _Color.xyz * t10_6.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 5872
    //MUL
    t16_6.xyz = t10_6.xyz * _Color.xyz;
    //Instruction 5873
    //MAD
    t16_9.xyz = vec3(_Metallic) * t16_9.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 5874
    //MUL
    t16_9.xyz = vec3(t16_0) * t16_9.xyz;
    //Instruction 5875
    //MAD
    t16_20 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 5876
    //MAD
    t16_9.xyz = t16_6.xyz * vec3(t16_20) + t16_9.xyz;
    //Instruction 5877
    //MUL
    t16_2.xyz = t16_2.xyz * t16_9.xyz;
    //Instruction 5878
    //MUL
    SV_Target0.xyz = t16_3.xxx * t16_2.xyz;
    //Instruction 5879
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 5880
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp vec3 lightDir_5;
  highp mat3 tangentToWorld_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex);
  tmpvar_7 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_14;
  n_14 = (tmpvar_11.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  highp vec3 dir_20;
  dir_20 = tmpvar_4.xyz;
  highp mat3 tmpvar_21;
  tmpvar_21[0] = _Object2World[0].xyz;
  tmpvar_21[1] = _Object2World[1].xyz;
  tmpvar_21[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = normalize((tmpvar_21 * dir_20));
  tmpvar_22.w = tmpvar_4.w;
  highp vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22.www;
  mediump vec3 normal_24;
  normal_24 = tmpvar_19;
  mediump vec3 tangent_25;
  tangent_25 = tmpvar_22.xyz;
  mediump vec3 flip_26;
  flip_26 = tmpvar_23;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (((normal_24.yzx * tangent_25.zxy) - (normal_24.zxy * tangent_25.yzx)) * flip_26);
  mediump mat3 tmpvar_28;
  tmpvar_28[0].x = tangent_25.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = normal_24.x;
  tmpvar_28[1].x = tangent_25.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = normal_24.y;
  tmpvar_28[2].x = tangent_25.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = normal_24.z;
  tangentToWorld_6 = tmpvar_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_6[0].x;
  v_29.y = tangentToWorld_6[1].x;
  v_29.z = tangentToWorld_6[2].x;
  tmpvar_8.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_6[0].y;
  v_30.y = tangentToWorld_6[1].y;
  v_30.z = tangentToWorld_6[2].y;
  tmpvar_9.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_6[0].z;
  v_31.y = tangentToWorld_6[1].z;
  v_31.z = tangentToWorld_6[2].z;
  tmpvar_10.xyz = v_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (_WorldSpaceLightPos0.xyz - (tmpvar_11.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 n_33;
  n_33 = tmpvar_32;
  mediump vec3 tmpvar_34;
  tmpvar_34 = normalize(n_33);
  lightDir_5 = tmpvar_34;
  tmpvar_8.w = lightDir_5.x;
  tmpvar_9.w = lightDir_5.y;
  tmpvar_10.w = lightDir_5.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = normalize(n_14);
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD2_1 = tmpvar_9;
  xlv_TEXCOORD2_2 = tmpvar_10;
  highp vec4 tmpvar_35;
  tmpvar_35 = (_Object2World * _glesVertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * tmpvar_35).xyz;
  xlv_TEXCOORD6 = (tmpvar_35.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform mediump vec4 _LightShadowData;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic));
  tmpvar_4 = (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  mediump vec3 tmpvar_6;
  tmpvar_6.x = xlv_TEXCOORD2.w;
  tmpvar_6.y = xlv_TEXCOORD2_1.w;
  tmpvar_6.z = xlv_TEXCOORD2_2.w;
  highp float tmpvar_7;
  tmpvar_7 = dot (xlv_TEXCOORD5, xlv_TEXCOORD5);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightTextureB0, vec2(tmpvar_7));
  lowp vec4 tmpvar_9;
  tmpvar_9 = textureCube (_LightTexture0, xlv_TEXCOORD5);
  highp float mydist_10;
  mydist_10 = ((sqrt(
    dot (xlv_TEXCOORD6, xlv_TEXCOORD6)
  ) * _LightPositionRange.w) * 0.97);
  highp float tmpvar_11;
  tmpvar_11 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD6), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  mediump float tmpvar_12;
  if ((tmpvar_11 < mydist_10)) {
    tmpvar_12 = _LightShadowData.x;
  } else {
    tmpvar_12 = 1.0;
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = _LightColor0.xyz;
  tmpvar_13 = (tmpvar_13 * ((tmpvar_8.w * tmpvar_9.w) * tmpvar_12));
  mediump vec3 viewDir_14;
  viewDir_14 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_15;
  tmpvar_15.x = dot ((viewDir_14 - (2.0 * 
    (dot (tmpvar_1, viewDir_14) * tmpvar_1)
  )), tmpvar_6);
  tmpvar_15.y = (1.0 - clamp (dot (tmpvar_1, viewDir_14), 0.0, 1.0));
  mediump vec2 tmpvar_16;
  tmpvar_16.x = ((tmpvar_15 * tmpvar_15) * (tmpvar_15 * tmpvar_15)).x;
  tmpvar_16.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (unity_NHxRoughness, tmpvar_16);
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = (((tmpvar_4 + 
    ((tmpvar_17.w * 16.0) * tmpvar_5)
  ) * tmpvar_13) * clamp (dot (tmpvar_1, tmpvar_6), 0.0, 1.0));
  mediump vec4 xlat_varoutput_19;
  xlat_varoutput_19.xyz = tmpvar_18.xyz;
  xlat_varoutput_19.w = 1.0;
  gl_FragData[0] = xlat_varoutput_19;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 5991
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 5992
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 5993
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 5994
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 5995
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 5996
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 5997
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 5998
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 5999
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 6000
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 6001
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 6002
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 6003
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 6004
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 6005
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 6006
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 6007
    //MAD
    t1.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 6008
    //ADD
    vs_TEXCOORD6.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 6009
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 6010
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 6011
    //MUL
    t16_2.xyz = t1.xyz * t16_2.xxx;
    //Instruction 6012
    //MOV
    vs_TEXCOORD2.w = t16_2.x;
    //Instruction 6013
    //MUL
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 6014
    //MAD
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    //Instruction 6015
    //MAD
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    //Instruction 6016
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 6017
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 6018
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 6019
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 6020
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 6021
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 6022
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 6023
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 6024
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 6025
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 6026
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 6027
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 6028
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 6029
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 6030
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 6031
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 6032
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 6033
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 6034
    //MUL
    t16_4.xyz = t0.yzx * t1.zxy;
    //Instruction 6035
    //MAD
    t16_4.xyz = t1.yzx * t0.zxy + (-t16_4.xyz);
    //Instruction 6036
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 6037
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 6038
    //MOV
    vs_TEXCOORD3.w = t16_2.y;
    //Instruction 6039
    //MOV
    vs_TEXCOORD4.w = t16_2.z;
    //Instruction 6040
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 6041
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 6042
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 6043
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 6044
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 6045
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 6046
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 6047
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 6048
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 6049
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 6050
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 6051
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 6052
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 6053
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 6054
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 6055
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 6056
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 6057
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 6058
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 6059
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2D unity_NHxRoughness;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
highp float t0;
mediump float t16_0;
lowp float t10_0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
highp float t6;
mediump vec3 t16_6;
lowp vec3 t10_6;
mediump vec3 t16_9;
mediump float t16_20;
void main()
{
    //Instruction 5950
    //DP3
    t0 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    //Instruction 5951
    //SQRT
    t0 = sqrt(t0);
    //Instruction 5952
    //MUL
    t0 = t0 * _LightPositionRange.w;
    //Instruction 5953
    //MUL
    t0 = t0 * 0.970000;
    //Instruction 5954
    //SAMPLE
    t1 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
    //Instruction 5955
    //DP4
    t6 = dot(t1, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 5956
    //LT
    tb0 = t6<t0;
    //Instruction 5957
    //MOVC
    t16_2.x = (tb0) ? _LightShadowData.x : 1.0;
    //Instruction 5958
    //DP3
    t0 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 5959
    //SAMPLE
    t10_0 = texture(_LightTextureB0, vec2(t0)).w;
    //Instruction 5960
    //SAMPLE
    t10_6.x = texture(_LightTexture0, vs_TEXCOORD5.xyz).w;
    //Instruction 5961
    //MUL
    t16_0 = t10_6.x * t10_0;
    //Instruction 5962
    //MUL
    t16_0 = t16_2.x * t16_0;
    //Instruction 5963
    //MUL
    t16_2.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 5964
    //DP3
    t16_20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 5965
    //RSQ
    t16_20 = inversesqrt(t16_20);
    //Instruction 5966
    //MUL
    t16_3.xyz = vec3(t16_20) * vs_TEXCOORD4.xyz;
    //Instruction 5967
    //DP3
    t16_20 = dot((-vs_TEXCOORD1.xyz), t16_3.xyz);
    //Instruction 5968
    //ADD
    t16_20 = t16_20 + t16_20;
    //Instruction 5969
    //MAD
    t16_4.xyz = t16_3.xyz * (-vec3(t16_20)) + (-vs_TEXCOORD1.xyz);
    //Instruction 5970
    //MOV
    t16_5.x = vs_TEXCOORD2.w;
    //Instruction 5971
    //MOV
    t16_5.y = vs_TEXCOORD3.w;
    //Instruction 5972
    //MOV
    t16_5.z = vs_TEXCOORD4.w;
    //Instruction 5973
    //DP3
    t16_20 = dot(t16_4.xyz, t16_5.xyz);
    //Instruction 5974
    //DP3
    t16_3.x = dot(t16_3.xyz, t16_5.xyz);
    t16_3.x = clamp(t16_3.x, 0.0, 1.0);
    //Instruction 5975
    //MUL
    t16_20 = t16_20 * t16_20;
    //Instruction 5976
    //MUL
    t16_4.x = t16_20 * t16_20;
    //Instruction 5977
    //ADD
    t16_4.y = (-_Glossiness) + 1.0;
    //Instruction 5978
    //SAMPLE
    t10_0 = texture(unity_NHxRoughness, t16_4.xy).w;
    //Instruction 5979
    //MUL
    t16_0 = t10_0 * 16.000000;
    //Instruction 5980
    //SAMPLE
    t10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 5981
    //MAD
    t16_9.xyz = _Color.xyz * t10_6.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 5982
    //MUL
    t16_6.xyz = t10_6.xyz * _Color.xyz;
    //Instruction 5983
    //MAD
    t16_9.xyz = vec3(_Metallic) * t16_9.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 5984
    //MUL
    t16_9.xyz = vec3(t16_0) * t16_9.xyz;
    //Instruction 5985
    //MAD
    t16_20 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 5986
    //MAD
    t16_9.xyz = t16_6.xyz * vec3(t16_20) + t16_9.xyz;
    //Instruction 5987
    //MUL
    t16_2.xyz = t16_2.xyz * t16_9.xyz;
    //Instruction 5988
    //MUL
    SV_Target0.xyz = t16_3.xxx * t16_2.xyz;
    //Instruction 5989
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 5990
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp mat3 tangentToWorld_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex);
  tmpvar_6 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_14;
  n_14 = (tmpvar_11.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  highp vec3 dir_20;
  dir_20 = tmpvar_4.xyz;
  highp mat3 tmpvar_21;
  tmpvar_21[0] = _Object2World[0].xyz;
  tmpvar_21[1] = _Object2World[1].xyz;
  tmpvar_21[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = normalize((tmpvar_21 * dir_20));
  tmpvar_22.w = tmpvar_4.w;
  highp vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22.www;
  mediump vec3 normal_24;
  normal_24 = tmpvar_19;
  mediump vec3 tangent_25;
  tangent_25 = tmpvar_22.xyz;
  mediump vec3 flip_26;
  flip_26 = tmpvar_23;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (((normal_24.yzx * tangent_25.zxy) - (normal_24.zxy * tangent_25.yzx)) * flip_26);
  mediump mat3 tmpvar_28;
  tmpvar_28[0].x = tangent_25.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = normal_24.x;
  tmpvar_28[1].x = tangent_25.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = normal_24.y;
  tmpvar_28[2].x = tangent_25.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = normal_24.z;
  tangentToWorld_5 = tmpvar_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_5[0].x;
  v_29.y = tangentToWorld_5[1].x;
  v_29.z = tangentToWorld_5[2].x;
  tmpvar_7.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_5[0].y;
  v_30.y = tangentToWorld_5[1].y;
  v_30.z = tangentToWorld_5[2].y;
  tmpvar_8.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_5[0].z;
  v_31.y = tangentToWorld_5[1].z;
  v_31.z = tangentToWorld_5[2].z;
  tmpvar_9.xyz = v_31;
  tmpvar_10 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec3 tmpvar_32;
  tmpvar_32 = (_WorldSpaceLightPos0.xyz - (tmpvar_11.xyz * _WorldSpaceLightPos0.w));
  tmpvar_7.w = tmpvar_32.x;
  tmpvar_8.w = tmpvar_32.y;
  tmpvar_9.w = tmpvar_32.z;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = normalize(n_14);
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD2_1 = tmpvar_8;
  xlv_TEXCOORD2_2 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _LightShadowData;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform lowp sampler2DShadow _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  lowp float shadow_5;
  shadow_5 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  mediump float atten_6;
  atten_6 = shadow_5;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _LightColor0.xyz;
  tmpvar_7 = (tmpvar_7 * atten_6);
  mediump vec3 viewDir_8;
  viewDir_8 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_9;
  tmpvar_9.x = dot ((viewDir_8 - (2.0 * 
    (dot (tmpvar_1, viewDir_8) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_9.y = (1.0 - clamp (dot (tmpvar_1, viewDir_8), 0.0, 1.0));
  mediump vec2 tmpvar_10;
  tmpvar_10.x = ((tmpvar_9 * tmpvar_9) * (tmpvar_9 * tmpvar_9)).x;
  tmpvar_10.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_NHxRoughness, tmpvar_10);
  mediump vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_11.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic)))
  ) * tmpvar_7) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  mediump vec4 xlat_varoutput_13;
  xlat_varoutput_13.xyz = tmpvar_12.xyz;
  xlat_varoutput_13.w = 1.0;
  gl_FragData[0] = xlat_varoutput_13;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
mediump vec3 t16_5;
void main()
{
    //Instruction 6091
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 6092
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 6093
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 6094
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 6095
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 6096
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 6097
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 6098
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 6099
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 6100
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 6101
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 6102
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 6103
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 6104
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 6105
    //DP3
    t16_2 = dot(t1.xyz, t1.xyz);
    //Instruction 6106
    //RSQ
    t16_2 = inversesqrt(t16_2);
    //Instruction 6107
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * vec3(t16_2);
    //Instruction 6108
    //MOV
    t1.w = t0.x;
    //Instruction 6109
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 6110
    //MAD
    t3.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t3.xyz;
    //Instruction 6111
    //MAD
    t3.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t3.xyz;
    //Instruction 6112
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 6113
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 6114
    //MUL
    t1.xyz = t0.xxx * t3.xyz;
    //Instruction 6115
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 6116
    //MUL
    t3.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 6117
    //MUL
    t3.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 6118
    //MUL
    t3.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 6119
    //MUL
    t4.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 6120
    //MUL
    t4.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 6121
    //MUL
    t4.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 6122
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 6123
    //MUL
    t4.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 6124
    //MUL
    t4.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 6125
    //MUL
    t4.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 6126
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 6127
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 6128
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 6129
    //MUL
    t2.xyz = t0.xxx * t3.xyz;
    //Instruction 6130
    //MUL
    t16_5.xyz = t1.yzx * t2.zxy;
    //Instruction 6131
    //MAD
    t16_5.xyz = t2.yzx * t1.zxy + (-t16_5.xyz);
    //Instruction 6132
    //MUL
    vs_TEXCOORD3.xyz = t16_5.xyz * in_TANGENT0.www;
    //Instruction 6133
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 6134
    //MOV
    t2.w = t0.z;
    //Instruction 6135
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 6136
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 6137
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 6138
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 6139
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 6140
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 6141
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 6142
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 6143
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 6144
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 6145
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_4;
lowp float t10_4;
mediump float t16_5;
mediump vec3 t16_6;
mediump vec3 t16_9;
lowp vec3 t10_9;
mediump float t16_15;
void main()
{
    //Instruction 6060
    //SAMPLE_C_LZ
    vec3 txVec22 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec22, 0.0);
    //Instruction 6061
    //ADD
    t16_5 = (-_LightShadowData.x) + 1.0;
    //Instruction 6062
    //MAD
    t16_0.x = t16_0.x * t16_5 + _LightShadowData.x;
    //Instruction 6063
    //MUL
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 6064
    //DP3
    t16_15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 6065
    //RSQ
    t16_15 = inversesqrt(t16_15);
    //Instruction 6066
    //MUL
    t16_1.xyz = vec3(t16_15) * vs_TEXCOORD4.xyz;
    //Instruction 6067
    //DP3
    t16_15 = dot((-vs_TEXCOORD1.xyz), t16_1.xyz);
    //Instruction 6068
    //ADD
    t16_15 = t16_15 + t16_15;
    //Instruction 6069
    //MAD
    t16_2.xyz = t16_1.xyz * (-vec3(t16_15)) + (-vs_TEXCOORD1.xyz);
    //Instruction 6070
    //MOV
    t16_3.x = vs_TEXCOORD2.w;
    //Instruction 6071
    //MOV
    t16_3.y = vs_TEXCOORD3.w;
    //Instruction 6072
    //MOV
    t16_3.z = vs_TEXCOORD4.w;
    //Instruction 6073
    //DP3
    t16_15 = dot(t16_2.xyz, t16_3.xyz);
    //Instruction 6074
    //DP3
    t16_1.x = dot(t16_1.xyz, t16_3.xyz);
    t16_1.x = clamp(t16_1.x, 0.0, 1.0);
    //Instruction 6075
    //MUL
    t16_15 = t16_15 * t16_15;
    //Instruction 6076
    //MUL
    t16_2.x = t16_15 * t16_15;
    //Instruction 6077
    //ADD
    t16_2.y = (-_Glossiness) + 1.0;
    //Instruction 6078
    //SAMPLE
    t10_4 = texture(unity_NHxRoughness, t16_2.xy).w;
    //Instruction 6079
    //MUL
    t16_4 = t10_4 * 16.000000;
    //Instruction 6080
    //SAMPLE
    t10_9.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 6081
    //MAD
    t16_6.xyz = _Color.xyz * t10_9.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 6082
    //MUL
    t16_9.xyz = t10_9.xyz * _Color.xyz;
    //Instruction 6083
    //MAD
    t16_6.xyz = vec3(_Metallic) * t16_6.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 6084
    //MUL
    t16_6.xyz = t16_6.xyz * vec3(t16_4);
    //Instruction 6085
    //MAD
    t16_15 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 6086
    //MAD
    t16_6.xyz = t16_9.xyz * vec3(t16_15) + t16_6.xyz;
    //Instruction 6087
    //MUL
    t16_0.xyz = t16_0.xyz * t16_6.xyz;
    //Instruction 6088
    //MUL
    SV_Target0.xyz = t16_1.xxx * t16_0.xyz;
    //Instruction 6089
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 6090
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp mat3 tangentToWorld_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec2 tmpvar_10;
  mediump vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  tmpvar_6 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_15;
  n_15 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp vec4 v_17;
  v_17.x = _World2Object[0].x;
  v_17.y = _World2Object[1].x;
  v_17.z = _World2Object[2].x;
  v_17.w = _World2Object[3].x;
  highp vec4 v_18;
  v_18.x = _World2Object[0].y;
  v_18.y = _World2Object[1].y;
  v_18.z = _World2Object[2].y;
  v_18.w = _World2Object[3].y;
  highp vec4 v_19;
  v_19.x = _World2Object[0].z;
  v_19.y = _World2Object[1].z;
  v_19.z = _World2Object[2].z;
  v_19.w = _World2Object[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(((
    (v_17.xyz * norm_16.x)
   + 
    (v_18.xyz * norm_16.y)
  ) + (v_19.xyz * norm_16.z)));
  highp vec3 dir_21;
  dir_21 = tmpvar_4.xyz;
  highp mat3 tmpvar_22;
  tmpvar_22[0] = _Object2World[0].xyz;
  tmpvar_22[1] = _Object2World[1].xyz;
  tmpvar_22[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_23;
  tmpvar_23.xyz = normalize((tmpvar_22 * dir_21));
  tmpvar_23.w = tmpvar_4.w;
  highp vec3 tmpvar_24;
  tmpvar_24 = tmpvar_23.www;
  mediump vec3 normal_25;
  normal_25 = tmpvar_20;
  mediump vec3 tangent_26;
  tangent_26 = tmpvar_23.xyz;
  mediump vec3 flip_27;
  flip_27 = tmpvar_24;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (((normal_25.yzx * tangent_26.zxy) - (normal_25.zxy * tangent_26.yzx)) * flip_27);
  mediump mat3 tmpvar_29;
  tmpvar_29[0].x = tangent_26.x;
  tmpvar_29[0].y = tmpvar_28.x;
  tmpvar_29[0].z = normal_25.x;
  tmpvar_29[1].x = tangent_26.y;
  tmpvar_29[1].y = tmpvar_28.y;
  tmpvar_29[1].z = normal_25.y;
  tmpvar_29[2].x = tangent_26.z;
  tmpvar_29[2].y = tmpvar_28.z;
  tmpvar_29[2].z = normal_25.z;
  tangentToWorld_5 = tmpvar_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_5[0].x;
  v_30.y = tangentToWorld_5[1].x;
  v_30.z = tangentToWorld_5[2].x;
  tmpvar_7.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_5[0].y;
  v_31.y = tangentToWorld_5[1].y;
  v_31.z = tangentToWorld_5[2].y;
  tmpvar_8.xyz = v_31;
  highp vec3 v_32;
  v_32.x = tangentToWorld_5[0].z;
  v_32.y = tangentToWorld_5[1].z;
  v_32.z = tangentToWorld_5[2].z;
  tmpvar_9.xyz = v_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (_Object2World * _glesVertex);
  tmpvar_10 = (_LightMatrix0 * tmpvar_33).xy;
  tmpvar_11 = (unity_World2Shadow[0] * tmpvar_33);
  highp vec3 tmpvar_34;
  tmpvar_34 = (_WorldSpaceLightPos0.xyz - (tmpvar_12.xyz * _WorldSpaceLightPos0.w));
  tmpvar_7.w = tmpvar_34.x;
  tmpvar_8.w = tmpvar_34.y;
  tmpvar_9.w = tmpvar_34.z;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = normalize(n_15);
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD2_1 = tmpvar_8;
  xlv_TEXCOORD2_2 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _LightShadowData;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightTexture0, xlv_TEXCOORD5);
  lowp float shadow_6;
  shadow_6 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  mediump float atten_7;
  atten_7 = (tmpvar_5.w * shadow_6);
  mediump vec3 tmpvar_8;
  tmpvar_8 = _LightColor0.xyz;
  tmpvar_8 = (tmpvar_8 * atten_7);
  mediump vec3 viewDir_9;
  viewDir_9 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_10;
  tmpvar_10.x = dot ((viewDir_9 - (2.0 * 
    (dot (tmpvar_1, viewDir_9) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_10.y = (1.0 - clamp (dot (tmpvar_1, viewDir_9), 0.0, 1.0));
  mediump vec2 tmpvar_11;
  tmpvar_11.x = ((tmpvar_10 * tmpvar_10) * (tmpvar_10 * tmpvar_10)).x;
  tmpvar_11.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_NHxRoughness, tmpvar_11);
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_12.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic)))
  ) * tmpvar_8) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  mediump vec4 xlat_varoutput_14;
  xlat_varoutput_14.xyz = tmpvar_13.xyz;
  xlat_varoutput_14.w = 1.0;
  gl_FragData[0] = xlat_varoutput_14;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec2 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
mediump vec3 t16_5;
void main()
{
    //Instruction 6179
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 6180
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 6181
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 6182
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 6183
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 6184
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 6185
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 6186
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 6187
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 6188
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 6189
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 6190
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 6191
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 6192
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 6193
    //DP3
    t16_2 = dot(t1.xyz, t1.xyz);
    //Instruction 6194
    //RSQ
    t16_2 = inversesqrt(t16_2);
    //Instruction 6195
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * vec3(t16_2);
    //Instruction 6196
    //MOV
    t1.w = t0.x;
    //Instruction 6197
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 6198
    //MAD
    t3.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t3.xyz;
    //Instruction 6199
    //MAD
    t3.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t3.xyz;
    //Instruction 6200
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 6201
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 6202
    //MUL
    t1.xyz = t0.xxx * t3.xyz;
    //Instruction 6203
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 6204
    //MUL
    t3.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 6205
    //MUL
    t3.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 6206
    //MUL
    t3.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 6207
    //MUL
    t4.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 6208
    //MUL
    t4.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 6209
    //MUL
    t4.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 6210
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 6211
    //MUL
    t4.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 6212
    //MUL
    t4.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 6213
    //MUL
    t4.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 6214
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 6215
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 6216
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 6217
    //MUL
    t2.xyz = t0.xxx * t3.xyz;
    //Instruction 6218
    //MUL
    t16_5.xyz = t1.yzx * t2.zxy;
    //Instruction 6219
    //MAD
    t16_5.xyz = t2.yzx * t1.zxy + (-t16_5.xyz);
    //Instruction 6220
    //MUL
    vs_TEXCOORD3.xyz = t16_5.xyz * in_TANGENT0.www;
    //Instruction 6221
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 6222
    //MOV
    t2.w = t0.z;
    //Instruction 6223
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 6224
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 6225
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 6226
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 6227
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 6228
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 6229
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 6230
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 6231
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 6232
    //DP4
    t3.x = dot(t16_0, t1);
    //Instruction 6233
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 6234
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 6235
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 6236
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 6237
    //DP4
    t3.y = dot(t16_0, t1);
    //Instruction 6238
    //MOV
    vs_TEXCOORD5.xy = t3.xy;
    //Instruction 6239
    //MUL
    t0 = t1.yyyy * unity_World2Shadow[0][1];
    //Instruction 6240
    //MAD
    t0 = unity_World2Shadow[0][0] * t1.xxxx + t0;
    //Instruction 6241
    //MAD
    t0 = unity_World2Shadow[0][2] * t1.zzzz + t0;
    //Instruction 6242
    //MAD
    t0 = unity_World2Shadow[0][3] * t1.wwww + t0;
    //Instruction 6243
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 6244
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec2 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump float t16_1;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_6;
lowp vec3 t10_6;
mediump vec3 t16_7;
mediump float t16_15;
void main()
{
    //Instruction 6146
    //SAMPLE_C_LZ
    vec3 txVec23 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec23, 0.0);
    //Instruction 6147
    //ADD
    t16_5 = (-_LightShadowData.x) + 1.0;
    //Instruction 6148
    //MAD
    t16_0.x = t16_0.x * t16_5 + _LightShadowData.x;
    //Instruction 6149
    //SAMPLE
    t10_1 = texture(_LightTexture0, vs_TEXCOORD5.xy).w;
    //Instruction 6150
    //MUL
    t16_1 = t16_0.x * t10_1;
    //Instruction 6151
    //MUL
    t16_0.xyz = vec3(t16_1) * _LightColor0.xyz;
    //Instruction 6152
    //DP3
    t16_15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 6153
    //RSQ
    t16_15 = inversesqrt(t16_15);
    //Instruction 6154
    //MUL
    t16_2.xyz = vec3(t16_15) * vs_TEXCOORD4.xyz;
    //Instruction 6155
    //DP3
    t16_15 = dot((-vs_TEXCOORD1.xyz), t16_2.xyz);
    //Instruction 6156
    //ADD
    t16_15 = t16_15 + t16_15;
    //Instruction 6157
    //MAD
    t16_3.xyz = t16_2.xyz * (-vec3(t16_15)) + (-vs_TEXCOORD1.xyz);
    //Instruction 6158
    //MOV
    t16_4.x = vs_TEXCOORD2.w;
    //Instruction 6159
    //MOV
    t16_4.y = vs_TEXCOORD3.w;
    //Instruction 6160
    //MOV
    t16_4.z = vs_TEXCOORD4.w;
    //Instruction 6161
    //DP3
    t16_15 = dot(t16_3.xyz, t16_4.xyz);
    //Instruction 6162
    //DP3
    t16_2.x = dot(t16_2.xyz, t16_4.xyz);
    t16_2.x = clamp(t16_2.x, 0.0, 1.0);
    //Instruction 6163
    //MUL
    t16_15 = t16_15 * t16_15;
    //Instruction 6164
    //MUL
    t16_3.x = t16_15 * t16_15;
    //Instruction 6165
    //ADD
    t16_3.y = (-_Glossiness) + 1.0;
    //Instruction 6166
    //SAMPLE
    t10_1 = texture(unity_NHxRoughness, t16_3.xy).w;
    //Instruction 6167
    //MUL
    t16_1 = t10_1 * 16.000000;
    //Instruction 6168
    //SAMPLE
    t10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 6169
    //MAD
    t16_7.xyz = _Color.xyz * t10_6.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 6170
    //MUL
    t16_6.xyz = t10_6.xyz * _Color.xyz;
    //Instruction 6171
    //MAD
    t16_7.xyz = vec3(_Metallic) * t16_7.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 6172
    //MUL
    t16_7.xyz = vec3(t16_1) * t16_7.xyz;
    //Instruction 6173
    //MAD
    t16_15 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 6174
    //MAD
    t16_7.xyz = t16_6.xyz * vec3(t16_15) + t16_7.xyz;
    //Instruction 6175
    //MUL
    t16_0.xyz = t16_0.xyz * t16_7.xyz;
    //Instruction 6176
    //MUL
    SV_Target0.xyz = t16_2.xxx * t16_0.xyz;
    //Instruction 6177
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 6178
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_OFF" "FOG_EXP2" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp vec3 lightDir_5;
  highp mat3 tangentToWorld_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex);
  tmpvar_7 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_14;
  n_14 = (tmpvar_11.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  highp vec3 dir_20;
  dir_20 = tmpvar_4.xyz;
  highp mat3 tmpvar_21;
  tmpvar_21[0] = _Object2World[0].xyz;
  tmpvar_21[1] = _Object2World[1].xyz;
  tmpvar_21[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = normalize((tmpvar_21 * dir_20));
  tmpvar_22.w = tmpvar_4.w;
  highp vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22.www;
  mediump vec3 normal_24;
  normal_24 = tmpvar_19;
  mediump vec3 tangent_25;
  tangent_25 = tmpvar_22.xyz;
  mediump vec3 flip_26;
  flip_26 = tmpvar_23;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (((normal_24.yzx * tangent_25.zxy) - (normal_24.zxy * tangent_25.yzx)) * flip_26);
  mediump mat3 tmpvar_28;
  tmpvar_28[0].x = tangent_25.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = normal_24.x;
  tmpvar_28[1].x = tangent_25.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = normal_24.y;
  tmpvar_28[2].x = tangent_25.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = normal_24.z;
  tangentToWorld_6 = tmpvar_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_6[0].x;
  v_29.y = tangentToWorld_6[1].x;
  v_29.z = tangentToWorld_6[2].x;
  tmpvar_8.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_6[0].y;
  v_30.y = tangentToWorld_6[1].y;
  v_30.z = tangentToWorld_6[2].y;
  tmpvar_9.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_6[0].z;
  v_31.y = tangentToWorld_6[1].z;
  v_31.z = tangentToWorld_6[2].z;
  tmpvar_10.xyz = v_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (_WorldSpaceLightPos0.xyz - (tmpvar_11.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 n_33;
  n_33 = tmpvar_32;
  mediump vec3 tmpvar_34;
  tmpvar_34 = normalize(n_33);
  lightDir_5 = tmpvar_34;
  tmpvar_8.w = lightDir_5.x;
  tmpvar_9.w = lightDir_5.y;
  tmpvar_10.w = lightDir_5.z;
  highp float tmpvar_35;
  tmpvar_35 = (unity_FogParams.x * tmpvar_7.z);
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = normalize(n_14);
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD2_1 = tmpvar_9;
  xlv_TEXCOORD2_2 = tmpvar_10;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = exp2((-(tmpvar_35) * tmpvar_35));
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _LightTexture0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  mediump vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  highp float tmpvar_6;
  tmpvar_6 = dot (xlv_TEXCOORD5, xlv_TEXCOORD5);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightTexture0, vec2(tmpvar_6));
  mediump float atten_8;
  atten_8 = tmpvar_7.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  tmpvar_9 = (tmpvar_9 * atten_8);
  mediump vec3 viewDir_10;
  viewDir_10 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_11;
  tmpvar_11.x = dot ((viewDir_10 - (2.0 * 
    (dot (tmpvar_2, viewDir_10) * tmpvar_2)
  )), tmpvar_5);
  tmpvar_11.y = (1.0 - clamp (dot (tmpvar_2, viewDir_10), 0.0, 1.0));
  mediump vec2 tmpvar_12;
  tmpvar_12.x = ((tmpvar_11 * tmpvar_11) * (tmpvar_11 * tmpvar_11)).x;
  tmpvar_12.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (unity_NHxRoughness, tmpvar_12);
  mediump vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = (((
    (tmpvar_4 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_13.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic)))
  ) * tmpvar_9) * clamp (dot (tmpvar_2, tmpvar_5), 0.0, 1.0));
  c_1.w = tmpvar_14.w;
  highp float tmpvar_15;
  tmpvar_15 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (tmpvar_14.xyz * vec3(tmpvar_15));
  mediump vec4 xlat_varoutput_16;
  xlat_varoutput_16.xyz = c_1.xyz;
  xlat_varoutput_16.w = 1.0;
  gl_FragData[0] = xlat_varoutput_16;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" "FOG_EXP2" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 6278
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 6279
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 6280
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 6281
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 6282
    //MOV
    gl_Position = t0;
    //Instruction 6283
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 6284
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 6285
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 6286
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 6287
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 6288
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 6289
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 6290
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 6291
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 6292
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 6293
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 6294
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 6295
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 6296
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 6297
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 6298
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 6299
    //DP3
    t16_2.x = dot(t0.xyz, t0.xyz);
    //Instruction 6300
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 6301
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xxx;
    //Instruction 6302
    //MOV
    vs_TEXCOORD2.w = t16_2.x;
    //Instruction 6303
    //MUL
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 6304
    //MAD
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    //Instruction 6305
    //MAD
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    //Instruction 6306
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 6307
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 6308
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 6309
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 6310
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 6311
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 6312
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 6313
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 6314
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 6315
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 6316
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 6317
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 6318
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 6319
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 6320
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 6321
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 6322
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 6323
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 6324
    //MUL
    t16_4.xyz = t0.yzx * t1.zxy;
    //Instruction 6325
    //MAD
    t16_4.xyz = t1.yzx * t0.zxy + (-t16_4.xyz);
    //Instruction 6326
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 6327
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 6328
    //MOV
    vs_TEXCOORD3.w = t16_2.y;
    //Instruction 6329
    //MOV
    vs_TEXCOORD4.w = t16_2.z;
    //Instruction 6330
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 6331
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 6332
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 6333
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 6334
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 6335
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 6336
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 6337
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 6338
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 6339
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 6340
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 6341
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 6342
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 6343
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 6344
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 6345
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 6346
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 6347
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 6348
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 6349
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D unity_NHxRoughness;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
highp vec3 t3;
mediump float t16_3;
lowp float t10_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
lowp vec3 t10_7;
mediump float t16_12;
void main()
{
    //Instruction 6245
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 6246
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 6247
    //MUL
    t16_0.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 6248
    //DP3
    t16_12 = dot((-vs_TEXCOORD1.xyz), t16_0.xyz);
    //Instruction 6249
    //ADD
    t16_12 = t16_12 + t16_12;
    //Instruction 6250
    //MAD
    t16_1.xyz = t16_0.xyz * (-vec3(t16_12)) + (-vs_TEXCOORD1.xyz);
    //Instruction 6251
    //MOV
    t16_2.x = vs_TEXCOORD2.w;
    //Instruction 6252
    //MOV
    t16_2.y = vs_TEXCOORD3.w;
    //Instruction 6253
    //MOV
    t16_2.z = vs_TEXCOORD4.w;
    //Instruction 6254
    //DP3
    t16_12 = dot(t16_1.xyz, t16_2.xyz);
    //Instruction 6255
    //DP3
    t16_0.x = dot(t16_0.xyz, t16_2.xyz);
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 6256
    //MUL
    t16_4.x = t16_12 * t16_12;
    //Instruction 6257
    //MUL
    t16_1.x = t16_4.x * t16_4.x;
    //Instruction 6258
    //ADD
    t16_1.y = (-_Glossiness) + 1.0;
    //Instruction 6259
    //SAMPLE
    t10_3 = texture(unity_NHxRoughness, t16_1.xy).w;
    //Instruction 6260
    //MUL
    t16_3 = t10_3 * 16.000000;
    //Instruction 6261
    //SAMPLE
    t10_7.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 6262
    //MAD
    t16_4.xyz = _Color.xyz * t10_7.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 6263
    //MUL
    t16_7.xyz = t10_7.xyz * _Color.xyz;
    //Instruction 6264
    //MAD
    t16_4.xyz = vec3(_Metallic) * t16_4.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 6265
    //MUL
    t16_4.xyz = t16_4.xyz * vec3(t16_3);
    //Instruction 6266
    //MAD
    t16_1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 6267
    //MAD
    t16_4.xyz = t16_7.xyz * t16_1.xxx + t16_4.xyz;
    //Instruction 6268
    //DP3
    t3.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 6269
    //SAMPLE
    t10_3 = texture(_LightTexture0, t3.xx).w;
    //Instruction 6270
    //MUL
    t16_1.xyz = vec3(t10_3) * _LightColor0.xyz;
    //Instruction 6271
    //MUL
    t16_4.xyz = t16_4.xyz * t16_1.xyz;
    //Instruction 6272
    //MUL
    t16_0.xyz = t16_0.xxx * t16_4.xyz;
    //Instruction 6273
    //MOV
    t3.x = vs_TEXCOORD7;
    t3.x = clamp(t3.x, 0.0, 1.0);
    //Instruction 6274
    //MUL
    t3.xyz = t16_0.xyz * t3.xxx;
    //Instruction 6275
    //MOV
    SV_Target0.xyz = t3.xyz;
    //Instruction 6276
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 6277
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "FOG_EXP2" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp mat3 tangentToWorld_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  tmpvar_6 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_13;
  n_13 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_14;
  norm_14 = tmpvar_1;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  highp vec3 dir_19;
  dir_19 = tmpvar_4.xyz;
  highp mat3 tmpvar_20;
  tmpvar_20[0] = _Object2World[0].xyz;
  tmpvar_20[1] = _Object2World[1].xyz;
  tmpvar_20[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_21;
  tmpvar_21.xyz = normalize((tmpvar_20 * dir_19));
  tmpvar_21.w = tmpvar_4.w;
  highp vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21.www;
  mediump vec3 normal_23;
  normal_23 = tmpvar_18;
  mediump vec3 tangent_24;
  tangent_24 = tmpvar_21.xyz;
  mediump vec3 flip_25;
  flip_25 = tmpvar_22;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (((normal_23.yzx * tangent_24.zxy) - (normal_23.zxy * tangent_24.yzx)) * flip_25);
  mediump mat3 tmpvar_27;
  tmpvar_27[0].x = tangent_24.x;
  tmpvar_27[0].y = tmpvar_26.x;
  tmpvar_27[0].z = normal_23.x;
  tmpvar_27[1].x = tangent_24.y;
  tmpvar_27[1].y = tmpvar_26.y;
  tmpvar_27[1].z = normal_23.y;
  tmpvar_27[2].x = tangent_24.z;
  tmpvar_27[2].y = tmpvar_26.z;
  tmpvar_27[2].z = normal_23.z;
  tangentToWorld_5 = tmpvar_27;
  highp vec3 v_28;
  v_28.x = tangentToWorld_5[0].x;
  v_28.y = tangentToWorld_5[1].x;
  v_28.z = tangentToWorld_5[2].x;
  tmpvar_7.xyz = v_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_5[0].y;
  v_29.y = tangentToWorld_5[1].y;
  v_29.z = tangentToWorld_5[2].y;
  tmpvar_8.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_5[0].z;
  v_30.y = tangentToWorld_5[1].z;
  v_30.z = tangentToWorld_5[2].z;
  tmpvar_9.xyz = v_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  tmpvar_7.w = tmpvar_31.x;
  tmpvar_8.w = tmpvar_31.y;
  tmpvar_9.w = tmpvar_31.z;
  highp float tmpvar_32;
  tmpvar_32 = (unity_FogParams.x * tmpvar_6.z);
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = normalize(n_13);
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD2_1 = tmpvar_8;
  xlv_TEXCOORD2_2 = tmpvar_9;
  xlv_TEXCOORD7 = exp2((-(tmpvar_32) * tmpvar_32));
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  mediump vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  mediump vec3 tmpvar_6;
  tmpvar_6 = _LightColor0.xyz;
  mediump vec3 viewDir_7;
  viewDir_7 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_8;
  tmpvar_8.x = dot ((viewDir_7 - (2.0 * 
    (dot (tmpvar_2, viewDir_7) * tmpvar_2)
  )), tmpvar_5);
  tmpvar_8.y = (1.0 - clamp (dot (tmpvar_2, viewDir_7), 0.0, 1.0));
  mediump vec2 tmpvar_9;
  tmpvar_9.x = ((tmpvar_8 * tmpvar_8) * (tmpvar_8 * tmpvar_8)).x;
  tmpvar_9.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (unity_NHxRoughness, tmpvar_9);
  mediump vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = (((
    (tmpvar_4 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_10.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic)))
  ) * tmpvar_6) * clamp (dot (tmpvar_2, tmpvar_5), 0.0, 1.0));
  c_1.w = tmpvar_11.w;
  highp float tmpvar_12;
  tmpvar_12 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (tmpvar_11.xyz * vec3(tmpvar_12));
  mediump vec4 xlat_varoutput_13;
  xlat_varoutput_13.xyz = c_1.xyz;
  xlat_varoutput_13.w = 1.0;
  gl_FragData[0] = xlat_varoutput_13;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "FOG_EXP2" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
mediump vec3 t16_5;
void main()
{
    //Instruction 6380
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 6381
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 6382
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 6383
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 6384
    //MOV
    gl_Position = t0;
    //Instruction 6385
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 6386
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 6387
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 6388
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 6389
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 6390
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 6391
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 6392
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 6393
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 6394
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 6395
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 6396
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 6397
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 6398
    //DP3
    t16_2 = dot(t1.xyz, t1.xyz);
    //Instruction 6399
    //RSQ
    t16_2 = inversesqrt(t16_2);
    //Instruction 6400
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * vec3(t16_2);
    //Instruction 6401
    //MOV
    t1.w = t0.x;
    //Instruction 6402
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 6403
    //MAD
    t3.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t3.xyz;
    //Instruction 6404
    //MAD
    t3.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t3.xyz;
    //Instruction 6405
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 6406
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 6407
    //MUL
    t1.xyz = t0.xxx * t3.xyz;
    //Instruction 6408
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 6409
    //MUL
    t3.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 6410
    //MUL
    t3.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 6411
    //MUL
    t3.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 6412
    //MUL
    t4.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 6413
    //MUL
    t4.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 6414
    //MUL
    t4.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 6415
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 6416
    //MUL
    t4.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 6417
    //MUL
    t4.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 6418
    //MUL
    t4.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 6419
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 6420
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 6421
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 6422
    //MUL
    t2.xyz = t0.xxx * t3.xyz;
    //Instruction 6423
    //MUL
    t16_5.xyz = t1.yzx * t2.zxy;
    //Instruction 6424
    //MAD
    t16_5.xyz = t2.yzx * t1.zxy + (-t16_5.xyz);
    //Instruction 6425
    //MUL
    vs_TEXCOORD3.xyz = t16_5.xyz * in_TANGENT0.www;
    //Instruction 6426
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 6427
    //MOV
    t2.w = t0.z;
    //Instruction 6428
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 6429
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D unity_NHxRoughness;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
highp vec3 t3;
mediump float t16_3;
lowp float t10_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
lowp vec3 t10_7;
mediump float t16_12;
void main()
{
    //Instruction 6350
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 6351
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 6352
    //MUL
    t16_0.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 6353
    //DP3
    t16_12 = dot((-vs_TEXCOORD1.xyz), t16_0.xyz);
    //Instruction 6354
    //ADD
    t16_12 = t16_12 + t16_12;
    //Instruction 6355
    //MAD
    t16_1.xyz = t16_0.xyz * (-vec3(t16_12)) + (-vs_TEXCOORD1.xyz);
    //Instruction 6356
    //MOV
    t16_2.x = vs_TEXCOORD2.w;
    //Instruction 6357
    //MOV
    t16_2.y = vs_TEXCOORD3.w;
    //Instruction 6358
    //MOV
    t16_2.z = vs_TEXCOORD4.w;
    //Instruction 6359
    //DP3
    t16_12 = dot(t16_1.xyz, t16_2.xyz);
    //Instruction 6360
    //DP3
    t16_0.x = dot(t16_0.xyz, t16_2.xyz);
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 6361
    //MUL
    t16_4.x = t16_12 * t16_12;
    //Instruction 6362
    //MUL
    t16_1.x = t16_4.x * t16_4.x;
    //Instruction 6363
    //ADD
    t16_1.y = (-_Glossiness) + 1.0;
    //Instruction 6364
    //SAMPLE
    t10_3 = texture(unity_NHxRoughness, t16_1.xy).w;
    //Instruction 6365
    //MUL
    t16_3 = t10_3 * 16.000000;
    //Instruction 6366
    //SAMPLE
    t10_7.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 6367
    //MAD
    t16_4.xyz = _Color.xyz * t10_7.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 6368
    //MUL
    t16_7.xyz = t10_7.xyz * _Color.xyz;
    //Instruction 6369
    //MAD
    t16_4.xyz = vec3(_Metallic) * t16_4.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 6370
    //MUL
    t16_4.xyz = t16_4.xyz * vec3(t16_3);
    //Instruction 6371
    //MAD
    t16_1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 6372
    //MAD
    t16_4.xyz = t16_7.xyz * t16_1.xxx + t16_4.xyz;
    //Instruction 6373
    //MUL
    t16_4.xyz = t16_4.xyz * _LightColor0.xyz;
    //Instruction 6374
    //MUL
    t16_0.xyz = t16_0.xxx * t16_4.xyz;
    //Instruction 6375
    //MOV
    t3.x = vs_TEXCOORD7;
    t3.x = clamp(t3.x, 0.0, 1.0);
    //Instruction 6376
    //MUL
    t3.xyz = t16_0.xyz * t3.xxx;
    //Instruction 6377
    //MOV
    SV_Target0.xyz = t3.xyz;
    //Instruction 6378
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 6379
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_OFF" "FOG_EXP2" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp vec3 lightDir_5;
  highp mat3 tangentToWorld_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  tmpvar_7 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_15;
  n_15 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp vec4 v_17;
  v_17.x = _World2Object[0].x;
  v_17.y = _World2Object[1].x;
  v_17.z = _World2Object[2].x;
  v_17.w = _World2Object[3].x;
  highp vec4 v_18;
  v_18.x = _World2Object[0].y;
  v_18.y = _World2Object[1].y;
  v_18.z = _World2Object[2].y;
  v_18.w = _World2Object[3].y;
  highp vec4 v_19;
  v_19.x = _World2Object[0].z;
  v_19.y = _World2Object[1].z;
  v_19.z = _World2Object[2].z;
  v_19.w = _World2Object[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(((
    (v_17.xyz * norm_16.x)
   + 
    (v_18.xyz * norm_16.y)
  ) + (v_19.xyz * norm_16.z)));
  highp vec3 dir_21;
  dir_21 = tmpvar_4.xyz;
  highp mat3 tmpvar_22;
  tmpvar_22[0] = _Object2World[0].xyz;
  tmpvar_22[1] = _Object2World[1].xyz;
  tmpvar_22[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_23;
  tmpvar_23.xyz = normalize((tmpvar_22 * dir_21));
  tmpvar_23.w = tmpvar_4.w;
  highp vec3 tmpvar_24;
  tmpvar_24 = tmpvar_23.www;
  mediump vec3 normal_25;
  normal_25 = tmpvar_20;
  mediump vec3 tangent_26;
  tangent_26 = tmpvar_23.xyz;
  mediump vec3 flip_27;
  flip_27 = tmpvar_24;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (((normal_25.yzx * tangent_26.zxy) - (normal_25.zxy * tangent_26.yzx)) * flip_27);
  mediump mat3 tmpvar_29;
  tmpvar_29[0].x = tangent_26.x;
  tmpvar_29[0].y = tmpvar_28.x;
  tmpvar_29[0].z = normal_25.x;
  tmpvar_29[1].x = tangent_26.y;
  tmpvar_29[1].y = tmpvar_28.y;
  tmpvar_29[1].z = normal_25.y;
  tmpvar_29[2].x = tangent_26.z;
  tmpvar_29[2].y = tmpvar_28.z;
  tmpvar_29[2].z = normal_25.z;
  tangentToWorld_6 = tmpvar_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_6[0].x;
  v_30.y = tangentToWorld_6[1].x;
  v_30.z = tangentToWorld_6[2].x;
  tmpvar_8.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_6[0].y;
  v_31.y = tangentToWorld_6[1].y;
  v_31.z = tangentToWorld_6[2].y;
  tmpvar_9.xyz = v_31;
  highp vec3 v_32;
  v_32.x = tangentToWorld_6[0].z;
  v_32.y = tangentToWorld_6[1].z;
  v_32.z = tangentToWorld_6[2].z;
  tmpvar_10.xyz = v_32;
  tmpvar_11 = (_LightMatrix0 * (_Object2World * _glesVertex));
  highp vec3 tmpvar_33;
  tmpvar_33 = (_WorldSpaceLightPos0.xyz - (tmpvar_12.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 n_34;
  n_34 = tmpvar_33;
  mediump vec3 tmpvar_35;
  tmpvar_35 = normalize(n_34);
  lightDir_5 = tmpvar_35;
  tmpvar_8.w = lightDir_5.x;
  tmpvar_9.w = lightDir_5.y;
  tmpvar_10.w = lightDir_5.z;
  highp float tmpvar_36;
  tmpvar_36 = (unity_FogParams.x * tmpvar_7.z);
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = normalize(n_15);
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD2_1 = tmpvar_9;
  xlv_TEXCOORD2_2 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD7 = exp2((-(tmpvar_36) * tmpvar_36));
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  mediump vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_6;
  mediump vec2 P_7;
  P_7 = ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5);
  tmpvar_6 = texture2D (_LightTexture0, P_7);
  highp vec3 LightCoord_8;
  LightCoord_8 = xlv_TEXCOORD5.xyz;
  highp float tmpvar_9;
  tmpvar_9 = dot (LightCoord_8, LightCoord_8);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_LightTextureB0, vec2(tmpvar_9));
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  tmpvar_11 = (tmpvar_11 * ((
    float((xlv_TEXCOORD5.z > 0.0))
   * tmpvar_6.w) * tmpvar_10.w));
  mediump vec3 viewDir_12;
  viewDir_12 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_13;
  tmpvar_13.x = dot ((viewDir_12 - (2.0 * 
    (dot (tmpvar_2, viewDir_12) * tmpvar_2)
  )), tmpvar_5);
  tmpvar_13.y = (1.0 - clamp (dot (tmpvar_2, viewDir_12), 0.0, 1.0));
  mediump vec2 tmpvar_14;
  tmpvar_14.x = ((tmpvar_13 * tmpvar_13) * (tmpvar_13 * tmpvar_13)).x;
  tmpvar_14.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_NHxRoughness, tmpvar_14);
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = (((
    (tmpvar_4 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_15.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic)))
  ) * tmpvar_11) * clamp (dot (tmpvar_2, tmpvar_5), 0.0, 1.0));
  c_1.w = tmpvar_16.w;
  highp float tmpvar_17;
  tmpvar_17 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (tmpvar_16.xyz * vec3(tmpvar_17));
  mediump vec4 xlat_varoutput_18;
  xlat_varoutput_18.xyz = c_1.xyz;
  xlat_varoutput_18.w = 1.0;
  gl_FragData[0] = xlat_varoutput_18;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" "FOG_EXP2" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 6470
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 6471
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 6472
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 6473
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 6474
    //MOV
    gl_Position = t0;
    //Instruction 6475
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 6476
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 6477
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 6478
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 6479
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 6480
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 6481
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 6482
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 6483
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 6484
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 6485
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 6486
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 6487
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 6488
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 6489
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 6490
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 6491
    //DP3
    t16_2.x = dot(t0.xyz, t0.xyz);
    //Instruction 6492
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 6493
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xxx;
    //Instruction 6494
    //MOV
    vs_TEXCOORD2.w = t16_2.x;
    //Instruction 6495
    //MUL
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 6496
    //MAD
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    //Instruction 6497
    //MAD
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    //Instruction 6498
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 6499
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 6500
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 6501
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 6502
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 6503
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 6504
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 6505
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 6506
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 6507
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 6508
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 6509
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 6510
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 6511
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 6512
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 6513
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 6514
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 6515
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 6516
    //MUL
    t16_4.xyz = t0.yzx * t1.zxy;
    //Instruction 6517
    //MAD
    t16_4.xyz = t1.yzx * t0.zxy + (-t16_4.xyz);
    //Instruction 6518
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 6519
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 6520
    //MOV
    vs_TEXCOORD3.w = t16_2.y;
    //Instruction 6521
    //MOV
    vs_TEXCOORD4.w = t16_2.z;
    //Instruction 6522
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 6523
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 6524
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 6525
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 6526
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 6527
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 6528
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 6529
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 6530
    //DP4
    t0.x = dot(t16_0, t1);
    //Instruction 6531
    //MOV
    t16_2.x = _LightMatrix0[0].y;
    //Instruction 6532
    //MOV
    t16_2.y = _LightMatrix0[1].y;
    //Instruction 6533
    //MOV
    t16_2.z = _LightMatrix0[2].y;
    //Instruction 6534
    //MOV
    t16_2.w = _LightMatrix0[3].y;
    //Instruction 6535
    //DP4
    t0.y = dot(t16_2, t1);
    //Instruction 6536
    //MOV
    t16_2.x = _LightMatrix0[0].z;
    //Instruction 6537
    //MOV
    t16_2.y = _LightMatrix0[1].z;
    //Instruction 6538
    //MOV
    t16_2.z = _LightMatrix0[2].z;
    //Instruction 6539
    //MOV
    t16_2.w = _LightMatrix0[3].z;
    //Instruction 6540
    //DP4
    t0.z = dot(t16_2, t1);
    //Instruction 6541
    //MOV
    t16_2.x = _LightMatrix0[0].w;
    //Instruction 6542
    //MOV
    t16_2.y = _LightMatrix0[1].w;
    //Instruction 6543
    //MOV
    t16_2.z = _LightMatrix0[2].w;
    //Instruction 6544
    //MOV
    t16_2.w = _LightMatrix0[3].w;
    //Instruction 6545
    //DP4
    t0.w = dot(t16_2, t1);
    //Instruction 6546
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 6547
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2D unity_NHxRoughness;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_7;
lowp vec3 t10_7;
bool tb7;
mediump vec3 t16_9;
mediump float t16_18;
void main()
{
    //Instruction 6430
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    //Instruction 6431
    //ADD
    t16_0.xy = t16_0.xy + vec2(0.500000, 0.500000);
    //Instruction 6432
    //SAMPLE
    t10_1 = texture(_LightTexture0, t16_0.xy).w;
    //Instruction 6433
    //LT
    tb7 = 0.0<vs_TEXCOORD5.z;
    //Instruction 6434
    //MOVC
    t10_2 = (tb7) ? 1.0 : 0.0;
    //Instruction 6435
    //MUL
    t10_2 = t10_1 * t10_2;
    //Instruction 6436
    //DP3
    t16_1 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 6437
    //SAMPLE
    t10_1 = texture(_LightTextureB0, vec2(t16_1)).w;
    //Instruction 6438
    //MUL
    t10_2 = t10_1 * t10_2;
    //Instruction 6439
    //MUL
    t16_0.xyz = vec3(t10_2) * _LightColor0.xyz;
    //Instruction 6440
    //DP3
    t16_18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 6441
    //RSQ
    t16_18 = inversesqrt(t16_18);
    //Instruction 6442
    //MUL
    t16_3.xyz = vec3(t16_18) * vs_TEXCOORD4.xyz;
    //Instruction 6443
    //DP3
    t16_18 = dot((-vs_TEXCOORD1.xyz), t16_3.xyz);
    //Instruction 6444
    //ADD
    t16_18 = t16_18 + t16_18;
    //Instruction 6445
    //MAD
    t16_4.xyz = t16_3.xyz * (-vec3(t16_18)) + (-vs_TEXCOORD1.xyz);
    //Instruction 6446
    //MOV
    t16_5.x = vs_TEXCOORD2.w;
    //Instruction 6447
    //MOV
    t16_5.y = vs_TEXCOORD3.w;
    //Instruction 6448
    //MOV
    t16_5.z = vs_TEXCOORD4.w;
    //Instruction 6449
    //DP3
    t16_18 = dot(t16_4.xyz, t16_5.xyz);
    //Instruction 6450
    //DP3
    t16_3.x = dot(t16_3.xyz, t16_5.xyz);
    t16_3.x = clamp(t16_3.x, 0.0, 1.0);
    //Instruction 6451
    //MUL
    t16_18 = t16_18 * t16_18;
    //Instruction 6452
    //MUL
    t16_4.x = t16_18 * t16_18;
    //Instruction 6453
    //ADD
    t16_4.y = (-_Glossiness) + 1.0;
    //Instruction 6454
    //SAMPLE
    t10_1 = texture(unity_NHxRoughness, t16_4.xy).w;
    //Instruction 6455
    //MUL
    t16_1 = t10_1 * 16.000000;
    //Instruction 6456
    //SAMPLE
    t10_7.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 6457
    //MAD
    t16_9.xyz = _Color.xyz * t10_7.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 6458
    //MUL
    t16_7.xyz = t10_7.xyz * _Color.xyz;
    //Instruction 6459
    //MAD
    t16_9.xyz = vec3(_Metallic) * t16_9.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 6460
    //MUL
    t16_9.xyz = vec3(t16_1) * t16_9.xyz;
    //Instruction 6461
    //MAD
    t16_18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 6462
    //MAD
    t16_9.xyz = t16_7.xyz * vec3(t16_18) + t16_9.xyz;
    //Instruction 6463
    //MUL
    t16_0.xyz = t16_0.xyz * t16_9.xyz;
    //Instruction 6464
    //MUL
    t16_0.xyz = t16_3.xxx * t16_0.xyz;
    //Instruction 6465
    //MOV
    t1.x = vs_TEXCOORD7;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 6466
    //MUL
    t1.xyz = t16_0.xyz * t1.xxx;
    //Instruction 6467
    //MOV
    SV_Target0.xyz = t1.xyz;
    //Instruction 6468
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 6469
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "FOG_EXP2" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp vec3 lightDir_5;
  highp mat3 tangentToWorld_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex);
  tmpvar_7 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_14;
  n_14 = (tmpvar_11.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  highp vec3 dir_20;
  dir_20 = tmpvar_4.xyz;
  highp mat3 tmpvar_21;
  tmpvar_21[0] = _Object2World[0].xyz;
  tmpvar_21[1] = _Object2World[1].xyz;
  tmpvar_21[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = normalize((tmpvar_21 * dir_20));
  tmpvar_22.w = tmpvar_4.w;
  highp vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22.www;
  mediump vec3 normal_24;
  normal_24 = tmpvar_19;
  mediump vec3 tangent_25;
  tangent_25 = tmpvar_22.xyz;
  mediump vec3 flip_26;
  flip_26 = tmpvar_23;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (((normal_24.yzx * tangent_25.zxy) - (normal_24.zxy * tangent_25.yzx)) * flip_26);
  mediump mat3 tmpvar_28;
  tmpvar_28[0].x = tangent_25.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = normal_24.x;
  tmpvar_28[1].x = tangent_25.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = normal_24.y;
  tmpvar_28[2].x = tangent_25.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = normal_24.z;
  tangentToWorld_6 = tmpvar_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_6[0].x;
  v_29.y = tangentToWorld_6[1].x;
  v_29.z = tangentToWorld_6[2].x;
  tmpvar_8.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_6[0].y;
  v_30.y = tangentToWorld_6[1].y;
  v_30.z = tangentToWorld_6[2].y;
  tmpvar_9.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_6[0].z;
  v_31.y = tangentToWorld_6[1].z;
  v_31.z = tangentToWorld_6[2].z;
  tmpvar_10.xyz = v_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (_WorldSpaceLightPos0.xyz - (tmpvar_11.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 n_33;
  n_33 = tmpvar_32;
  mediump vec3 tmpvar_34;
  tmpvar_34 = normalize(n_33);
  lightDir_5 = tmpvar_34;
  tmpvar_8.w = lightDir_5.x;
  tmpvar_9.w = lightDir_5.y;
  tmpvar_10.w = lightDir_5.z;
  highp float tmpvar_35;
  tmpvar_35 = (unity_FogParams.x * tmpvar_7.z);
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = normalize(n_14);
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD2_1 = tmpvar_9;
  xlv_TEXCOORD2_2 = tmpvar_10;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = exp2((-(tmpvar_35) * tmpvar_35));
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  mediump vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  highp float tmpvar_6;
  tmpvar_6 = dot (xlv_TEXCOORD5, xlv_TEXCOORD5);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightTextureB0, vec2(tmpvar_6));
  lowp vec4 tmpvar_8;
  tmpvar_8 = textureCube (_LightTexture0, xlv_TEXCOORD5);
  mediump float atten_9;
  atten_9 = (tmpvar_7.w * tmpvar_8.w);
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  tmpvar_10 = (tmpvar_10 * atten_9);
  mediump vec3 viewDir_11;
  viewDir_11 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_12;
  tmpvar_12.x = dot ((viewDir_11 - (2.0 * 
    (dot (tmpvar_2, viewDir_11) * tmpvar_2)
  )), tmpvar_5);
  tmpvar_12.y = (1.0 - clamp (dot (tmpvar_2, viewDir_11), 0.0, 1.0));
  mediump vec2 tmpvar_13;
  tmpvar_13.x = ((tmpvar_12 * tmpvar_12) * (tmpvar_12 * tmpvar_12)).x;
  tmpvar_13.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_NHxRoughness, tmpvar_13);
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = (((
    (tmpvar_4 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_14.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic)))
  ) * tmpvar_10) * clamp (dot (tmpvar_2, tmpvar_5), 0.0, 1.0));
  c_1.w = tmpvar_15.w;
  highp float tmpvar_16;
  tmpvar_16 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (tmpvar_15.xyz * vec3(tmpvar_16));
  mediump vec4 xlat_varoutput_17;
  xlat_varoutput_17.xyz = c_1.xyz;
  xlat_varoutput_17.w = 1.0;
  gl_FragData[0] = xlat_varoutput_17;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "FOG_EXP2" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 6062
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 6063
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 6064
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 6065
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 6066
    //MOV
    gl_Position = t0;
    //Instruction 6067
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 6068
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 6069
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 6070
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 6071
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 6072
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 6073
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 6074
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 6075
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 6076
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 6077
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 6078
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 6079
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 6080
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 6081
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 6082
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 6083
    //DP3
    t16_2.x = dot(t0.xyz, t0.xyz);
    //Instruction 6084
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 6085
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xxx;
    //Instruction 6086
    //MOV
    vs_TEXCOORD2.w = t16_2.x;
    //Instruction 6087
    //MUL
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 6088
    //MAD
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    //Instruction 6089
    //MAD
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    //Instruction 6090
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 6091
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 6092
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 6093
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 6094
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 6095
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 6096
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 6097
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 6098
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 6099
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 6100
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 6101
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 6102
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 6103
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 6104
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 6105
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 6106
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 6107
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 6108
    //MUL
    t16_4.xyz = t0.yzx * t1.zxy;
    //Instruction 6109
    //MAD
    t16_4.xyz = t1.yzx * t0.zxy + (-t16_4.xyz);
    //Instruction 6110
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 6111
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 6112
    //MOV
    vs_TEXCOORD3.w = t16_2.y;
    //Instruction 6113
    //MOV
    vs_TEXCOORD4.w = t16_2.z;
    //Instruction 6114
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 6115
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 6116
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 6117
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 6118
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 6119
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 6120
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 6121
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 6122
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 6123
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 6124
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 6125
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 6126
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 6127
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 6128
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 6129
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 6130
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 6131
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 6132
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 6133
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform lowp sampler2D unity_NHxRoughness;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp float t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
lowp vec3 t10_5;
mediump vec3 t16_7;
mediump float t16_16;
void main()
{
    //Instruction 6027
    //DP3
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 6028
    //SAMPLE
    t10_0 = texture(_LightTextureB0, t0.xx).w;
    //Instruction 6029
    //SAMPLE
    t10_5.x = texture(_LightTexture0, vs_TEXCOORD5.xyz).w;
    //Instruction 6030
    //MUL
    t16_0 = t10_5.x * t10_0;
    //Instruction 6031
    //MUL
    t16_1.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 6032
    //DP3
    t16_16 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 6033
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 6034
    //MUL
    t16_2.xyz = vec3(t16_16) * vs_TEXCOORD4.xyz;
    //Instruction 6035
    //DP3
    t16_16 = dot((-vs_TEXCOORD1.xyz), t16_2.xyz);
    //Instruction 6036
    //ADD
    t16_16 = t16_16 + t16_16;
    //Instruction 6037
    //MAD
    t16_3.xyz = t16_2.xyz * (-vec3(t16_16)) + (-vs_TEXCOORD1.xyz);
    //Instruction 6038
    //MOV
    t16_4.x = vs_TEXCOORD2.w;
    //Instruction 6039
    //MOV
    t16_4.y = vs_TEXCOORD3.w;
    //Instruction 6040
    //MOV
    t16_4.z = vs_TEXCOORD4.w;
    //Instruction 6041
    //DP3
    t16_16 = dot(t16_3.xyz, t16_4.xyz);
    //Instruction 6042
    //DP3
    t16_2.x = dot(t16_2.xyz, t16_4.xyz);
    t16_2.x = clamp(t16_2.x, 0.0, 1.0);
    //Instruction 6043
    //MUL
    t16_16 = t16_16 * t16_16;
    //Instruction 6044
    //MUL
    t16_3.x = t16_16 * t16_16;
    //Instruction 6045
    //ADD
    t16_3.y = (-_Glossiness) + 1.0;
    //Instruction 6046
    //SAMPLE
    t10_0 = texture(unity_NHxRoughness, t16_3.xy).w;
    //Instruction 6047
    //MUL
    t16_0 = t10_0 * 16.000000;
    //Instruction 6048
    //SAMPLE
    t10_5.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 6049
    //MAD
    t16_7.xyz = _Color.xyz * t10_5.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 6050
    //MUL
    t16_5.xyz = t10_5.xyz * _Color.xyz;
    //Instruction 6051
    //MAD
    t16_7.xyz = vec3(_Metallic) * t16_7.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 6052
    //MUL
    t16_7.xyz = vec3(t16_0) * t16_7.xyz;
    //Instruction 6053
    //MAD
    t16_16 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 6054
    //MAD
    t16_7.xyz = t16_5.xyz * vec3(t16_16) + t16_7.xyz;
    //Instruction 6055
    //MUL
    t16_1.xyz = t16_1.xyz * t16_7.xyz;
    //Instruction 6056
    //MUL
    t16_1.xyz = t16_2.xxx * t16_1.xyz;
    //Instruction 6057
    //MOV
    t0.x = vs_TEXCOORD7;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 6058
    //MUL
    t0.xyz = t16_1.xyz * t0.xxx;
    //Instruction 6059
    //MOV
    SV_Target0.xyz = t0.xyz;
    //Instruction 6060
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 6061
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "FOG_EXP2" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec2 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp mat3 tangentToWorld_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  tmpvar_6 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_13;
  n_13 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_14;
  norm_14 = tmpvar_1;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  highp vec3 dir_19;
  dir_19 = tmpvar_4.xyz;
  highp mat3 tmpvar_20;
  tmpvar_20[0] = _Object2World[0].xyz;
  tmpvar_20[1] = _Object2World[1].xyz;
  tmpvar_20[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_21;
  tmpvar_21.xyz = normalize((tmpvar_20 * dir_19));
  tmpvar_21.w = tmpvar_4.w;
  highp vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21.www;
  mediump vec3 normal_23;
  normal_23 = tmpvar_18;
  mediump vec3 tangent_24;
  tangent_24 = tmpvar_21.xyz;
  mediump vec3 flip_25;
  flip_25 = tmpvar_22;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (((normal_23.yzx * tangent_24.zxy) - (normal_23.zxy * tangent_24.yzx)) * flip_25);
  mediump mat3 tmpvar_27;
  tmpvar_27[0].x = tangent_24.x;
  tmpvar_27[0].y = tmpvar_26.x;
  tmpvar_27[0].z = normal_23.x;
  tmpvar_27[1].x = tangent_24.y;
  tmpvar_27[1].y = tmpvar_26.y;
  tmpvar_27[1].z = normal_23.y;
  tmpvar_27[2].x = tangent_24.z;
  tmpvar_27[2].y = tmpvar_26.z;
  tmpvar_27[2].z = normal_23.z;
  tangentToWorld_5 = tmpvar_27;
  highp vec3 v_28;
  v_28.x = tangentToWorld_5[0].x;
  v_28.y = tangentToWorld_5[1].x;
  v_28.z = tangentToWorld_5[2].x;
  tmpvar_7.xyz = v_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_5[0].y;
  v_29.y = tangentToWorld_5[1].y;
  v_29.z = tangentToWorld_5[2].y;
  tmpvar_8.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_5[0].z;
  v_30.y = tangentToWorld_5[1].z;
  v_30.z = tangentToWorld_5[2].z;
  tmpvar_9.xyz = v_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  tmpvar_7.w = tmpvar_31.x;
  tmpvar_8.w = tmpvar_31.y;
  tmpvar_9.w = tmpvar_31.z;
  highp float tmpvar_32;
  tmpvar_32 = (unity_FogParams.x * tmpvar_6.z);
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = normalize(n_13);
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD2_1 = tmpvar_8;
  xlv_TEXCOORD2_2 = tmpvar_9;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD7 = exp2((-(tmpvar_32) * tmpvar_32));
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _LightTexture0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec2 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  mediump vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightTexture0, xlv_TEXCOORD5);
  mediump float atten_7;
  atten_7 = tmpvar_6.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _LightColor0.xyz;
  tmpvar_8 = (tmpvar_8 * atten_7);
  mediump vec3 viewDir_9;
  viewDir_9 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_10;
  tmpvar_10.x = dot ((viewDir_9 - (2.0 * 
    (dot (tmpvar_2, viewDir_9) * tmpvar_2)
  )), tmpvar_5);
  tmpvar_10.y = (1.0 - clamp (dot (tmpvar_2, viewDir_9), 0.0, 1.0));
  mediump vec2 tmpvar_11;
  tmpvar_11.x = ((tmpvar_10 * tmpvar_10) * (tmpvar_10 * tmpvar_10)).x;
  tmpvar_11.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_NHxRoughness, tmpvar_11);
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = (((
    (tmpvar_4 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_12.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic)))
  ) * tmpvar_8) * clamp (dot (tmpvar_2, tmpvar_5), 0.0, 1.0));
  c_1.w = tmpvar_13.w;
  highp float tmpvar_14;
  tmpvar_14 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (tmpvar_13.xyz * vec3(tmpvar_14));
  mediump vec4 xlat_varoutput_15;
  xlat_varoutput_15.xyz = c_1.xyz;
  xlat_varoutput_15.w = 1.0;
  gl_FragData[0] = xlat_varoutput_15;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "FOG_EXP2" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp float vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
mediump vec3 t16_5;
void main()
{
    //Instruction 6580
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 6581
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 6582
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 6583
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 6584
    //MOV
    gl_Position = t0;
    //Instruction 6585
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 6586
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 6587
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 6588
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 6589
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 6590
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 6591
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 6592
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 6593
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 6594
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 6595
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 6596
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 6597
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 6598
    //DP3
    t16_2 = dot(t1.xyz, t1.xyz);
    //Instruction 6599
    //RSQ
    t16_2 = inversesqrt(t16_2);
    //Instruction 6600
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * vec3(t16_2);
    //Instruction 6601
    //MOV
    t1.w = t0.x;
    //Instruction 6602
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 6603
    //MAD
    t3.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t3.xyz;
    //Instruction 6604
    //MAD
    t3.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t3.xyz;
    //Instruction 6605
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 6606
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 6607
    //MUL
    t1.xyz = t0.xxx * t3.xyz;
    //Instruction 6608
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 6609
    //MUL
    t3.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 6610
    //MUL
    t3.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 6611
    //MUL
    t3.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 6612
    //MUL
    t4.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 6613
    //MUL
    t4.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 6614
    //MUL
    t4.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 6615
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 6616
    //MUL
    t4.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 6617
    //MUL
    t4.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 6618
    //MUL
    t4.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 6619
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 6620
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 6621
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 6622
    //MUL
    t2.xyz = t0.xxx * t3.xyz;
    //Instruction 6623
    //MUL
    t16_5.xyz = t1.yzx * t2.zxy;
    //Instruction 6624
    //MAD
    t16_5.xyz = t2.yzx * t1.zxy + (-t16_5.xyz);
    //Instruction 6625
    //MUL
    vs_TEXCOORD3.xyz = t16_5.xyz * in_TANGENT0.www;
    //Instruction 6626
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 6627
    //MOV
    t2.w = t0.z;
    //Instruction 6628
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 6629
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 6630
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 6631
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 6632
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 6633
    //MOV
    t16_1.x = _LightMatrix0[0].x;
    //Instruction 6634
    //MOV
    t16_1.y = _LightMatrix0[1].x;
    //Instruction 6635
    //MOV
    t16_1.z = _LightMatrix0[2].x;
    //Instruction 6636
    //MOV
    t16_1.w = _LightMatrix0[3].x;
    //Instruction 6637
    //DP4
    vs_TEXCOORD5.x = dot(t16_1, t0);
    //Instruction 6638
    //MOV
    t16_1.x = _LightMatrix0[0].y;
    //Instruction 6639
    //MOV
    t16_1.y = _LightMatrix0[1].y;
    //Instruction 6640
    //MOV
    t16_1.z = _LightMatrix0[2].y;
    //Instruction 6641
    //MOV
    t16_1.w = _LightMatrix0[3].y;
    //Instruction 6642
    //DP4
    vs_TEXCOORD5.y = dot(t16_1, t0);
    //Instruction 6643
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D unity_NHxRoughness;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
in highp float vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
highp vec3 t3;
mediump float t16_3;
lowp float t10_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
lowp vec3 t10_7;
mediump float t16_12;
void main()
{
    //Instruction 6548
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 6549
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 6550
    //MUL
    t16_0.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 6551
    //DP3
    t16_12 = dot((-vs_TEXCOORD1.xyz), t16_0.xyz);
    //Instruction 6552
    //ADD
    t16_12 = t16_12 + t16_12;
    //Instruction 6553
    //MAD
    t16_1.xyz = t16_0.xyz * (-vec3(t16_12)) + (-vs_TEXCOORD1.xyz);
    //Instruction 6554
    //MOV
    t16_2.x = vs_TEXCOORD2.w;
    //Instruction 6555
    //MOV
    t16_2.y = vs_TEXCOORD3.w;
    //Instruction 6556
    //MOV
    t16_2.z = vs_TEXCOORD4.w;
    //Instruction 6557
    //DP3
    t16_12 = dot(t16_1.xyz, t16_2.xyz);
    //Instruction 6558
    //DP3
    t16_0.x = dot(t16_0.xyz, t16_2.xyz);
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 6559
    //MUL
    t16_4.x = t16_12 * t16_12;
    //Instruction 6560
    //MUL
    t16_1.x = t16_4.x * t16_4.x;
    //Instruction 6561
    //ADD
    t16_1.y = (-_Glossiness) + 1.0;
    //Instruction 6562
    //SAMPLE
    t10_3 = texture(unity_NHxRoughness, t16_1.xy).w;
    //Instruction 6563
    //MUL
    t16_3 = t10_3 * 16.000000;
    //Instruction 6564
    //SAMPLE
    t10_7.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 6565
    //MAD
    t16_4.xyz = _Color.xyz * t10_7.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 6566
    //MUL
    t16_7.xyz = t10_7.xyz * _Color.xyz;
    //Instruction 6567
    //MAD
    t16_4.xyz = vec3(_Metallic) * t16_4.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 6568
    //MUL
    t16_4.xyz = t16_4.xyz * vec3(t16_3);
    //Instruction 6569
    //MAD
    t16_1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 6570
    //MAD
    t16_4.xyz = t16_7.xyz * t16_1.xxx + t16_4.xyz;
    //Instruction 6571
    //SAMPLE
    t10_3 = texture(_LightTexture0, vs_TEXCOORD5.xy).w;
    //Instruction 6572
    //MUL
    t16_1.xyz = vec3(t10_3) * _LightColor0.xyz;
    //Instruction 6573
    //MUL
    t16_4.xyz = t16_4.xyz * t16_1.xyz;
    //Instruction 6574
    //MUL
    t16_0.xyz = t16_0.xxx * t16_4.xyz;
    //Instruction 6575
    //MOV
    t3.x = vs_TEXCOORD7;
    t3.x = clamp(t3.x, 0.0, 1.0);
    //Instruction 6576
    //MUL
    t3.xyz = t16_0.xyz * t3.xxx;
    //Instruction 6577
    //MOV
    SV_Target0.xyz = t3.xyz;
    //Instruction 6578
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 6579
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_EXP2" "SHADOWS_NONATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp vec3 lightDir_5;
  highp mat3 tangentToWorld_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec4 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = (_Object2World * _glesVertex);
  tmpvar_7 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_14;
  texcoord_14.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_15;
  if ((_UVSec == 0.0)) {
    tmpvar_15 = tmpvar_2;
  } else {
    tmpvar_15 = tmpvar_3;
  };
  texcoord_14.zw = ((tmpvar_15 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_16;
  n_16 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp vec4 v_18;
  v_18.x = _World2Object[0].x;
  v_18.y = _World2Object[1].x;
  v_18.z = _World2Object[2].x;
  v_18.w = _World2Object[3].x;
  highp vec4 v_19;
  v_19.x = _World2Object[0].y;
  v_19.y = _World2Object[1].y;
  v_19.z = _World2Object[2].y;
  v_19.w = _World2Object[3].y;
  highp vec4 v_20;
  v_20.x = _World2Object[0].z;
  v_20.y = _World2Object[1].z;
  v_20.z = _World2Object[2].z;
  v_20.w = _World2Object[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(((
    (v_18.xyz * norm_17.x)
   + 
    (v_19.xyz * norm_17.y)
  ) + (v_20.xyz * norm_17.z)));
  highp vec3 dir_22;
  dir_22 = tmpvar_4.xyz;
  highp mat3 tmpvar_23;
  tmpvar_23[0] = _Object2World[0].xyz;
  tmpvar_23[1] = _Object2World[1].xyz;
  tmpvar_23[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_24;
  tmpvar_24.xyz = normalize((tmpvar_23 * dir_22));
  tmpvar_24.w = tmpvar_4.w;
  highp vec3 tmpvar_25;
  tmpvar_25 = tmpvar_24.www;
  mediump vec3 normal_26;
  normal_26 = tmpvar_21;
  mediump vec3 tangent_27;
  tangent_27 = tmpvar_24.xyz;
  mediump vec3 flip_28;
  flip_28 = tmpvar_25;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (((normal_26.yzx * tangent_27.zxy) - (normal_26.zxy * tangent_27.yzx)) * flip_28);
  mediump mat3 tmpvar_30;
  tmpvar_30[0].x = tangent_27.x;
  tmpvar_30[0].y = tmpvar_29.x;
  tmpvar_30[0].z = normal_26.x;
  tmpvar_30[1].x = tangent_27.y;
  tmpvar_30[1].y = tmpvar_29.y;
  tmpvar_30[1].z = normal_26.y;
  tmpvar_30[2].x = tangent_27.z;
  tmpvar_30[2].y = tmpvar_29.z;
  tmpvar_30[2].z = normal_26.z;
  tangentToWorld_6 = tmpvar_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_6[0].x;
  v_31.y = tangentToWorld_6[1].x;
  v_31.z = tangentToWorld_6[2].x;
  tmpvar_8.xyz = v_31;
  highp vec3 v_32;
  v_32.x = tangentToWorld_6[0].y;
  v_32.y = tangentToWorld_6[1].y;
  v_32.z = tangentToWorld_6[2].y;
  tmpvar_9.xyz = v_32;
  highp vec3 v_33;
  v_33.x = tangentToWorld_6[0].z;
  v_33.y = tangentToWorld_6[1].z;
  v_33.z = tangentToWorld_6[2].z;
  tmpvar_10.xyz = v_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = (_Object2World * _glesVertex);
  tmpvar_11 = (_LightMatrix0 * tmpvar_34);
  tmpvar_12 = (unity_World2Shadow[0] * tmpvar_34);
  highp vec3 tmpvar_35;
  tmpvar_35 = (_WorldSpaceLightPos0.xyz - (tmpvar_13.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 n_36;
  n_36 = tmpvar_35;
  mediump vec3 tmpvar_37;
  tmpvar_37 = normalize(n_36);
  lightDir_5 = tmpvar_37;
  tmpvar_8.w = lightDir_5.x;
  tmpvar_9.w = lightDir_5.y;
  tmpvar_10.w = lightDir_5.z;
  highp float tmpvar_38;
  tmpvar_38 = (unity_FogParams.x * tmpvar_7.z);
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_14;
  xlv_TEXCOORD1 = normalize(n_16);
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD2_1 = tmpvar_9;
  xlv_TEXCOORD2_2 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = tmpvar_12;
  xlv_TEXCOORD7 = exp2((-(tmpvar_38) * tmpvar_38));
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _LightShadowData;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  mediump vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  tmpvar_5 = (tmpvar_4 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  mediump vec3 tmpvar_7;
  tmpvar_7.x = xlv_TEXCOORD2.w;
  tmpvar_7.y = xlv_TEXCOORD2_1.w;
  tmpvar_7.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_8;
  mediump vec2 P_9;
  P_9 = ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5);
  tmpvar_8 = texture2D (_LightTexture0, P_9);
  highp vec3 LightCoord_10;
  LightCoord_10 = xlv_TEXCOORD5.xyz;
  highp float tmpvar_11;
  tmpvar_11 = dot (LightCoord_10, LightCoord_10);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_LightTextureB0, vec2(tmpvar_11));
  lowp float tmpvar_13;
  highp vec4 shadowCoord_14;
  shadowCoord_14 = xlv_TEXCOORD6;
  highp vec4 tmpvar_15;
  tmpvar_15 = texture2DProj (_ShadowMapTexture, shadowCoord_14);
  mediump float tmpvar_16;
  if ((tmpvar_15.x < (shadowCoord_14.z / shadowCoord_14.w))) {
    tmpvar_16 = _LightShadowData.x;
  } else {
    tmpvar_16 = 1.0;
  };
  tmpvar_13 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = _LightColor0.xyz;
  tmpvar_17 = (tmpvar_17 * ((
    (float((xlv_TEXCOORD5.z > 0.0)) * tmpvar_8.w)
   * tmpvar_12.w) * tmpvar_13));
  mediump vec3 viewDir_18;
  viewDir_18 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_19;
  tmpvar_19.x = dot ((viewDir_18 - (2.0 * 
    (dot (tmpvar_2, viewDir_18) * tmpvar_2)
  )), tmpvar_7);
  tmpvar_19.y = (1.0 - clamp (dot (tmpvar_2, viewDir_18), 0.0, 1.0));
  mediump vec2 tmpvar_20;
  tmpvar_20.x = ((tmpvar_19 * tmpvar_19) * (tmpvar_19 * tmpvar_19)).x;
  tmpvar_20.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_NHxRoughness, tmpvar_20);
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = (((tmpvar_5 + 
    ((tmpvar_21.w * 16.0) * tmpvar_6)
  ) * tmpvar_17) * clamp (dot (tmpvar_2, tmpvar_7), 0.0, 1.0));
  c_1.w = tmpvar_22.w;
  highp float tmpvar_23;
  tmpvar_23 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (tmpvar_22.xyz * vec3(tmpvar_23));
  mediump vec4 xlat_varoutput_24;
  xlat_varoutput_24.xyz = c_1.xyz;
  xlat_varoutput_24.w = 1.0;
  gl_FragData[0] = xlat_varoutput_24;
}


#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "FOG_EXP2" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp vec3 lightDir_5;
  highp mat3 tangentToWorld_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec4 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = (_Object2World * _glesVertex);
  tmpvar_7 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_14;
  texcoord_14.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_15;
  if ((_UVSec == 0.0)) {
    tmpvar_15 = tmpvar_2;
  } else {
    tmpvar_15 = tmpvar_3;
  };
  texcoord_14.zw = ((tmpvar_15 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_16;
  n_16 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp vec4 v_18;
  v_18.x = _World2Object[0].x;
  v_18.y = _World2Object[1].x;
  v_18.z = _World2Object[2].x;
  v_18.w = _World2Object[3].x;
  highp vec4 v_19;
  v_19.x = _World2Object[0].y;
  v_19.y = _World2Object[1].y;
  v_19.z = _World2Object[2].y;
  v_19.w = _World2Object[3].y;
  highp vec4 v_20;
  v_20.x = _World2Object[0].z;
  v_20.y = _World2Object[1].z;
  v_20.z = _World2Object[2].z;
  v_20.w = _World2Object[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(((
    (v_18.xyz * norm_17.x)
   + 
    (v_19.xyz * norm_17.y)
  ) + (v_20.xyz * norm_17.z)));
  highp vec3 dir_22;
  dir_22 = tmpvar_4.xyz;
  highp mat3 tmpvar_23;
  tmpvar_23[0] = _Object2World[0].xyz;
  tmpvar_23[1] = _Object2World[1].xyz;
  tmpvar_23[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_24;
  tmpvar_24.xyz = normalize((tmpvar_23 * dir_22));
  tmpvar_24.w = tmpvar_4.w;
  highp vec3 tmpvar_25;
  tmpvar_25 = tmpvar_24.www;
  mediump vec3 normal_26;
  normal_26 = tmpvar_21;
  mediump vec3 tangent_27;
  tangent_27 = tmpvar_24.xyz;
  mediump vec3 flip_28;
  flip_28 = tmpvar_25;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (((normal_26.yzx * tangent_27.zxy) - (normal_26.zxy * tangent_27.yzx)) * flip_28);
  mediump mat3 tmpvar_30;
  tmpvar_30[0].x = tangent_27.x;
  tmpvar_30[0].y = tmpvar_29.x;
  tmpvar_30[0].z = normal_26.x;
  tmpvar_30[1].x = tangent_27.y;
  tmpvar_30[1].y = tmpvar_29.y;
  tmpvar_30[1].z = normal_26.y;
  tmpvar_30[2].x = tangent_27.z;
  tmpvar_30[2].y = tmpvar_29.z;
  tmpvar_30[2].z = normal_26.z;
  tangentToWorld_6 = tmpvar_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_6[0].x;
  v_31.y = tangentToWorld_6[1].x;
  v_31.z = tangentToWorld_6[2].x;
  tmpvar_8.xyz = v_31;
  highp vec3 v_32;
  v_32.x = tangentToWorld_6[0].y;
  v_32.y = tangentToWorld_6[1].y;
  v_32.z = tangentToWorld_6[2].y;
  tmpvar_9.xyz = v_32;
  highp vec3 v_33;
  v_33.x = tangentToWorld_6[0].z;
  v_33.y = tangentToWorld_6[1].z;
  v_33.z = tangentToWorld_6[2].z;
  tmpvar_10.xyz = v_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = (_Object2World * _glesVertex);
  tmpvar_11 = (_LightMatrix0 * tmpvar_34);
  tmpvar_12 = (unity_World2Shadow[0] * tmpvar_34);
  highp vec3 tmpvar_35;
  tmpvar_35 = (_WorldSpaceLightPos0.xyz - (tmpvar_13.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 n_36;
  n_36 = tmpvar_35;
  mediump vec3 tmpvar_37;
  tmpvar_37 = normalize(n_36);
  lightDir_5 = tmpvar_37;
  tmpvar_8.w = lightDir_5.x;
  tmpvar_9.w = lightDir_5.y;
  tmpvar_10.w = lightDir_5.z;
  highp float tmpvar_38;
  tmpvar_38 = (unity_FogParams.x * tmpvar_7.z);
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_14;
  xlv_TEXCOORD1 = normalize(n_16);
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD2_1 = tmpvar_9;
  xlv_TEXCOORD2_2 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = tmpvar_12;
  xlv_TEXCOORD7 = exp2((-(tmpvar_38) * tmpvar_38));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _LightShadowData;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  mediump vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_6;
  mediump vec2 P_7;
  P_7 = ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5);
  tmpvar_6 = texture2D (_LightTexture0, P_7);
  mediump float tmpvar_8;
  tmpvar_8 = dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LightTextureB0, vec2(tmpvar_8));
  lowp float tmpvar_10;
  highp vec4 shadowCoord_11;
  shadowCoord_11 = xlv_TEXCOORD6;
  mediump float shadow_12;
  lowp float tmpvar_13;
  tmpvar_13 = shadow2DProjEXT (_ShadowMapTexture, shadowCoord_11);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13;
  shadow_12 = (_LightShadowData.x + (tmpvar_14 * (1.0 - _LightShadowData.x)));
  tmpvar_10 = shadow_12;
  mediump vec3 tmpvar_15;
  tmpvar_15 = _LightColor0.xyz;
  tmpvar_15 = (tmpvar_15 * ((
    (float((xlv_TEXCOORD5.z > 0.0)) * tmpvar_6.w)
   * tmpvar_9.w) * tmpvar_10));
  mediump vec3 viewDir_16;
  viewDir_16 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_17;
  tmpvar_17.x = dot ((viewDir_16 - (2.0 * 
    (dot (tmpvar_2, viewDir_16) * tmpvar_2)
  )), tmpvar_5);
  tmpvar_17.y = (1.0 - clamp (dot (tmpvar_2, viewDir_16), 0.0, 1.0));
  mediump vec2 tmpvar_18;
  tmpvar_18.x = ((tmpvar_17 * tmpvar_17) * (tmpvar_17 * tmpvar_17)).x;
  tmpvar_18.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (unity_NHxRoughness, tmpvar_18);
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = (((
    (tmpvar_4 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_19.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic)))
  ) * tmpvar_15) * clamp (dot (tmpvar_2, tmpvar_5), 0.0, 1.0));
  c_1.w = tmpvar_20.w;
  highp float tmpvar_21;
  tmpvar_21 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (tmpvar_20.xyz * vec3(tmpvar_21));
  mediump vec4 xlat_varoutput_22;
  xlat_varoutput_22.xyz = c_1.xyz;
  xlat_varoutput_22.w = 1.0;
  gl_FragData[0] = xlat_varoutput_22;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "FOG_EXP2" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 6689
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 6690
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 6691
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 6692
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 6693
    //MOV
    gl_Position = t0;
    //Instruction 6694
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 6695
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 6696
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 6697
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 6698
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 6699
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 6700
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 6701
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 6702
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 6703
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 6704
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 6705
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 6706
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 6707
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 6708
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 6709
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 6710
    //DP3
    t16_2.x = dot(t0.xyz, t0.xyz);
    //Instruction 6711
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 6712
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xxx;
    //Instruction 6713
    //MOV
    vs_TEXCOORD2.w = t16_2.x;
    //Instruction 6714
    //MUL
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 6715
    //MAD
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    //Instruction 6716
    //MAD
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    //Instruction 6717
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 6718
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 6719
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 6720
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 6721
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 6722
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 6723
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 6724
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 6725
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 6726
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 6727
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 6728
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 6729
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 6730
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 6731
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 6732
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 6733
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 6734
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 6735
    //MUL
    t16_4.xyz = t0.yzx * t1.zxy;
    //Instruction 6736
    //MAD
    t16_4.xyz = t1.yzx * t0.zxy + (-t16_4.xyz);
    //Instruction 6737
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 6738
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 6739
    //MOV
    vs_TEXCOORD3.w = t16_2.y;
    //Instruction 6740
    //MOV
    vs_TEXCOORD4.w = t16_2.z;
    //Instruction 6741
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 6742
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 6743
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 6744
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 6745
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 6746
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 6747
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 6748
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 6749
    //DP4
    t0.x = dot(t16_0, t1);
    //Instruction 6750
    //MOV
    t16_2.x = _LightMatrix0[0].y;
    //Instruction 6751
    //MOV
    t16_2.y = _LightMatrix0[1].y;
    //Instruction 6752
    //MOV
    t16_2.z = _LightMatrix0[2].y;
    //Instruction 6753
    //MOV
    t16_2.w = _LightMatrix0[3].y;
    //Instruction 6754
    //DP4
    t0.y = dot(t16_2, t1);
    //Instruction 6755
    //MOV
    t16_2.x = _LightMatrix0[0].z;
    //Instruction 6756
    //MOV
    t16_2.y = _LightMatrix0[1].z;
    //Instruction 6757
    //MOV
    t16_2.z = _LightMatrix0[2].z;
    //Instruction 6758
    //MOV
    t16_2.w = _LightMatrix0[3].z;
    //Instruction 6759
    //DP4
    t0.z = dot(t16_2, t1);
    //Instruction 6760
    //MOV
    t16_2.x = _LightMatrix0[0].w;
    //Instruction 6761
    //MOV
    t16_2.y = _LightMatrix0[1].w;
    //Instruction 6762
    //MOV
    t16_2.z = _LightMatrix0[2].w;
    //Instruction 6763
    //MOV
    t16_2.w = _LightMatrix0[3].w;
    //Instruction 6764
    //DP4
    t0.w = dot(t16_2, t1);
    //Instruction 6765
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 6766
    //MUL
    t0 = t1.yyyy * unity_World2Shadow[0][1];
    //Instruction 6767
    //MAD
    t0 = unity_World2Shadow[0][0] * t1.xxxx + t0;
    //Instruction 6768
    //MAD
    t0 = unity_World2Shadow[0][2] * t1.zzzz + t0;
    //Instruction 6769
    //MAD
    t0 = unity_World2Shadow[0][3] * t1.wwww + t0;
    //Instruction 6770
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 6771
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump vec3 t16_1;
lowp float t10_1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_7;
lowp vec3 t10_7;
bool tb7;
mediump vec3 t16_9;
mediump float t16_18;
void main()
{
    //Instruction 6644
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    //Instruction 6645
    //ADD
    t16_0.xy = t16_0.xy + vec2(0.500000, 0.500000);
    //Instruction 6646
    //SAMPLE
    t10_1 = texture(_LightTexture0, t16_0.xy).w;
    //Instruction 6647
    //LT
    tb7 = 0.0<vs_TEXCOORD5.z;
    //Instruction 6648
    //MOVC
    t10_2 = (tb7) ? 1.0 : 0.0;
    //Instruction 6649
    //MUL
    t10_2 = t10_1 * t10_2;
    //Instruction 6650
    //DP3
    t16_0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 6651
    //SAMPLE
    t10_1 = texture(_LightTextureB0, t16_0.xx).w;
    //Instruction 6652
    //MUL
    t10_2 = t10_1 * t10_2;
    //Instruction 6653
    //DIV
    t16_1.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
    //Instruction 6654
    //SAMPLE_C_LZ
    vec3 txVec24 = vec3(t16_1.xy,t16_1.z);
    t10_1 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec24, 0.0);
    //Instruction 6655
    //ADD
    t16_0.x = (-_LightShadowData.x) + 1.0;
    //Instruction 6656
    //MAD
    t16_0.x = t10_1 * t16_0.x + _LightShadowData.x;
    //Instruction 6657
    //MUL
    t10_2 = t16_0.x * t10_2;
    //Instruction 6658
    //MUL
    t16_0.xyz = vec3(t10_2) * _LightColor0.xyz;
    //Instruction 6659
    //DP3
    t16_18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 6660
    //RSQ
    t16_18 = inversesqrt(t16_18);
    //Instruction 6661
    //MUL
    t16_3.xyz = vec3(t16_18) * vs_TEXCOORD4.xyz;
    //Instruction 6662
    //DP3
    t16_18 = dot((-vs_TEXCOORD1.xyz), t16_3.xyz);
    //Instruction 6663
    //ADD
    t16_18 = t16_18 + t16_18;
    //Instruction 6664
    //MAD
    t16_4.xyz = t16_3.xyz * (-vec3(t16_18)) + (-vs_TEXCOORD1.xyz);
    //Instruction 6665
    //MOV
    t16_5.x = vs_TEXCOORD2.w;
    //Instruction 6666
    //MOV
    t16_5.y = vs_TEXCOORD3.w;
    //Instruction 6667
    //MOV
    t16_5.z = vs_TEXCOORD4.w;
    //Instruction 6668
    //DP3
    t16_18 = dot(t16_4.xyz, t16_5.xyz);
    //Instruction 6669
    //DP3
    t16_3.x = dot(t16_3.xyz, t16_5.xyz);
    t16_3.x = clamp(t16_3.x, 0.0, 1.0);
    //Instruction 6670
    //MUL
    t16_18 = t16_18 * t16_18;
    //Instruction 6671
    //MUL
    t16_4.x = t16_18 * t16_18;
    //Instruction 6672
    //ADD
    t16_4.y = (-_Glossiness) + 1.0;
    //Instruction 6673
    //SAMPLE
    t10_1 = texture(unity_NHxRoughness, t16_4.xy).w;
    //Instruction 6674
    //MUL
    t16_1.x = t10_1 * 16.000000;
    //Instruction 6675
    //SAMPLE
    t10_7.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 6676
    //MAD
    t16_9.xyz = _Color.xyz * t10_7.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 6677
    //MUL
    t16_7.xyz = t10_7.xyz * _Color.xyz;
    //Instruction 6678
    //MAD
    t16_9.xyz = vec3(_Metallic) * t16_9.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 6679
    //MUL
    t16_9.xyz = t16_1.xxx * t16_9.xyz;
    //Instruction 6680
    //MAD
    t16_18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 6681
    //MAD
    t16_9.xyz = t16_7.xyz * vec3(t16_18) + t16_9.xyz;
    //Instruction 6682
    //MUL
    t16_0.xyz = t16_0.xyz * t16_9.xyz;
    //Instruction 6683
    //MUL
    t16_0.xyz = t16_3.xxx * t16_0.xyz;
    //Instruction 6684
    //MOV
    t1.x = vs_TEXCOORD7;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 6685
    //MUL
    t1.xyz = t16_0.xyz * t1.xxx;
    //Instruction 6686
    //MOV
    SV_Target0.xyz = t1.xyz;
    //Instruction 6687
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 6688
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp mat3 tangentToWorld_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex);
  tmpvar_6 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_14;
  n_14 = (tmpvar_11.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  highp vec3 dir_20;
  dir_20 = tmpvar_4.xyz;
  highp mat3 tmpvar_21;
  tmpvar_21[0] = _Object2World[0].xyz;
  tmpvar_21[1] = _Object2World[1].xyz;
  tmpvar_21[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = normalize((tmpvar_21 * dir_20));
  tmpvar_22.w = tmpvar_4.w;
  highp vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22.www;
  mediump vec3 normal_24;
  normal_24 = tmpvar_19;
  mediump vec3 tangent_25;
  tangent_25 = tmpvar_22.xyz;
  mediump vec3 flip_26;
  flip_26 = tmpvar_23;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (((normal_24.yzx * tangent_25.zxy) - (normal_24.zxy * tangent_25.yzx)) * flip_26);
  mediump mat3 tmpvar_28;
  tmpvar_28[0].x = tangent_25.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = normal_24.x;
  tmpvar_28[1].x = tangent_25.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = normal_24.y;
  tmpvar_28[2].x = tangent_25.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = normal_24.z;
  tangentToWorld_5 = tmpvar_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_5[0].x;
  v_29.y = tangentToWorld_5[1].x;
  v_29.z = tangentToWorld_5[2].x;
  tmpvar_7.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_5[0].y;
  v_30.y = tangentToWorld_5[1].y;
  v_30.z = tangentToWorld_5[2].y;
  tmpvar_8.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_5[0].z;
  v_31.y = tangentToWorld_5[1].z;
  v_31.z = tangentToWorld_5[2].z;
  tmpvar_9.xyz = v_31;
  tmpvar_10 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec3 tmpvar_32;
  tmpvar_32 = (_WorldSpaceLightPos0.xyz - (tmpvar_11.xyz * _WorldSpaceLightPos0.w));
  tmpvar_7.w = tmpvar_32.x;
  tmpvar_8.w = tmpvar_32.y;
  tmpvar_9.w = tmpvar_32.z;
  highp float tmpvar_33;
  tmpvar_33 = (unity_FogParams.x * tmpvar_6.z);
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = normalize(n_14);
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD2_1 = tmpvar_8;
  xlv_TEXCOORD2_2 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD7 = exp2((-(tmpvar_33) * tmpvar_33));
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _LightShadowData;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  mediump vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  lowp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_6 = tmpvar_7;
  mediump float atten_8;
  atten_8 = tmpvar_6;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  tmpvar_9 = (tmpvar_9 * atten_8);
  mediump vec3 viewDir_10;
  viewDir_10 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_11;
  tmpvar_11.x = dot ((viewDir_10 - (2.0 * 
    (dot (tmpvar_2, viewDir_10) * tmpvar_2)
  )), tmpvar_5);
  tmpvar_11.y = (1.0 - clamp (dot (tmpvar_2, viewDir_10), 0.0, 1.0));
  mediump vec2 tmpvar_12;
  tmpvar_12.x = ((tmpvar_11 * tmpvar_11) * (tmpvar_11 * tmpvar_11)).x;
  tmpvar_12.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (unity_NHxRoughness, tmpvar_12);
  mediump vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = (((
    (tmpvar_4 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_13.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic)))
  ) * tmpvar_9) * clamp (dot (tmpvar_2, tmpvar_5), 0.0, 1.0));
  c_1.w = tmpvar_14.w;
  highp float tmpvar_15;
  tmpvar_15 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (tmpvar_14.xyz * vec3(tmpvar_15));
  mediump vec4 xlat_varoutput_16;
  xlat_varoutput_16.xyz = c_1.xyz;
  xlat_varoutput_16.w = 1.0;
  gl_FragData[0] = xlat_varoutput_16;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec2 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp mat3 tangentToWorld_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex);
  tmpvar_6 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_14;
  n_14 = (tmpvar_11.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  highp vec3 dir_20;
  dir_20 = tmpvar_4.xyz;
  highp mat3 tmpvar_21;
  tmpvar_21[0] = _Object2World[0].xyz;
  tmpvar_21[1] = _Object2World[1].xyz;
  tmpvar_21[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = normalize((tmpvar_21 * dir_20));
  tmpvar_22.w = tmpvar_4.w;
  highp vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22.www;
  mediump vec3 normal_24;
  normal_24 = tmpvar_19;
  mediump vec3 tangent_25;
  tangent_25 = tmpvar_22.xyz;
  mediump vec3 flip_26;
  flip_26 = tmpvar_23;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (((normal_24.yzx * tangent_25.zxy) - (normal_24.zxy * tangent_25.yzx)) * flip_26);
  mediump mat3 tmpvar_28;
  tmpvar_28[0].x = tangent_25.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = normal_24.x;
  tmpvar_28[1].x = tangent_25.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = normal_24.y;
  tmpvar_28[2].x = tangent_25.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = normal_24.z;
  tangentToWorld_5 = tmpvar_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_5[0].x;
  v_29.y = tangentToWorld_5[1].x;
  v_29.z = tangentToWorld_5[2].x;
  tmpvar_7.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_5[0].y;
  v_30.y = tangentToWorld_5[1].y;
  v_30.z = tangentToWorld_5[2].y;
  tmpvar_8.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_5[0].z;
  v_31.y = tangentToWorld_5[1].z;
  v_31.z = tangentToWorld_5[2].z;
  tmpvar_9.xyz = v_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (_Object2World * _glesVertex);
  tmpvar_10 = (unity_World2Shadow[0] * tmpvar_32);
  highp vec3 tmpvar_33;
  tmpvar_33 = (_WorldSpaceLightPos0.xyz - (tmpvar_11.xyz * _WorldSpaceLightPos0.w));
  tmpvar_7.w = tmpvar_33.x;
  tmpvar_8.w = tmpvar_33.y;
  tmpvar_9.w = tmpvar_33.z;
  highp float tmpvar_34;
  tmpvar_34 = (unity_FogParams.x * tmpvar_6.z);
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = normalize(n_14);
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD2_1 = tmpvar_8;
  xlv_TEXCOORD2_2 = tmpvar_9;
  xlv_TEXCOORD5 = (_LightMatrix0 * tmpvar_32).xy;
  xlv_TEXCOORD6 = tmpvar_10;
  xlv_TEXCOORD7 = exp2((-(tmpvar_34) * tmpvar_34));
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _LightShadowData;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec2 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  mediump vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightTexture0, xlv_TEXCOORD5);
  lowp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_7 = tmpvar_8;
  mediump float atten_9;
  atten_9 = (tmpvar_6.w * tmpvar_7);
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  tmpvar_10 = (tmpvar_10 * atten_9);
  mediump vec3 viewDir_11;
  viewDir_11 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_12;
  tmpvar_12.x = dot ((viewDir_11 - (2.0 * 
    (dot (tmpvar_2, viewDir_11) * tmpvar_2)
  )), tmpvar_5);
  tmpvar_12.y = (1.0 - clamp (dot (tmpvar_2, viewDir_11), 0.0, 1.0));
  mediump vec2 tmpvar_13;
  tmpvar_13.x = ((tmpvar_12 * tmpvar_12) * (tmpvar_12 * tmpvar_12)).x;
  tmpvar_13.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_NHxRoughness, tmpvar_13);
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = (((
    (tmpvar_4 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_14.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic)))
  ) * tmpvar_10) * clamp (dot (tmpvar_2, tmpvar_5), 0.0, 1.0));
  c_1.w = tmpvar_15.w;
  highp float tmpvar_16;
  tmpvar_16 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (tmpvar_15.xyz * vec3(tmpvar_16));
  mediump vec4 xlat_varoutput_17;
  xlat_varoutput_17.xyz = c_1.xyz;
  xlat_varoutput_17.w = 1.0;
  gl_FragData[0] = xlat_varoutput_17;
}


#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp vec3 lightDir_5;
  highp mat3 tangentToWorld_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex);
  tmpvar_7 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_14;
  n_14 = (tmpvar_11.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  highp vec3 dir_20;
  dir_20 = tmpvar_4.xyz;
  highp mat3 tmpvar_21;
  tmpvar_21[0] = _Object2World[0].xyz;
  tmpvar_21[1] = _Object2World[1].xyz;
  tmpvar_21[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = normalize((tmpvar_21 * dir_20));
  tmpvar_22.w = tmpvar_4.w;
  highp vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22.www;
  mediump vec3 normal_24;
  normal_24 = tmpvar_19;
  mediump vec3 tangent_25;
  tangent_25 = tmpvar_22.xyz;
  mediump vec3 flip_26;
  flip_26 = tmpvar_23;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (((normal_24.yzx * tangent_25.zxy) - (normal_24.zxy * tangent_25.yzx)) * flip_26);
  mediump mat3 tmpvar_28;
  tmpvar_28[0].x = tangent_25.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = normal_24.x;
  tmpvar_28[1].x = tangent_25.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = normal_24.y;
  tmpvar_28[2].x = tangent_25.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = normal_24.z;
  tangentToWorld_6 = tmpvar_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_6[0].x;
  v_29.y = tangentToWorld_6[1].x;
  v_29.z = tangentToWorld_6[2].x;
  tmpvar_8.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_6[0].y;
  v_30.y = tangentToWorld_6[1].y;
  v_30.z = tangentToWorld_6[2].y;
  tmpvar_9.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_6[0].z;
  v_31.y = tangentToWorld_6[1].z;
  v_31.z = tangentToWorld_6[2].z;
  tmpvar_10.xyz = v_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (_WorldSpaceLightPos0.xyz - (tmpvar_11.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 n_33;
  n_33 = tmpvar_32;
  mediump vec3 tmpvar_34;
  tmpvar_34 = normalize(n_33);
  lightDir_5 = tmpvar_34;
  tmpvar_8.w = lightDir_5.x;
  tmpvar_9.w = lightDir_5.y;
  tmpvar_10.w = lightDir_5.z;
  highp float tmpvar_35;
  tmpvar_35 = (unity_FogParams.x * tmpvar_7.z);
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = normalize(n_14);
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD2_1 = tmpvar_9;
  xlv_TEXCOORD2_2 = tmpvar_10;
  highp vec4 tmpvar_36;
  tmpvar_36 = (_Object2World * _glesVertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * tmpvar_36).xyz;
  xlv_TEXCOORD6 = (tmpvar_36.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD7 = exp2((-(tmpvar_35) * tmpvar_35));
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform mediump vec4 _LightShadowData;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform highp samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  mediump vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  tmpvar_5 = (tmpvar_4 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  mediump vec3 tmpvar_7;
  tmpvar_7.x = xlv_TEXCOORD2.w;
  tmpvar_7.y = xlv_TEXCOORD2_1.w;
  tmpvar_7.z = xlv_TEXCOORD2_2.w;
  highp float tmpvar_8;
  tmpvar_8 = dot (xlv_TEXCOORD5, xlv_TEXCOORD5);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LightTexture0, vec2(tmpvar_8));
  highp float mydist_10;
  mydist_10 = ((sqrt(
    dot (xlv_TEXCOORD6, xlv_TEXCOORD6)
  ) * _LightPositionRange.w) * 0.97);
  highp float tmpvar_11;
  tmpvar_11 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD6), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  mediump float tmpvar_12;
  if ((tmpvar_11 < mydist_10)) {
    tmpvar_12 = _LightShadowData.x;
  } else {
    tmpvar_12 = 1.0;
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = _LightColor0.xyz;
  tmpvar_13 = (tmpvar_13 * (tmpvar_9.w * tmpvar_12));
  mediump vec3 viewDir_14;
  viewDir_14 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_15;
  tmpvar_15.x = dot ((viewDir_14 - (2.0 * 
    (dot (tmpvar_2, viewDir_14) * tmpvar_2)
  )), tmpvar_7);
  tmpvar_15.y = (1.0 - clamp (dot (tmpvar_2, viewDir_14), 0.0, 1.0));
  mediump vec2 tmpvar_16;
  tmpvar_16.x = ((tmpvar_15 * tmpvar_15) * (tmpvar_15 * tmpvar_15)).x;
  tmpvar_16.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (unity_NHxRoughness, tmpvar_16);
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = (((tmpvar_5 + 
    ((tmpvar_17.w * 16.0) * tmpvar_6)
  ) * tmpvar_13) * clamp (dot (tmpvar_2, tmpvar_7), 0.0, 1.0));
  c_1.w = tmpvar_18.w;
  highp float tmpvar_19;
  tmpvar_19 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (tmpvar_18.xyz * vec3(tmpvar_19));
  mediump vec4 xlat_varoutput_20;
  xlat_varoutput_20.xyz = c_1.xyz;
  xlat_varoutput_20.w = 1.0;
  gl_FragData[0] = xlat_varoutput_20;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 6814
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 6815
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 6816
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 6817
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 6818
    //MOV
    gl_Position = t0;
    //Instruction 6819
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 6820
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 6821
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 6822
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 6823
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 6824
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 6825
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 6826
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 6827
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 6828
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 6829
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 6830
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 6831
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 6832
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 6833
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 6834
    //MAD
    t1.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 6835
    //ADD
    vs_TEXCOORD6.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 6836
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 6837
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 6838
    //MUL
    t16_2.xyz = t1.xyz * t16_2.xxx;
    //Instruction 6839
    //MOV
    vs_TEXCOORD2.w = t16_2.x;
    //Instruction 6840
    //MUL
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 6841
    //MAD
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    //Instruction 6842
    //MAD
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    //Instruction 6843
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 6844
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 6845
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 6846
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 6847
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 6848
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 6849
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 6850
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 6851
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 6852
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 6853
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 6854
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 6855
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 6856
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 6857
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 6858
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 6859
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 6860
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 6861
    //MUL
    t16_4.xyz = t0.yzx * t1.zxy;
    //Instruction 6862
    //MAD
    t16_4.xyz = t1.yzx * t0.zxy + (-t16_4.xyz);
    //Instruction 6863
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 6864
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 6865
    //MOV
    vs_TEXCOORD3.w = t16_2.y;
    //Instruction 6866
    //MOV
    vs_TEXCOORD4.w = t16_2.z;
    //Instruction 6867
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 6868
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 6869
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 6870
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 6871
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 6872
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 6873
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 6874
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 6875
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 6876
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 6877
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 6878
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 6879
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 6880
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 6881
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 6882
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 6883
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 6884
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 6885
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 6886
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2D unity_NHxRoughness;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp float t10_0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
highp float t6;
mediump vec3 t16_6;
lowp vec3 t10_6;
mediump vec3 t16_9;
mediump float t16_20;
void main()
{
    //Instruction 6772
    //DP3
    t0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    //Instruction 6773
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 6774
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 6775
    //MUL
    t0.x = t0.x * 0.970000;
    //Instruction 6776
    //SAMPLE
    t1 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
    //Instruction 6777
    //DP4
    t6 = dot(t1, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 6778
    //LT
    tb0 = t6<t0.x;
    //Instruction 6779
    //MOVC
    t16_2.x = (tb0) ? _LightShadowData.x : 1.0;
    //Instruction 6780
    //DP3
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 6781
    //SAMPLE
    t10_0 = texture(_LightTexture0, t0.xx).w;
    //Instruction 6782
    //MUL
    t16_0 = t16_2.x * t10_0;
    //Instruction 6783
    //MUL
    t16_2.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 6784
    //DP3
    t16_20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 6785
    //RSQ
    t16_20 = inversesqrt(t16_20);
    //Instruction 6786
    //MUL
    t16_3.xyz = vec3(t16_20) * vs_TEXCOORD4.xyz;
    //Instruction 6787
    //DP3
    t16_20 = dot((-vs_TEXCOORD1.xyz), t16_3.xyz);
    //Instruction 6788
    //ADD
    t16_20 = t16_20 + t16_20;
    //Instruction 6789
    //MAD
    t16_4.xyz = t16_3.xyz * (-vec3(t16_20)) + (-vs_TEXCOORD1.xyz);
    //Instruction 6790
    //MOV
    t16_5.x = vs_TEXCOORD2.w;
    //Instruction 6791
    //MOV
    t16_5.y = vs_TEXCOORD3.w;
    //Instruction 6792
    //MOV
    t16_5.z = vs_TEXCOORD4.w;
    //Instruction 6793
    //DP3
    t16_20 = dot(t16_4.xyz, t16_5.xyz);
    //Instruction 6794
    //DP3
    t16_3.x = dot(t16_3.xyz, t16_5.xyz);
    t16_3.x = clamp(t16_3.x, 0.0, 1.0);
    //Instruction 6795
    //MUL
    t16_20 = t16_20 * t16_20;
    //Instruction 6796
    //MUL
    t16_4.x = t16_20 * t16_20;
    //Instruction 6797
    //ADD
    t16_4.y = (-_Glossiness) + 1.0;
    //Instruction 6798
    //SAMPLE
    t10_0 = texture(unity_NHxRoughness, t16_4.xy).w;
    //Instruction 6799
    //MUL
    t16_0 = t10_0 * 16.000000;
    //Instruction 6800
    //SAMPLE
    t10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 6801
    //MAD
    t16_9.xyz = _Color.xyz * t10_6.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 6802
    //MUL
    t16_6.xyz = t10_6.xyz * _Color.xyz;
    //Instruction 6803
    //MAD
    t16_9.xyz = vec3(_Metallic) * t16_9.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 6804
    //MUL
    t16_9.xyz = vec3(t16_0) * t16_9.xyz;
    //Instruction 6805
    //MAD
    t16_20 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 6806
    //MAD
    t16_9.xyz = t16_6.xyz * vec3(t16_20) + t16_9.xyz;
    //Instruction 6807
    //MUL
    t16_2.xyz = t16_2.xyz * t16_9.xyz;
    //Instruction 6808
    //MUL
    t16_2.xyz = t16_3.xxx * t16_2.xyz;
    //Instruction 6809
    //MOV
    t0.x = vs_TEXCOORD7;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 6810
    //MUL
    t0.xyz = t16_2.xyz * t0.xxx;
    //Instruction 6811
    //MOV
    SV_Target0.xyz = t0.xyz;
    //Instruction 6812
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 6813
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 gl