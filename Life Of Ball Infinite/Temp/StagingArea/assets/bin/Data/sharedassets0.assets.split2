RAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp float t10_1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
lowp vec3 t10_6;
mediump float t16_8;
bool tb8;
mediump float t16_10;
mediump float t16_15;
mediump float t16_21;
mediump float t16_24;
mediump float t16_25;
void main()
{
    //Instruction 1276
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    //Instruction 1277
    //ADD
    t16_0.xy = t16_0.xy + vec2(0.500000, 0.500000);
    //Instruction 1278
    //SAMPLE
    t10_1 = texture(_LightTexture0, t16_0.xy).w;
    //Instruction 1279
    //LT
    tb8 = 0.0<vs_TEXCOORD5.z;
    //Instruction 1280
    //MOVC
    t10_2 = (tb8) ? 1.0 : 0.0;
    //Instruction 1281
    //MUL
    t10_2 = t10_1 * t10_2;
    //Instruction 1282
    //DP3
    t16_0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 1283
    //SAMPLE
    t10_1 = texture(_LightTextureB0, t16_0.xx).w;
    //Instruction 1284
    //MUL
    t10_2 = t10_1 * t10_2;
    //Instruction 1285
    //DIV
    t16_1.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
    //Instruction 1286
    //SAMPLE_C_LZ
    vec3 txVec5 = vec3(t16_1.xy,t16_1.z);
    t10_1 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    //Instruction 1287
    //ADD
    t16_0.x = (-_LightShadowData.x) + 1.0;
    //Instruction 1288
    //MAD
    t16_0.x = t10_1 * t16_0.x + _LightShadowData.x;
    //Instruction 1289
    //MUL
    t10_2 = t16_0.x * t10_2;
    //Instruction 1290
    //MUL
    t16_0.xyz = vec3(t10_2) * _LightColor0.xyz;
    //Instruction 1291
    //DP3
    t16_21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 1292
    //RSQ
    t16_21 = inversesqrt(t16_21);
    //Instruction 1293
    //MOV
    t16_3.x = vs_TEXCOORD2.w;
    //Instruction 1294
    //MOV
    t16_3.y = vs_TEXCOORD3.w;
    //Instruction 1295
    //MOV
    t16_3.z = vs_TEXCOORD4.w;
    //Instruction 1296
    //DP3
    t16_24 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 1297
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 1298
    //MUL
    t16_3.xyz = vec3(t16_24) * t16_3.xyz;
    //Instruction 1299
    //MAD
    t16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_21) + t16_3.xyz;
    //Instruction 1300
    //DP3
    t16_21 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 1301
    //MAX
    t16_1.x = max(t16_21, 0.001000);
    //Instruction 1302
    //RSQ
    t16_21 = inversesqrt(t16_1.x);
    //Instruction 1303
    //MUL
    t16_4.xyz = vec3(t16_21) * t16_4.xyz;
    //Instruction 1304
    //DP3
    t16_21 = dot(t16_3.xyz, t16_4.xyz);
    //Instruction 1305
    //MAX
    t16_1.x = max(t16_21, 0.0);
    //Instruction 1306
    //MUL
    t16_21 = t16_1.x * t16_1.x;
    //Instruction 1307
    //ADD
    t16_24 = (-_Glossiness) + 1.0;
    //Instruction 1308
    //MUL
    t16_25 = t16_24 * t16_24;
    //Instruction 1309
    //ADD
    t16_24 = (-t16_24) + 1.0;
    //Instruction 1310
    //MAD
    t16_24 = t16_24 * 0.968000 + 0.030000;
    //Instruction 1311
    //LOG
    t16_24 = log2(t16_24);
    //Instruction 1312
    //DIV
    t16_24 = 10.000000 / t16_24;
    //Instruction 1313
    //MAD
    t16_21 = t16_21 * _Glossiness + t16_25;
    //Instruction 1314
    //MUL
    t16_21 = t16_21 * unity_LightGammaCorrectionConsts.z;
    //Instruction 1315
    //MAD
    t16_1.x = t16_21 * t16_1.x + 0.000100;
    //Instruction 1316
    //DP3
    t16_21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 1317
    //RSQ
    t16_21 = inversesqrt(t16_21);
    //Instruction 1318
    //MUL
    t16_5.xyz = vec3(t16_21) * vs_TEXCOORD4.xyz;
    //Instruction 1319
    //DP3
    t16_21 = dot(t16_5.xyz, t16_4.xyz);
    //Instruction 1320
    //DP3
    t16_3.x = dot(t16_5.xyz, t16_3.xyz);
    //Instruction 1321
    //MAX
    t16_8 = max(t16_3.x, 0.0);
    //Instruction 1322
    //MAX
    t16_15 = max(t16_21, 0.0);
    //Instruction 1323
    //LOG
    t16_21 = log2(t16_15);
    //Instruction 1324
    //MUL
    t16_3.x = t16_24 * t16_24;
    //Instruction 1325
    //MAD
    t16_10 = t16_24 * t16_24 + 1.0;
    //Instruction 1326
    //MUL
    t16_21 = t16_21 * t16_3.x;
    //Instruction 1327
    //EXP
    t16_21 = exp2(t16_21);
    //Instruction 1328
    //MUL
    t16_21 = t16_21 * t16_10;
    //Instruction 1329
    //DIV
    t16_1.x = t16_21 / t16_1.x;
    //Instruction 1330
    //SAMPLE
    t10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 1331
    //MAD
    t16_3.xyz = _Color.xyz * t10_6.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 1332
    //MUL
    t16_6.xyz = t10_6.xyz * _Color.xyz;
    //Instruction 1333
    //MAD
    t16_3.xyz = vec3(_Metallic) * t16_3.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 1334
    //MUL
    t16_3.xyz = t16_1.xxx * t16_3.xyz;
    //Instruction 1335
    //MAD
    t16_21 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 1336
    //MAD
    t16_3.xyz = t16_6.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 1337
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 1338
    //MUL
    SV_Target0.xyz = vec3(t16_8) * t16_0.xyz;
    //Instruction 1339
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 1340
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 1669
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 1670
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 1671
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 1672
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 1673
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 1674
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 1675
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 1676
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 1677
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 1678
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 1679
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 1680
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 1681
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 1682
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 1683
    //MUL
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 1684
    //MAD
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    //Instruction 1685
    //MAD
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    //Instruction 1686
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 1687
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 1688
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 1689
    //MAD
    t2.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 1690
    //ADD
    vs_TEXCOORD6.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 1691
    //MOV
    t1.w = t2.x;
    //Instruction 1692
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 1693
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 1694
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 1695
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 1696
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 1697
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 1698
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 1699
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 1700
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 1701
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 1702
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 1703
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 1704
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 1705
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 1706
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 1707
    //MUL
    t16_4.xyz = t1.yzx * t0.zxy;
    //Instruction 1708
    //MAD
    t16_4.xyz = t0.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 1709
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 1710
    //MOV
    vs_TEXCOORD3.w = t2.y;
    //Instruction 1711
    //MOV
    t0.w = t2.z;
    //Instruction 1712
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 1713
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 1714
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 1715
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 1716
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 1717
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 1718
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 1719
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 1720
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 1721
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 1722
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 1723
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 1724
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 1725
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 1726
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 1727
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 1728
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 1729
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 1730
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 1731
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 1732
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
highp vec4 t1;
mediump vec3 t16_1;
highp float t2;
mediump float t16_2;
lowp float t10_2;
bool tb2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_4;
mediump vec3 t16_5;
mediump vec2 t16_7;
mediump float t16_10;
highp float t12;
mediump float t16_15;
mediump float t16_16;
void main()
{
    //Instruction 1608
    //DP3
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 1609
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 1610
    //MOV
    t16_1.x = vs_TEXCOORD2.w;
    //Instruction 1611
    //MOV
    t16_1.y = vs_TEXCOORD3.w;
    //Instruction 1612
    //MOV
    t16_1.z = vs_TEXCOORD4.w;
    //Instruction 1613
    //DP3
    t16_5.x = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 1614
    //RSQ
    t16_5.x = inversesqrt(t16_5.x);
    //Instruction 1615
    //MUL
    t16_5.xyz = t16_5.xxx * t16_1.xyz;
    //Instruction 1616
    //MAD
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + t16_5.xyz;
    //Instruction 1617
    //DP3
    t16_0.x = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 1618
    //MAX
    t16_2 = max(t16_0.x, 0.001000);
    //Instruction 1619
    //RSQ
    t16_0.x = inversesqrt(t16_2);
    //Instruction 1620
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    //Instruction 1621
    //DP3
    t16_0.x = dot(t16_5.xyz, t16_1.xyz);
    //Instruction 1622
    //MAX
    t16_2 = max(t16_0.x, 0.0);
    //Instruction 1623
    //MUL
    t16_0.x = t16_2 * t16_2;
    //Instruction 1624
    //ADD
    t16_16 = (-_Glossiness) + 1.0;
    //Instruction 1625
    //MUL
    t16_3.x = t16_16 * t16_16;
    //Instruction 1626
    //ADD
    t16_16 = (-t16_16) + 1.0;
    //Instruction 1627
    //MAD
    t16_16 = t16_16 * 0.968000 + 0.030000;
    //Instruction 1628
    //LOG
    t16_16 = log2(t16_16);
    //Instruction 1629
    //DIV
    t16_16 = 10.000000 / t16_16;
    //Instruction 1630
    //MAD
    t16_0.x = t16_0.x * _Glossiness + t16_3.x;
    //Instruction 1631
    //MUL
    t16_0.x = t16_0.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 1632
    //MAD
    t16_2 = t16_0.x * t16_2 + 0.000100;
    //Instruction 1633
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 1634
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 1635
    //MUL
    t16_3.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 1636
    //DP3
    t16_0.x = dot(t16_3.xyz, t16_1.xyz);
    //Instruction 1637
    //DP3
    t16_0.y = dot(t16_3.xyz, t16_5.xyz);
    //Instruction 1638
    //MAX
    t16_7.xy = max(t16_0.yx, vec2(0.0, 0.0));
    //Instruction 1639
    //LOG
    t16_0.x = log2(t16_7.y);
    //Instruction 1640
    //MUL
    t16_5.x = t16_16 * t16_16;
    //Instruction 1641
    //MAD
    t16_10 = t16_16 * t16_16 + 1.0;
    //Instruction 1642
    //MUL
    t16_0.x = t16_0.x * t16_5.x;
    //Instruction 1643
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 1644
    //MUL
    t16_0.x = t16_0.x * t16_10;
    //Instruction 1645
    //DIV
    t16_2 = t16_0.x / t16_2;
    //Instruction 1646
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 1647
    //MAD
    t16_0.xyz = _Color.xyz * t10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 1648
    //MUL
    t16_4.xyz = t10_4.xyz * _Color.xyz;
    //Instruction 1649
    //MAD
    t16_0.xyz = vec3(_Metallic) * t16_0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 1650
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_2);
    //Instruction 1651
    //MAD
    t16_15 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 1652
    //MAD
    t16_0.xyz = t16_4.xyz * vec3(t16_15) + t16_0.xyz;
    //Instruction 1653
    //DP3
    t2 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    //Instruction 1654
    //SQRT
    t2 = sqrt(t2);
    //Instruction 1655
    //MUL
    t2 = t2 * _LightPositionRange.w;
    //Instruction 1656
    //MUL
    t2 = t2 * 0.970000;
    //Instruction 1657
    //SAMPLE
    t1 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
    //Instruction 1658
    //DP4
    t12 = dot(t1, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 1659
    //LT
    tb2 = t12<t2;
    //Instruction 1660
    //MOVC
    t16_15 = (tb2) ? _LightShadowData.x : 1.0;
    //Instruction 1661
    //DP3
    t2 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 1662
    //SAMPLE
    t10_2 = texture(_LightTexture0, vec2(t2)).w;
    //Instruction 1663
    //MUL
    t16_2 = t16_15 * t10_2;
    //Instruction 1664
    //MUL
    t16_3.xyz = vec3(t16_2) * _LightColor0.xyz;
    //Instruction 1665
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 1666
    //MUL
    SV_Target0.xyz = t16_7.xxx * t16_0.xyz;
    //Instruction 1667
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 1668
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 1479
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 1480
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 1481
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 1482
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 1483
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 1484
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 1485
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 1486
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 1487
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 1488
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 1489
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 1490
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 1491
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 1492
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 1493
    //MUL
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 1494
    //MAD
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    //Instruction 1495
    //MAD
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    //Instruction 1496
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 1497
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 1498
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 1499
    //MAD
    t2.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 1500
    //ADD
    vs_TEXCOORD6.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 1501
    //MOV
    t1.w = t2.x;
    //Instruction 1502
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 1503
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 1504
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 1505
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 1506
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 1507
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 1508
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 1509
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 1510
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 1511
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 1512
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 1513
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 1514
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 1515
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 1516
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 1517
    //MUL
    t16_4.xyz = t1.yzx * t0.zxy;
    //Instruction 1518
    //MAD
    t16_4.xyz = t0.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 1519
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 1520
    //MOV
    vs_TEXCOORD3.w = t2.y;
    //Instruction 1521
    //MOV
    t0.w = t2.z;
    //Instruction 1522
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 1523
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 1524
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 1525
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 1526
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 1527
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 1528
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 1529
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 1530
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 1531
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 1532
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 1533
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 1534
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 1535
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 1536
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 1537
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 1538
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 1539
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 1540
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 1541
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 1542
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
highp float t0;
mediump float t16_0;
lowp float t10_0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_1;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
highp float t6;
mediump float t16_6;
lowp float t10_6;
mediump float t16_9;
mediump float t16_12;
mediump float t16_20;
mediump float t16_21;
mediump float t16_22;
void main()
{
    //Instruction 1415
    //DP3
    t0 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    //Instruction 1416
    //SQRT
    t0 = sqrt(t0);
    //Instruction 1417
    //MUL
    t0 = t0 * _LightPositionRange.w;
    //Instruction 1418
    //MUL
    t0 = t0 * 0.970000;
    //Instruction 1419
    //SAMPLE
    t1 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
    //Instruction 1420
    //DP4
    t6 = dot(t1, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 1421
    //LT
    tb0 = t6<t0;
    //Instruction 1422
    //MOVC
    t16_2.x = (tb0) ? _LightShadowData.x : 1.0;
    //Instruction 1423
    //DP3
    t0 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 1424
    //SAMPLE
    t10_0 = texture(_LightTextureB0, vec2(t0)).w;
    //Instruction 1425
    //SAMPLE
    t10_6 = texture(_LightTexture0, vs_TEXCOORD5.xyz).w;
    //Instruction 1426
    //MUL
    t16_0 = t10_6 * t10_0;
    //Instruction 1427
    //MUL
    t16_0 = t16_2.x * t16_0;
    //Instruction 1428
    //MUL
    t16_2.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 1429
    //DP3
    t16_20 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 1430
    //RSQ
    t16_20 = inversesqrt(t16_20);
    //Instruction 1431
    //MOV
    t16_3.x = vs_TEXCOORD2.w;
    //Instruction 1432
    //MOV
    t16_3.y = vs_TEXCOORD3.w;
    //Instruction 1433
    //MOV
    t16_3.z = vs_TEXCOORD4.w;
    //Instruction 1434
    //DP3
    t16_21 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 1435
    //RSQ
    t16_21 = inversesqrt(t16_21);
    //Instruction 1436
    //MUL
    t16_3.xyz = vec3(t16_21) * t16_3.xyz;
    //Instruction 1437
    //MAD
    t16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_20) + t16_3.xyz;
    //Instruction 1438
    //DP3
    t16_20 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 1439
    //MAX
    t16_0 = max(t16_20, 0.001000);
    //Instruction 1440
    //RSQ
    t16_20 = inversesqrt(t16_0);
    //Instruction 1441
    //MUL
    t16_4.xyz = vec3(t16_20) * t16_4.xyz;
    //Instruction 1442
    //DP3
    t16_20 = dot(t16_3.xyz, t16_4.xyz);
    //Instruction 1443
    //MAX
    t16_0 = max(t16_20, 0.0);
    //Instruction 1444
    //MUL
    t16_20 = t16_0 * t16_0;
    //Instruction 1445
    //ADD
    t16_21 = (-_Glossiness) + 1.0;
    //Instruction 1446
    //MUL
    t16_22 = t16_21 * t16_21;
    //Instruction 1447
    //ADD
    t16_21 = (-t16_21) + 1.0;
    //Instruction 1448
    //MAD
    t16_21 = t16_21 * 0.968000 + 0.030000;
    //Instruction 1449
    //LOG
    t16_21 = log2(t16_21);
    //Instruction 1450
    //DIV
    t16_21 = 10.000000 / t16_21;
    //Instruction 1451
    //MAD
    t16_20 = t16_20 * _Glossiness + t16_22;
    //Instruction 1452
    //MUL
    t16_20 = t16_20 * unity_LightGammaCorrectionConsts.z;
    //Instruction 1453
    //MAD
    t16_0 = t16_20 * t16_0 + 0.000100;
    //Instruction 1454
    //DP3
    t16_20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 1455
    //RSQ
    t16_20 = inversesqrt(t16_20);
    //Instruction 1456
    //MUL
    t16_5.xyz = vec3(t16_20) * vs_TEXCOORD4.xyz;
    //Instruction 1457
    //DP3
    t16_20 = dot(t16_5.xyz, t16_4.xyz);
    //Instruction 1458
    //DP3
    t16_3.x = dot(t16_5.xyz, t16_3.xyz);
    //Instruction 1459
    //MAX
    t16_6 = max(t16_3.x, 0.0);
    //Instruction 1460
    //MAX
    t16_12 = max(t16_20, 0.0);
    //Instruction 1461
    //LOG
    t16_20 = log2(t16_12);
    //Instruction 1462
    //MUL
    t16_3.x = t16_21 * t16_21;
    //Instruction 1463
    //MAD
    t16_9 = t16_21 * t16_21 + 1.0;
    //Instruction 1464
    //MUL
    t16_20 = t16_20 * t16_3.x;
    //Instruction 1465
    //EXP
    t16_20 = exp2(t16_20);
    //Instruction 1466
    //MUL
    t16_20 = t16_20 * t16_9;
    //Instruction 1467
    //DIV
    t16_0 = t16_20 / t16_0;
    //Instruction 1468
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 1469
    //MAD
    t16_3.xyz = _Color.xyz * t10_1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 1470
    //MUL
    t16_1.xyz = t10_1.xyz * _Color.xyz;
    //Instruction 1471
    //MAD
    t16_3.xyz = vec3(_Metallic) * t16_3.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 1472
    //MUL
    t16_3.xyz = vec3(t16_0) * t16_3.xyz;
    //Instruction 1473
    //MAD
    t16_20 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 1474
    //MAD
    t16_3.xyz = t16_1.xyz * vec3(t16_20) + t16_3.xyz;
    //Instruction 1475
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 1476
    //MUL
    SV_Target0.xyz = vec3(t16_6) * t16_2.xyz;
    //Instruction 1477
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 1478
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	vec4 _ShadowOffsets[4];
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 1806
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 1807
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 1808
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 1809
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 1810
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 1811
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 1812
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 1813
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 1814
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 1815
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 1816
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 1817
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 1818
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 1819
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 1820
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 1821
    //MOV
    t1.w = t0.x;
    //Instruction 1822
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 1823
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 1824
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 1825
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 1826
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 1827
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 1828
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 1829
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 1830
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 1831
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 1832
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 1833
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 1834
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 1835
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 1836
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 1837
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 1838
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 1839
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 1840
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 1841
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 1842
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 1843
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 1844
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 1845
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 1846
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 1847
    //MOV
    t2.w = t0.z;
    //Instruction 1848
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 1849
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 1850
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 1851
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 1852
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 1853
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 1854
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 1855
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 1856
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 1857
    //DP4
    t0.x = dot(t16_0, t1);
    //Instruction 1858
    //MOV
    t16_2.x = _LightMatrix0[0].y;
    //Instruction 1859
    //MOV
    t16_2.y = _LightMatrix0[1].y;
    //Instruction 1860
    //MOV
    t16_2.z = _LightMatrix0[2].y;
    //Instruction 1861
    //MOV
    t16_2.w = _LightMatrix0[3].y;
    //Instruction 1862
    //DP4
    t0.y = dot(t16_2, t1);
    //Instruction 1863
    //MOV
    t16_2.x = _LightMatrix0[0].z;
    //Instruction 1864
    //MOV
    t16_2.y = _LightMatrix0[1].z;
    //Instruction 1865
    //MOV
    t16_2.z = _LightMatrix0[2].z;
    //Instruction 1866
    //MOV
    t16_2.w = _LightMatrix0[3].z;
    //Instruction 1867
    //DP4
    t0.z = dot(t16_2, t1);
    //Instruction 1868
    //MOV
    t16_2.x = _LightMatrix0[0].w;
    //Instruction 1869
    //MOV
    t16_2.y = _LightMatrix0[1].w;
    //Instruction 1870
    //MOV
    t16_2.z = _LightMatrix0[2].w;
    //Instruction 1871
    //MOV
    t16_2.w = _LightMatrix0[3].w;
    //Instruction 1872
    //DP4
    t0.w = dot(t16_2, t1);
    //Instruction 1873
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 1874
    //MUL
    t0 = t1.yyyy * unity_World2Shadow[0][1];
    //Instruction 1875
    //MAD
    t0 = unity_World2Shadow[0][0] * t1.xxxx + t0;
    //Instruction 1876
    //MAD
    t0 = unity_World2Shadow[0][2] * t1.zzzz + t0;
    //Instruction 1877
    //MAD
    t0 = unity_World2Shadow[0][3] * t1.wwww + t0;
    //Instruction 1878
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 1879
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	vec4 _ShadowOffsets[4];
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec3 t16_1;
highp vec4 t2;
mediump vec3 t16_2;
lowp vec3 t10_2;
highp vec3 t3;
lowp float t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump float t16_9;
lowp float t10_9;
mediump float t16_13;
mediump float t16_17;
bool tb17;
mediump float t16_24;
mediump float t16_29;
mediump float t16_30;
void main()
{
    //Instruction 1733
    //ADD
    t16_0.x = (-_LightShadowData.x) + 1.0;
    //Instruction 1734
    //DIV
    t16_1.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
    //Instruction 1735
    //ADD
    t2.xyz = t16_1.xyz + _ShadowOffsets[0].xyz;
    //Instruction 1736
    //SAMPLE_C_LZ
    vec3 txVec3 = vec3(t2.xy,t2.z);
    t2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    //Instruction 1737
    //ADD
    t3.xyz = t16_1.xyz + _ShadowOffsets[1].xyz;
    //Instruction 1738
    //SAMPLE_C_LZ
    vec3 txVec4 = vec3(t3.xy,t3.z);
    t2.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    //Instruction 1739
    //ADD
    t3.xyz = t16_1.xyz + _ShadowOffsets[2].xyz;
    //Instruction 1740
    //ADD
    t1.xyz = t16_1.xyz + _ShadowOffsets[3].xyz;
    //Instruction 1741
    //SAMPLE_C_LZ
    vec3 txVec5 = vec3(t1.xy,t1.z);
    t2.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    //Instruction 1742
    //SAMPLE_C_LZ
    vec3 txVec6 = vec3(t3.xy,t3.z);
    t2.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    //Instruction 1743
    //MAD
    t16_0 = t2 * t16_0.xxxx + _LightShadowData.xxxx;
    //Instruction 1744
    //DP4
    t16_1.x = dot(t16_0, vec4(0.250000, 0.250000, 0.250000, 0.250000));
    //Instruction 1745
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    //Instruction 1746
    //ADD
    t16_0.xy = t16_0.xy + vec2(0.500000, 0.500000);
    //Instruction 1747
    //SAMPLE
    t10_9 = texture(_LightTexture0, t16_0.xy).w;
    //Instruction 1748
    //LT
    tb17 = 0.0<vs_TEXCOORD5.z;
    //Instruction 1749
    //MOVC
    t10_4 = (tb17) ? 1.0 : 0.0;
    //Instruction 1750
    //MUL
    t10_4 = t10_9 * t10_4;
    //Instruction 1751
    //DP3
    t16_0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 1752
    //SAMPLE
    t10_9 = texture(_LightTextureB0, t16_0.xx).w;
    //Instruction 1753
    //MUL
    t10_4 = t10_9 * t10_4;
    //Instruction 1754
    //MUL
    t10_4 = t16_1.x * t10_4;
    //Instruction 1755
    //MUL
    t16_0.xyz = vec3(t10_4) * _LightColor0.xyz;
    //Instruction 1756
    //DP3
    t16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 1757
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 1758
    //MOV
    t16_5.x = vs_TEXCOORD2.w;
    //Instruction 1759
    //MOV
    t16_5.y = vs_TEXCOORD3.w;
    //Instruction 1760
    //MOV
    t16_5.z = vs_TEXCOORD4.w;
    //Instruction 1761
    //DP3
    t16_29 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 1762
    //RSQ
    t16_29 = inversesqrt(t16_29);
    //Instruction 1763
    //MUL
    t16_5.xyz = vec3(t16_29) * t16_5.xyz;
    //Instruction 1764
    //MAD
    t16_6.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_24) + t16_5.xyz;
    //Instruction 1765
    //DP3
    t16_24 = dot(t16_6.xyz, t16_6.xyz);
    //Instruction 1766
    //MAX
    t16_1.x = max(t16_24, 0.001000);
    //Instruction 1767
    //RSQ
    t16_24 = inversesqrt(t16_1.x);
    //Instruction 1768
    //MUL
    t16_6.xyz = vec3(t16_24) * t16_6.xyz;
    //Instruction 1769
    //DP3
    t16_24 = dot(t16_5.xyz, t16_6.xyz);
    //Instruction 1770
    //MAX
    t16_1.x = max(t16_24, 0.0);
    //Instruction 1771
    //MUL
    t16_24 = t16_1.x * t16_1.x;
    //Instruction 1772
    //ADD
    t16_29 = (-_Glossiness) + 1.0;
    //Instruction 1773
    //MUL
    t16_30 = t16_29 * t16_29;
    //Instruction 1774
    //ADD
    t16_29 = (-t16_29) + 1.0;
    //Instruction 1775
    //MAD
    t16_29 = t16_29 * 0.968000 + 0.030000;
    //Instruction 1776
    //LOG
    t16_29 = log2(t16_29);
    //Instruction 1777
    //DIV
    t16_29 = 10.000000 / t16_29;
    //Instruction 1778
    //MAD
    t16_24 = t16_24 * _Glossiness + t16_30;
    //Instruction 1779
    //MUL
    t16_24 = t16_24 * unity_LightGammaCorrectionConsts.z;
    //Instruction 1780
    //MAD
    t16_1.x = t16_24 * t16_1.x + 0.000100;
    //Instruction 1781
    //DP3
    t16_24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 1782
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 1783
    //MUL
    t16_7.xyz = vec3(t16_24) * vs_TEXCOORD4.xyz;
    //Instruction 1784
    //DP3
    t16_24 = dot(t16_7.xyz, t16_6.xyz);
    //Instruction 1785
    //DP3
    t16_5.x = dot(t16_7.xyz, t16_5.xyz);
    //Instruction 1786
    //MAX
    t16_9 = max(t16_5.x, 0.0);
    //Instruction 1787
    //MAX
    t16_17 = max(t16_24, 0.0);
    //Instruction 1788
    //LOG
    t16_24 = log2(t16_17);
    //Instruction 1789
    //MUL
    t16_5.x = t16_29 * t16_29;
    //Instruction 1790
    //MAD
    t16_13 = t16_29 * t16_29 + 1.0;
    //Instruction 1791
    //MUL
    t16_24 = t16_24 * t16_5.x;
    //Instruction 1792
    //EXP
    t16_24 = exp2(t16_24);
    //Instruction 1793
    //MUL
    t16_24 = t16_24 * t16_13;
    //Instruction 1794
    //DIV
    t16_1.x = t16_24 / t16_1.x;
    //Instruction 1795
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 1796
    //MAD
    t16_5.xyz = _Color.xyz * t10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 1797
    //MUL
    t16_2.xyz = t10_2.xyz * _Color.xyz;
    //Instruction 1798
    //MAD
    t16_5.xyz = vec3(_Metallic) * t16_5.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 1799
    //MUL
    t16_5.xyz = t16_1.xxx * t16_5.xyz;
    //Instruction 1800
    //MAD
    t16_24 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 1801
    //MAD
    t16_5.xyz = t16_2.xyz * vec3(t16_24) + t16_5.xyz;
    //Instruction 1802
    //MUL
    t16_0.xyz = t16_0.xyz * t16_5.xyz;
    //Instruction 1803
    //MUL
    SV_Target0.xyz = vec3(t16_9) * t16_0.xyz;
    //Instruction 1804
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 1805
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 1616
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 1617
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 1618
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 1619
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 1620
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 1621
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 1622
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 1623
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 1624
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 1625
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 1626
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 1627
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 1628
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 1629
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 1630
    //MUL
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 1631
    //MAD
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    //Instruction 1632
    //MAD
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    //Instruction 1633
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 1634
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 1635
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 1636
    //MAD
    t2.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 1637
    //ADD
    vs_TEXCOORD6.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 1638
    //MOV
    t1.w = t2.x;
    //Instruction 1639
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 1640
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 1641
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 1642
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 1643
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 1644
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 1645
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 1646
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 1647
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 1648
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 1649
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 1650
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 1651
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 1652
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 1653
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 1654
    //MUL
    t16_4.xyz = t1.yzx * t0.zxy;
    //Instruction 1655
    //MAD
    t16_4.xyz = t0.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 1656
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 1657
    //MOV
    vs_TEXCOORD3.w = t2.y;
    //Instruction 1658
    //MOV
    t0.w = t2.z;
    //Instruction 1659
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 1660
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 1661
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 1662
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 1663
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 1664
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 1665
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 1666
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 1667
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 1668
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 1669
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 1670
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 1671
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 1672
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 1673
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 1674
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 1675
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 1676
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 1677
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 1678
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 1679
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp float t10_0;
bvec4 tb0;
highp vec4 t1;
mediump vec3 t16_1;
lowp vec3 t10_1;
highp vec4 t2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp vec3 t7;
mediump float t16_7;
mediump float t16_11;
mediump float t16_14;
mediump float t16_24;
mediump float t16_25;
mediump float t16_26;
void main()
{
    //Instruction 1543
    //DP3
    t0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    //Instruction 1544
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 1545
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 1546
    //MUL
    t0.x = t0.x * 0.970000;
    //Instruction 1547
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(0.007812, 0.007812, 0.007812);
    //Instruction 1548
    //SAMPLE
    t1 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 1549
    //DP4
    t1.x = dot(t1, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 1550
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(-0.007812, -0.007812, 0.007812);
    //Instruction 1551
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 1552
    //DP4
    t1.y = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 1553
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(-0.007812, 0.007812, -0.007812);
    //Instruction 1554
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 1555
    //DP4
    t1.z = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 1556
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(0.007812, -0.007812, -0.007812);
    //Instruction 1557
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 1558
    //DP4
    t1.w = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 1559
    //LT
    tb0 = lessThan(t1, t0.xxxx);
    //Instruction 1560
    //MOVC
    t0.x = (tb0.x) ? _LightShadowData.x : float(1.0);
    t0.y = (tb0.y) ? _LightShadowData.x : float(1.0);
    t0.z = (tb0.z) ? _LightShadowData.x : float(1.0);
    t0.w = (tb0.w) ? _LightShadowData.x : float(1.0);
    //Instruction 1561
    //DP4
    t16_3.x = dot(t0, vec4(0.250000, 0.250000, 0.250000, 0.250000));
    //Instruction 1562
    //DP3
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 1563
    //SAMPLE
    t10_0 = texture(_LightTexture0, t0.xx).w;
    //Instruction 1564
    //MUL
    t16_0 = t16_3.x * t10_0;
    //Instruction 1565
    //MUL
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 1566
    //DP3
    t16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 1567
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 1568
    //MOV
    t16_4.x = vs_TEXCOORD2.w;
    //Instruction 1569
    //MOV
    t16_4.y = vs_TEXCOORD3.w;
    //Instruction 1570
    //MOV
    t16_4.z = vs_TEXCOORD4.w;
    //Instruction 1571
    //DP3
    t16_25 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 1572
    //RSQ
    t16_25 = inversesqrt(t16_25);
    //Instruction 1573
    //MUL
    t16_4.xyz = vec3(t16_25) * t16_4.xyz;
    //Instruction 1574
    //MAD
    t16_5.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_24) + t16_4.xyz;
    //Instruction 1575
    //DP3
    t16_24 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 1576
    //MAX
    t16_0 = max(t16_24, 0.001000);
    //Instruction 1577
    //RSQ
    t16_24 = inversesqrt(t16_0);
    //Instruction 1578
    //MUL
    t16_5.xyz = vec3(t16_24) * t16_5.xyz;
    //Instruction 1579
    //DP3
    t16_24 = dot(t16_4.xyz, t16_5.xyz);
    //Instruction 1580
    //MAX
    t16_0 = max(t16_24, 0.0);
    //Instruction 1581
    //MUL
    t16_24 = t16_0 * t16_0;
    //Instruction 1582
    //ADD
    t16_25 = (-_Glossiness) + 1.0;
    //Instruction 1583
    //MUL
    t16_26 = t16_25 * t16_25;
    //Instruction 1584
    //ADD
    t16_25 = (-t16_25) + 1.0;
    //Instruction 1585
    //MAD
    t16_25 = t16_25 * 0.968000 + 0.030000;
    //Instruction 1586
    //LOG
    t16_25 = log2(t16_25);
    //Instruction 1587
    //DIV
    t16_25 = 10.000000 / t16_25;
    //Instruction 1588
    //MAD
    t16_24 = t16_24 * _Glossiness + t16_26;
    //Instruction 1589
    //MUL
    t16_24 = t16_24 * unity_LightGammaCorrectionConsts.z;
    //Instruction 1590
    //MAD
    t16_0 = t16_24 * t16_0 + 0.000100;
    //Instruction 1591
    //DP3
    t16_24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 1592
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 1593
    //MUL
    t16_6.xyz = vec3(t16_24) * vs_TEXCOORD4.xyz;
    //Instruction 1594
    //DP3
    t16_24 = dot(t16_6.xyz, t16_5.xyz);
    //Instruction 1595
    //DP3
    t16_4.x = dot(t16_6.xyz, t16_4.xyz);
    //Instruction 1596
    //MAX
    t16_7 = max(t16_4.x, 0.0);
    //Instruction 1597
    //MAX
    t16_14 = max(t16_24, 0.0);
    //Instruction 1598
    //LOG
    t16_24 = log2(t16_14);
    //Instruction 1599
    //MUL
    t16_4.x = t16_25 * t16_25;
    //Instruction 1600
    //MAD
    t16_11 = t16_25 * t16_25 + 1.0;
    //Instruction 1601
    //MUL
    t16_24 = t16_24 * t16_4.x;
    //Instruction 1602
    //EXP
    t16_24 = exp2(t16_24);
    //Instruction 1603
    //MUL
    t16_24 = t16_24 * t16_11;
    //Instruction 1604
    //DIV
    t16_0 = t16_24 / t16_0;
    //Instruction 1605
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 1606
    //MAD
    t16_4.xyz = _Color.xyz * t10_1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 1607
    //MUL
    t16_1.xyz = t10_1.xyz * _Color.xyz;
    //Instruction 1608
    //MAD
    t16_4.xyz = vec3(_Metallic) * t16_4.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 1609
    //MUL
    t16_4.xyz = vec3(t16_0) * t16_4.xyz;
    //Instruction 1610
    //MAD
    t16_24 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 1611
    //MAD
    t16_4.xyz = t16_1.xyz * vec3(t16_24) + t16_4.xyz;
    //Instruction 1612
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 1613
    //MUL
    SV_Target0.xyz = vec3(t16_7) * t16_3.xyz;
    //Instruction 1614
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 1615
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 1955
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 1956
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 1957
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 1958
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 1959
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 1960
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 1961
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 1962
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 1963
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 1964
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 1965
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 1966
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 1967
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 1968
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 1969
    //MUL
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 1970
    //MAD
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    //Instruction 1971
    //MAD
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    //Instruction 1972
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 1973
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 1974
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 1975
    //MAD
    t2.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 1976
    //ADD
    vs_TEXCOORD6.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 1977
    //MOV
    t1.w = t2.x;
    //Instruction 1978
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 1979
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 1980
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 1981
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 1982
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 1983
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 1984
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 1985
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 1986
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 1987
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 1988
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 1989
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 1990
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 1991
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 1992
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 1993
    //MUL
    t16_4.xyz = t1.yzx * t0.zxy;
    //Instruction 1994
    //MAD
    t16_4.xyz = t0.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 1995
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 1996
    //MOV
    vs_TEXCOORD3.w = t2.y;
    //Instruction 1997
    //MOV
    t0.w = t2.z;
    //Instruction 1998
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 1999
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 2000
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 2001
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 2002
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 2003
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 2004
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 2005
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 2006
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 2007
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 2008
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 2009
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 2010
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 2011
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 2012
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 2013
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 2014
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 2015
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 2016
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 2017
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 2018
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp float t10_0;
bvec4 tb0;
highp vec4 t1;
mediump vec3 t16_1;
lowp vec3 t10_1;
highp vec4 t2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp vec3 t7;
mediump float t16_7;
lowp float t10_7;
mediump float t16_11;
mediump float t16_14;
mediump float t16_24;
mediump float t16_25;
mediump float t16_26;
void main()
{
    //Instruction 1880
    //DP3
    t0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    //Instruction 1881
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 1882
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 1883
    //MUL
    t0.x = t0.x * 0.970000;
    //Instruction 1884
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(0.007812, 0.007812, 0.007812);
    //Instruction 1885
    //SAMPLE
    t1 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 1886
    //DP4
    t1.x = dot(t1, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 1887
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(-0.007812, -0.007812, 0.007812);
    //Instruction 1888
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 1889
    //DP4
    t1.y = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 1890
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(-0.007812, 0.007812, -0.007812);
    //Instruction 1891
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 1892
    //DP4
    t1.z = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 1893
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(0.007812, -0.007812, -0.007812);
    //Instruction 1894
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 1895
    //DP4
    t1.w = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 1896
    //LT
    tb0 = lessThan(t1, t0.xxxx);
    //Instruction 1897
    //MOVC
    t0.x = (tb0.x) ? _LightShadowData.x : float(1.0);
    t0.y = (tb0.y) ? _LightShadowData.x : float(1.0);
    t0.z = (tb0.z) ? _LightShadowData.x : float(1.0);
    t0.w = (tb0.w) ? _LightShadowData.x : float(1.0);
    //Instruction 1898
    //DP4
    t16_3.x = dot(t0, vec4(0.250000, 0.250000, 0.250000, 0.250000));
    //Instruction 1899
    //DP3
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 1900
    //SAMPLE
    t10_0 = texture(_LightTextureB0, t0.xx).w;
    //Instruction 1901
    //SAMPLE
    t10_7 = texture(_LightTexture0, vs_TEXCOORD5.xyz).w;
    //Instruction 1902
    //MUL
    t16_0 = t10_7 * t10_0;
    //Instruction 1903
    //MUL
    t16_0 = t16_3.x * t16_0;
    //Instruction 1904
    //MUL
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 1905
    //DP3
    t16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 1906
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 1907
    //MOV
    t16_4.x = vs_TEXCOORD2.w;
    //Instruction 1908
    //MOV
    t16_4.y = vs_TEXCOORD3.w;
    //Instruction 1909
    //MOV
    t16_4.z = vs_TEXCOORD4.w;
    //Instruction 1910
    //DP3
    t16_25 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 1911
    //RSQ
    t16_25 = inversesqrt(t16_25);
    //Instruction 1912
    //MUL
    t16_4.xyz = vec3(t16_25) * t16_4.xyz;
    //Instruction 1913
    //MAD
    t16_5.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_24) + t16_4.xyz;
    //Instruction 1914
    //DP3
    t16_24 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 1915
    //MAX
    t16_0 = max(t16_24, 0.001000);
    //Instruction 1916
    //RSQ
    t16_24 = inversesqrt(t16_0);
    //Instruction 1917
    //MUL
    t16_5.xyz = vec3(t16_24) * t16_5.xyz;
    //Instruction 1918
    //DP3
    t16_24 = dot(t16_4.xyz, t16_5.xyz);
    //Instruction 1919
    //MAX
    t16_0 = max(t16_24, 0.0);
    //Instruction 1920
    //MUL
    t16_24 = t16_0 * t16_0;
    //Instruction 1921
    //ADD
    t16_25 = (-_Glossiness) + 1.0;
    //Instruction 1922
    //MUL
    t16_26 = t16_25 * t16_25;
    //Instruction 1923
    //ADD
    t16_25 = (-t16_25) + 1.0;
    //Instruction 1924
    //MAD
    t16_25 = t16_25 * 0.968000 + 0.030000;
    //Instruction 1925
    //LOG
    t16_25 = log2(t16_25);
    //Instruction 1926
    //DIV
    t16_25 = 10.000000 / t16_25;
    //Instruction 1927
    //MAD
    t16_24 = t16_24 * _Glossiness + t16_26;
    //Instruction 1928
    //MUL
    t16_24 = t16_24 * unity_LightGammaCorrectionConsts.z;
    //Instruction 1929
    //MAD
    t16_0 = t16_24 * t16_0 + 0.000100;
    //Instruction 1930
    //DP3
    t16_24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 1931
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 1932
    //MUL
    t16_6.xyz = vec3(t16_24) * vs_TEXCOORD4.xyz;
    //Instruction 1933
    //DP3
    t16_24 = dot(t16_6.xyz, t16_5.xyz);
    //Instruction 1934
    //DP3
    t16_4.x = dot(t16_6.xyz, t16_4.xyz);
    //Instruction 1935
    //MAX
    t16_7 = max(t16_4.x, 0.0);
    //Instruction 1936
    //MAX
    t16_14 = max(t16_24, 0.0);
    //Instruction 1937
    //LOG
    t16_24 = log2(t16_14);
    //Instruction 1938
    //MUL
    t16_4.x = t16_25 * t16_25;
    //Instruction 1939
    //MAD
    t16_11 = t16_25 * t16_25 + 1.0;
    //Instruction 1940
    //MUL
    t16_24 = t16_24 * t16_4.x;
    //Instruction 1941
    //EXP
    t16_24 = exp2(t16_24);
    //Instruction 1942
    //MUL
    t16_24 = t16_24 * t16_11;
    //Instruction 1943
    //DIV
    t16_0 = t16_24 / t16_0;
    //Instruction 1944
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 1945
    //MAD
    t16_4.xyz = _Color.xyz * t10_1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 1946
    //MUL
    t16_1.xyz = t10_1.xyz * _Color.xyz;
    //Instruction 1947
    //MAD
    t16_4.xyz = vec3(_Metallic) * t16_4.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 1948
    //MUL
    t16_4.xyz = vec3(t16_0) * t16_4.xyz;
    //Instruction 1949
    //MAD
    t16_24 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 1950
    //MAD
    t16_4.xyz = t16_1.xyz * vec3(t16_24) + t16_4.xyz;
    //Instruction 1951
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 1952
    //MUL
    SV_Target0.xyz = vec3(t16_7) * t16_3.xyz;
    //Instruction 1953
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 1954
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 1730
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 1731
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 1732
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 1733
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 1734
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 1735
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 1736
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 1737
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 1738
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 1739
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 1740
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 1741
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 1742
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 1743
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 1744
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 1745
    //MOV
    t1.w = t0.x;
    //Instruction 1746
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 1747
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 1748
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 1749
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 1750
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 1751
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 1752
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 1753
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 1754
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 1755
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 1756
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 1757
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 1758
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 1759
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 1760
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 1761
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 1762
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 1763
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 1764
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 1765
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 1766
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 1767
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 1768
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 1769
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 1770
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 1771
    //MOV
    t2.w = t0.z;
    //Instruction 1772
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 1773
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 1774
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 1775
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 1776
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 1777
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 1778
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 1779
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 1780
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 1781
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 1782
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
mediump float t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_4;
mediump vec2 t16_7;
mediump float t16_15;
mediump float t16_16;
void main()
{
    //Instruction 1680
    //DP3
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 1681
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 1682
    //MOV
    t16_1.x = vs_TEXCOORD2.w;
    //Instruction 1683
    //MOV
    t16_1.y = vs_TEXCOORD3.w;
    //Instruction 1684
    //MOV
    t16_1.z = vs_TEXCOORD4.w;
    //Instruction 1685
    //MAD
    t16_0.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + t16_1.xyz;
    //Instruction 1686
    //DP3
    t16_15 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 1687
    //MAX
    t16_2 = max(t16_15, 0.001000);
    //Instruction 1688
    //RSQ
    t16_15 = inversesqrt(t16_2);
    //Instruction 1689
    //MUL
    t16_0.xyz = vec3(t16_15) * t16_0.xyz;
    //Instruction 1690
    //DP3
    t16_15 = dot(t16_1.xyz, t16_0.xyz);
    //Instruction 1691
    //MAX
    t16_2 = max(t16_15, 0.0);
    //Instruction 1692
    //MUL
    t16_15 = t16_2 * t16_2;
    //Instruction 1693
    //ADD
    t16_16 = (-_Glossiness) + 1.0;
    //Instruction 1694
    //MUL
    t16_3.x = t16_16 * t16_16;
    //Instruction 1695
    //ADD
    t16_16 = (-t16_16) + 1.0;
    //Instruction 1696
    //MAD
    t16_16 = t16_16 * 0.968000 + 0.030000;
    //Instruction 1697
    //LOG
    t16_16 = log2(t16_16);
    //Instruction 1698
    //DIV
    t16_16 = 10.000000 / t16_16;
    //Instruction 1699
    //MAD
    t16_15 = t16_15 * _Glossiness + t16_3.x;
    //Instruction 1700
    //MUL
    t16_15 = t16_15 * unity_LightGammaCorrectionConsts.z;
    //Instruction 1701
    //MAD
    t16_2 = t16_15 * t16_2 + 0.000100;
    //Instruction 1702
    //MAD
    t16_15 = t16_16 * t16_16 + 1.0;
    //Instruction 1703
    //MUL
    t16_16 = t16_16 * t16_16;
    //Instruction 1704
    //DP3
    t16_3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 1705
    //RSQ
    t16_3.x = inversesqrt(t16_3.x);
    //Instruction 1706
    //MUL
    t16_3.xyz = t16_3.xxx * vs_TEXCOORD4.xyz;
    //Instruction 1707
    //DP3
    t16_0.x = dot(t16_3.xyz, t16_0.xyz);
    //Instruction 1708
    //DP3
    t16_0.y = dot(t16_3.xyz, t16_1.xyz);
    //Instruction 1709
    //MAX
    t16_7.xy = max(t16_0.yx, vec2(0.0, 0.0));
    //Instruction 1710
    //LOG
    t16_0.x = log2(t16_7.y);
    //Instruction 1711
    //MUL
    t16_0.x = t16_0.x * t16_16;
    //Instruction 1712
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 1713
    //MUL
    t16_0.x = t16_0.x * t16_15;
    //Instruction 1714
    //DIV
    t16_2 = t16_0.x / t16_2;
    //Instruction 1715
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 1716
    //MAD
    t16_0.xyz = _Color.xyz * t10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 1717
    //MUL
    t16_4.xyz = t10_4.xyz * _Color.xyz;
    //Instruction 1718
    //MAD
    t16_0.xyz = vec3(_Metallic) * t16_0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 1719
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_2);
    //Instruction 1720
    //MAD
    t16_15 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 1721
    //MAD
    t16_0.xyz = t16_4.xyz * vec3(t16_15) + t16_0.xyz;
    //Instruction 1722
    //SAMPLE_C_LZ
    vec3 txVec6 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    //Instruction 1723
    //ADD
    t16_1.x = (-_LightShadowData.x) + 1.0;
    //Instruction 1724
    //MAD
    t16_15 = t16_15 * t16_1.x + _LightShadowData.x;
    //Instruction 1725
    //MUL
    t16_1.xyz = vec3(t16_15) * _LightColor0.xyz;
    //Instruction 1726
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 1727
    //MUL
    SV_Target0.xyz = t16_7.xxx * t16_0.xyz;
    //Instruction 1728
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 1729
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec2 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 2071
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2072
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2073
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2074
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2075
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2076
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2077
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2078
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2079
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2080
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2081
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2082
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2083
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2084
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 2085
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 2086
    //MOV
    t1.w = t0.x;
    //Instruction 2087
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 2088
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 2089
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 2090
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 2091
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2092
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 2093
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 2094
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2095
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2096
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2097
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2098
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2099
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2100
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 2101
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2102
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2103
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2104
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 2105
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 2106
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2107
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 2108
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 2109
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 2110
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 2111
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 2112
    //MOV
    t2.w = t0.z;
    //Instruction 2113
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 2114
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 2115
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 2116
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 2117
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 2118
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 2119
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 2120
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 2121
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 2122
    //DP4
    t2.x = dot(t16_0, t1);
    //Instruction 2123
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 2124
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 2125
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 2126
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 2127
    //DP4
    t2.y = dot(t16_0, t1);
    //Instruction 2128
    //MOV
    vs_TEXCOORD5.xy = t2.xy;
    //Instruction 2129
    //MUL
    t0 = t1.yyyy * unity_World2Shadow[0][1];
    //Instruction 2130
    //MAD
    t0 = unity_World2Shadow[0][0] * t1.xxxx + t0;
    //Instruction 2131
    //MAD
    t0 = unity_World2Shadow[0][2] * t1.zzzz + t0;
    //Instruction 2132
    //MAD
    t0 = unity_World2Shadow[0][3] * t1.wwww + t0;
    //Instruction 2133
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 2134
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec2 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
mediump float t16_2;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_4;
mediump vec2 t16_7;
mediump float t16_15;
mediump float t16_16;
void main()
{
    //Instruction 2019
    //DP3
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 2020
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 2021
    //MOV
    t16_1.x = vs_TEXCOORD2.w;
    //Instruction 2022
    //MOV
    t16_1.y = vs_TEXCOORD3.w;
    //Instruction 2023
    //MOV
    t16_1.z = vs_TEXCOORD4.w;
    //Instruction 2024
    //MAD
    t16_0.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + t16_1.xyz;
    //Instruction 2025
    //DP3
    t16_15 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 2026
    //MAX
    t16_2 = max(t16_15, 0.001000);
    //Instruction 2027
    //RSQ
    t16_15 = inversesqrt(t16_2);
    //Instruction 2028
    //MUL
    t16_0.xyz = vec3(t16_15) * t16_0.xyz;
    //Instruction 2029
    //DP3
    t16_15 = dot(t16_1.xyz, t16_0.xyz);
    //Instruction 2030
    //MAX
    t16_2 = max(t16_15, 0.0);
    //Instruction 2031
    //MUL
    t16_15 = t16_2 * t16_2;
    //Instruction 2032
    //ADD
    t16_16 = (-_Glossiness) + 1.0;
    //Instruction 2033
    //MUL
    t16_3.x = t16_16 * t16_16;
    //Instruction 2034
    //ADD
    t16_16 = (-t16_16) + 1.0;
    //Instruction 2035
    //MAD
    t16_16 = t16_16 * 0.968000 + 0.030000;
    //Instruction 2036
    //LOG
    t16_16 = log2(t16_16);
    //Instruction 2037
    //DIV
    t16_16 = 10.000000 / t16_16;
    //Instruction 2038
    //MAD
    t16_15 = t16_15 * _Glossiness + t16_3.x;
    //Instruction 2039
    //MUL
    t16_15 = t16_15 * unity_LightGammaCorrectionConsts.z;
    //Instruction 2040
    //MAD
    t16_2 = t16_15 * t16_2 + 0.000100;
    //Instruction 2041
    //MAD
    t16_15 = t16_16 * t16_16 + 1.0;
    //Instruction 2042
    //MUL
    t16_16 = t16_16 * t16_16;
    //Instruction 2043
    //DP3
    t16_3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2044
    //RSQ
    t16_3.x = inversesqrt(t16_3.x);
    //Instruction 2045
    //MUL
    t16_3.xyz = t16_3.xxx * vs_TEXCOORD4.xyz;
    //Instruction 2046
    //DP3
    t16_0.x = dot(t16_3.xyz, t16_0.xyz);
    //Instruction 2047
    //DP3
    t16_0.y = dot(t16_3.xyz, t16_1.xyz);
    //Instruction 2048
    //MAX
    t16_7.xy = max(t16_0.yx, vec2(0.0, 0.0));
    //Instruction 2049
    //LOG
    t16_0.x = log2(t16_7.y);
    //Instruction 2050
    //MUL
    t16_0.x = t16_0.x * t16_16;
    //Instruction 2051
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 2052
    //MUL
    t16_0.x = t16_0.x * t16_15;
    //Instruction 2053
    //DIV
    t16_2 = t16_0.x / t16_2;
    //Instruction 2054
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 2055
    //MAD
    t16_0.xyz = _Color.xyz * t10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2056
    //MUL
    t16_4.xyz = t10_4.xyz * _Color.xyz;
    //Instruction 2057
    //MAD
    t16_0.xyz = vec3(_Metallic) * t16_0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2058
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_2);
    //Instruction 2059
    //MAD
    t16_15 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2060
    //MAD
    t16_0.xyz = t16_4.xyz * vec3(t16_15) + t16_0.xyz;
    //Instruction 2061
    //SAMPLE_C_LZ
    vec3 txVec7 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    //Instruction 2062
    //ADD
    t16_1.x = (-_LightShadowData.x) + 1.0;
    //Instruction 2063
    //MAD
    t16_15 = t16_15 * t16_1.x + _LightShadowData.x;
    //Instruction 2064
    //SAMPLE
    t10_2 = texture(_LightTexture0, vs_TEXCOORD5.xy).w;
    //Instruction 2065
    //MUL
    t16_2 = t16_15 * t10_2;
    //Instruction 2066
    //MUL
    t16_1.xyz = vec3(t16_2) * _LightColor0.xyz;
    //Instruction 2067
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 2068
    //MUL
    SV_Target0.xyz = t16_7.xxx * t16_0.xyz;
    //Instruction 2069
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2070
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" "FOG_EXP2" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 1838
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 1839
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 1840
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 1841
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 1842
    //MOV
    gl_Position = t0;
    //Instruction 1843
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 1844
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 1845
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 1846
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 1847
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 1848
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 1849
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 1850
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 1851
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 1852
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 1853
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 1854
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 1855
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 1856
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 1857
    //MOV
    t1.w = t0.x;
    //Instruction 1858
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 1859
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 1860
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 1861
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 1862
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 1863
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 1864
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 1865
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 1866
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 1867
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 1868
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 1869
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 1870
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 1871
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 1872
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 1873
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 1874
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 1875
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 1876
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 1877
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 1878
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 1879
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 1880
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 1881
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 1882
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 1883
    //MOV
    t2.w = t0.z;
    //Instruction 1884
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 1885
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 1886
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 1887
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 1888
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 1889
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 1890
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 1891
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 1892
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 1893
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 1894
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 1895
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 1896
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 1897
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 1898
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 1899
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 1900
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 1901
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 1902
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 1903
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 1904
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
highp vec3 t2;
mediump float t16_2;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_4;
mediump vec3 t16_5;
mediump vec2 t16_7;
mediump float t16_10;
mediump float t16_15;
mediump float t16_16;
void main()
{
    //Instruction 1783
    //DP3
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 1784
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 1785
    //MOV
    t16_1.x = vs_TEXCOORD2.w;
    //Instruction 1786
    //MOV
    t16_1.y = vs_TEXCOORD3.w;
    //Instruction 1787
    //MOV
    t16_1.z = vs_TEXCOORD4.w;
    //Instruction 1788
    //DP3
    t16_5.x = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 1789
    //RSQ
    t16_5.x = inversesqrt(t16_5.x);
    //Instruction 1790
    //MUL
    t16_5.xyz = t16_5.xxx * t16_1.xyz;
    //Instruction 1791
    //MAD
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + t16_5.xyz;
    //Instruction 1792
    //DP3
    t16_0.x = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 1793
    //MAX
    t16_2 = max(t16_0.x, 0.001000);
    //Instruction 1794
    //RSQ
    t16_0.x = inversesqrt(t16_2);
    //Instruction 1795
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    //Instruction 1796
    //DP3
    t16_0.x = dot(t16_5.xyz, t16_1.xyz);
    //Instruction 1797
    //MAX
    t16_2 = max(t16_0.x, 0.0);
    //Instruction 1798
    //MUL
    t16_0.x = t16_2 * t16_2;
    //Instruction 1799
    //ADD
    t16_16 = (-_Glossiness) + 1.0;
    //Instruction 1800
    //MUL
    t16_3.x = t16_16 * t16_16;
    //Instruction 1801
    //ADD
    t16_16 = (-t16_16) + 1.0;
    //Instruction 1802
    //MAD
    t16_16 = t16_16 * 0.968000 + 0.030000;
    //Instruction 1803
    //LOG
    t16_16 = log2(t16_16);
    //Instruction 1804
    //DIV
    t16_16 = 10.000000 / t16_16;
    //Instruction 1805
    //MAD
    t16_0.x = t16_0.x * _Glossiness + t16_3.x;
    //Instruction 1806
    //MUL
    t16_0.x = t16_0.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 1807
    //MAD
    t16_2 = t16_0.x * t16_2 + 0.000100;
    //Instruction 1808
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 1809
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 1810
    //MUL
    t16_3.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 1811
    //DP3
    t16_0.x = dot(t16_3.xyz, t16_1.xyz);
    //Instruction 1812
    //DP3
    t16_0.y = dot(t16_3.xyz, t16_5.xyz);
    //Instruction 1813
    //MAX
    t16_7.xy = max(t16_0.yx, vec2(0.0, 0.0));
    //Instruction 1814
    //LOG
    t16_0.x = log2(t16_7.y);
    //Instruction 1815
    //MUL
    t16_5.x = t16_16 * t16_16;
    //Instruction 1816
    //MAD
    t16_10 = t16_16 * t16_16 + 1.0;
    //Instruction 1817
    //MUL
    t16_0.x = t16_0.x * t16_5.x;
    //Instruction 1818
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 1819
    //MUL
    t16_0.x = t16_0.x * t16_10;
    //Instruction 1820
    //DIV
    t16_2 = t16_0.x / t16_2;
    //Instruction 1821
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 1822
    //MAD
    t16_0.xyz = _Color.xyz * t10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 1823
    //MUL
    t16_4.xyz = t10_4.xyz * _Color.xyz;
    //Instruction 1824
    //MAD
    t16_0.xyz = vec3(_Metallic) * t16_0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 1825
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_2);
    //Instruction 1826
    //MAD
    t16_15 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 1827
    //MAD
    t16_0.xyz = t16_4.xyz * vec3(t16_15) + t16_0.xyz;
    //Instruction 1828
    //DP3
    t2.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 1829
    //SAMPLE
    t10_2 = texture(_LightTexture0, t2.xx).w;
    //Instruction 1830
    //MUL
    t16_1.xyz = vec3(t10_2) * _LightColor0.xyz;
    //Instruction 1831
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 1832
    //MUL
    t16_0.xyz = t16_7.xxx * t16_0.xyz;
    //Instruction 1833
    //MOV
    t2.x = vs_TEXCOORD7;
    t2.x = clamp(t2.x, 0.0, 1.0);
    //Instruction 1834
    //MUL
    t2.xyz = t16_0.xyz * t2.xxx;
    //Instruction 1835
    //MOV
    SV_Target0.xyz = t2.xyz;
    //Instruction 1836
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 1837
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "FOG_EXP2" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 1954
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 1955
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 1956
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 1957
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 1958
    //MOV
    gl_Position = t0;
    //Instruction 1959
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 1960
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 1961
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 1962
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 1963
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 1964
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 1965
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 1966
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 1967
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 1968
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 1969
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 1970
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 1971
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 1972
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 1973
    //MOV
    t1.w = t0.x;
    //Instruction 1974
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 1975
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 1976
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 1977
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 1978
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 1979
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 1980
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 1981
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 1982
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 1983
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 1984
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 1985
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 1986
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 1987
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 1988
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 1989
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 1990
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 1991
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 1992
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 1993
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 1994
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 1995
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 1996
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 1997
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 1998
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 1999
    //MOV
    t2.w = t0.z;
    //Instruction 2000
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 2001
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
highp vec3 t2;
mediump float t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_4;
mediump vec2 t16_7;
mediump float t16_15;
mediump float t16_16;
void main()
{
    //Instruction 1905
    //DP3
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 1906
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 1907
    //MOV
    t16_1.x = vs_TEXCOORD2.w;
    //Instruction 1908
    //MOV
    t16_1.y = vs_TEXCOORD3.w;
    //Instruction 1909
    //MOV
    t16_1.z = vs_TEXCOORD4.w;
    //Instruction 1910
    //MAD
    t16_0.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + t16_1.xyz;
    //Instruction 1911
    //DP3
    t16_15 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 1912
    //MAX
    t16_2 = max(t16_15, 0.001000);
    //Instruction 1913
    //RSQ
    t16_15 = inversesqrt(t16_2);
    //Instruction 1914
    //MUL
    t16_0.xyz = vec3(t16_15) * t16_0.xyz;
    //Instruction 1915
    //DP3
    t16_15 = dot(t16_1.xyz, t16_0.xyz);
    //Instruction 1916
    //MAX
    t16_2 = max(t16_15, 0.0);
    //Instruction 1917
    //MUL
    t16_15 = t16_2 * t16_2;
    //Instruction 1918
    //ADD
    t16_16 = (-_Glossiness) + 1.0;
    //Instruction 1919
    //MUL
    t16_3.x = t16_16 * t16_16;
    //Instruction 1920
    //ADD
    t16_16 = (-t16_16) + 1.0;
    //Instruction 1921
    //MAD
    t16_16 = t16_16 * 0.968000 + 0.030000;
    //Instruction 1922
    //LOG
    t16_16 = log2(t16_16);
    //Instruction 1923
    //DIV
    t16_16 = 10.000000 / t16_16;
    //Instruction 1924
    //MAD
    t16_15 = t16_15 * _Glossiness + t16_3.x;
    //Instruction 1925
    //MUL
    t16_15 = t16_15 * unity_LightGammaCorrectionConsts.z;
    //Instruction 1926
    //MAD
    t16_2 = t16_15 * t16_2 + 0.000100;
    //Instruction 1927
    //MAD
    t16_15 = t16_16 * t16_16 + 1.0;
    //Instruction 1928
    //MUL
    t16_16 = t16_16 * t16_16;
    //Instruction 1929
    //DP3
    t16_3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 1930
    //RSQ
    t16_3.x = inversesqrt(t16_3.x);
    //Instruction 1931
    //MUL
    t16_3.xyz = t16_3.xxx * vs_TEXCOORD4.xyz;
    //Instruction 1932
    //DP3
    t16_0.x = dot(t16_3.xyz, t16_0.xyz);
    //Instruction 1933
    //DP3
    t16_0.y = dot(t16_3.xyz, t16_1.xyz);
    //Instruction 1934
    //MAX
    t16_7.xy = max(t16_0.yx, vec2(0.0, 0.0));
    //Instruction 1935
    //LOG
    t16_0.x = log2(t16_7.y);
    //Instruction 1936
    //MUL
    t16_0.x = t16_0.x * t16_16;
    //Instruction 1937
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 1938
    //MUL
    t16_0.x = t16_0.x * t16_15;
    //Instruction 1939
    //DIV
    t16_2 = t16_0.x / t16_2;
    //Instruction 1940
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 1941
    //MAD
    t16_0.xyz = _Color.xyz * t10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 1942
    //MUL
    t16_4.xyz = t10_4.xyz * _Color.xyz;
    //Instruction 1943
    //MAD
    t16_0.xyz = vec3(_Metallic) * t16_0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 1944
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_2);
    //Instruction 1945
    //MAD
    t16_15 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 1946
    //MAD
    t16_0.xyz = t16_4.xyz * vec3(t16_15) + t16_0.xyz;
    //Instruction 1947
    //MUL
    t16_0.xyz = t16_0.xyz * _LightColor0.xyz;
    //Instruction 1948
    //MUL
    t16_0.xyz = t16_7.xxx * t16_0.xyz;
    //Instruction 1949
    //MOV
    t2.x = vs_TEXCOORD7;
    t2.x = clamp(t2.x, 0.0, 1.0);
    //Instruction 1950
    //MUL
    t2.xyz = t16_0.xyz * t2.xxx;
    //Instruction 1951
    //MOV
    SV_Target0.xyz = t2.xyz;
    //Instruction 1952
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 1953
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" "FOG_EXP2" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 2197
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2198
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2199
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2200
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2201
    //MOV
    gl_Position = t0;
    //Instruction 2202
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 2203
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 2204
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 2205
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2206
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2207
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2208
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2209
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2210
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2211
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2212
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2213
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2214
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 2215
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 2216
    //MOV
    t1.w = t0.x;
    //Instruction 2217
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 2218
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 2219
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 2220
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 2221
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2222
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 2223
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 2224
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2225
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2226
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2227
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2228
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2229
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2230
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 2231
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2232
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2233
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2234
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 2235
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 2236
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2237
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 2238
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 2239
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 2240
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 2241
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 2242
    //MOV
    t2.w = t0.z;
    //Instruction 2243
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 2244
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 2245
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 2246
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 2247
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 2248
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 2249
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 2250
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 2251
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 2252
    //DP4
    t0.x = dot(t16_0, t1);
    //Instruction 2253
    //MOV
    t16_2.x = _LightMatrix0[0].y;
    //Instruction 2254
    //MOV
    t16_2.y = _LightMatrix0[1].y;
    //Instruction 2255
    //MOV
    t16_2.z = _LightMatrix0[2].y;
    //Instruction 2256
    //MOV
    t16_2.w = _LightMatrix0[3].y;
    //Instruction 2257
    //DP4
    t0.y = dot(t16_2, t1);
    //Instruction 2258
    //MOV
    t16_2.x = _LightMatrix0[0].z;
    //Instruction 2259
    //MOV
    t16_2.y = _LightMatrix0[1].z;
    //Instruction 2260
    //MOV
    t16_2.z = _LightMatrix0[2].z;
    //Instruction 2261
    //MOV
    t16_2.w = _LightMatrix0[3].z;
    //Instruction 2262
    //DP4
    t0.z = dot(t16_2, t1);
    //Instruction 2263
    //MOV
    t16_2.x = _LightMatrix0[0].w;
    //Instruction 2264
    //MOV
    t16_2.y = _LightMatrix0[1].w;
    //Instruction 2265
    //MOV
    t16_2.z = _LightMatrix0[2].w;
    //Instruction 2266
    //MOV
    t16_2.w = _LightMatrix0[3].w;
    //Instruction 2267
    //DP4
    t0.w = dot(t16_2, t1);
    //Instruction 2268
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 2269
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
highp vec3 t2;
mediump float t16_2;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_4;
lowp float t10_5;
mediump vec3 t16_6;
mediump vec2 t16_8;
mediump float t16_12;
bool tb14;
mediump float t16_18;
mediump float t16_19;
void main()
{
    //Instruction 2135
    //DP3
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 2136
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 2137
    //MOV
    t16_1.x = vs_TEXCOORD2.w;
    //Instruction 2138
    //MOV
    t16_1.y = vs_TEXCOORD3.w;
    //Instruction 2139
    //MOV
    t16_1.z = vs_TEXCOORD4.w;
    //Instruction 2140
    //DP3
    t16_6.x = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 2141
    //RSQ
    t16_6.x = inversesqrt(t16_6.x);
    //Instruction 2142
    //MUL
    t16_6.xyz = t16_6.xxx * t16_1.xyz;
    //Instruction 2143
    //MAD
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + t16_6.xyz;
    //Instruction 2144
    //DP3
    t16_0.x = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 2145
    //MAX
    t16_2 = max(t16_0.x, 0.001000);
    //Instruction 2146
    //RSQ
    t16_0.x = inversesqrt(t16_2);
    //Instruction 2147
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    //Instruction 2148
    //DP3
    t16_0.x = dot(t16_6.xyz, t16_1.xyz);
    //Instruction 2149
    //MAX
    t16_2 = max(t16_0.x, 0.0);
    //Instruction 2150
    //MUL
    t16_0.x = t16_2 * t16_2;
    //Instruction 2151
    //ADD
    t16_19 = (-_Glossiness) + 1.0;
    //Instruction 2152
    //MUL
    t16_3.x = t16_19 * t16_19;
    //Instruction 2153
    //ADD
    t16_19 = (-t16_19) + 1.0;
    //Instruction 2154
    //MAD
    t16_19 = t16_19 * 0.968000 + 0.030000;
    //Instruction 2155
    //LOG
    t16_19 = log2(t16_19);
    //Instruction 2156
    //DIV
    t16_19 = 10.000000 / t16_19;
    //Instruction 2157
    //MAD
    t16_0.x = t16_0.x * _Glossiness + t16_3.x;
    //Instruction 2158
    //MUL
    t16_0.x = t16_0.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 2159
    //MAD
    t16_2 = t16_0.x * t16_2 + 0.000100;
    //Instruction 2160
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2161
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 2162
    //MUL
    t16_3.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 2163
    //DP3
    t16_0.x = dot(t16_3.xyz, t16_1.xyz);
    //Instruction 2164
    //DP3
    t16_0.y = dot(t16_3.xyz, t16_6.xyz);
    //Instruction 2165
    //MAX
    t16_8.xy = max(t16_0.yx, vec2(0.0, 0.0));
    //Instruction 2166
    //LOG
    t16_0.x = log2(t16_8.y);
    //Instruction 2167
    //MUL
    t16_6.x = t16_19 * t16_19;
    //Instruction 2168
    //MAD
    t16_12 = t16_19 * t16_19 + 1.0;
    //Instruction 2169
    //MUL
    t16_0.x = t16_0.x * t16_6.x;
    //Instruction 2170
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 2171
    //MUL
    t16_0.x = t16_0.x * t16_12;
    //Instruction 2172
    //DIV
    t16_2 = t16_0.x / t16_2;
    //Instruction 2173
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 2174
    //MAD
    t16_0.xyz = _Color.xyz * t10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2175
    //MUL
    t16_4.xyz = t10_4.xyz * _Color.xyz;
    //Instruction 2176
    //MAD
    t16_0.xyz = vec3(_Metallic) * t16_0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2177
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_2);
    //Instruction 2178
    //MAD
    t16_18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2179
    //MAD
    t16_0.xyz = t16_4.xyz * vec3(t16_18) + t16_0.xyz;
    //Instruction 2180
    //DIV
    t16_1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    //Instruction 2181
    //ADD
    t16_1.xy = t16_1.xy + vec2(0.500000, 0.500000);
    //Instruction 2182
    //SAMPLE
    t10_2 = texture(_LightTexture0, t16_1.xy).w;
    //Instruction 2183
    //LT
    tb14 = 0.0<vs_TEXCOORD5.z;
    //Instruction 2184
    //MOVC
    t10_5 = (tb14) ? 1.0 : 0.0;
    //Instruction 2185
    //MUL
    t10_5 = t10_2 * t10_5;
    //Instruction 2186
    //DP3
    t16_2 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 2187
    //SAMPLE
    t10_2 = texture(_LightTextureB0, vec2(t16_2)).w;
    //Instruction 2188
    //MUL
    t10_5 = t10_2 * t10_5;
    //Instruction 2189
    //MUL
    t16_1.xyz = vec3(t10_5) * _LightColor0.xyz;
    //Instruction 2190
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 2191
    //MUL
    t16_0.xyz = t16_8.xxx * t16_0.xyz;
    //Instruction 2192
    //MOV
    t2.x = vs_TEXCOORD7;
    t2.x = clamp(t2.x, 0.0, 1.0);
    //Instruction 2193
    //MUL
    t2.xyz = t16_0.xyz * t2.xxx;
    //Instruction 2194
    //MOV
    SV_Target0.xyz = t2.xyz;
    //Instruction 2195
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2196
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "FOG_EXP2" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 2059
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2060
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2061
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2062
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2063
    //MOV
    gl_Position = t0;
    //Instruction 2064
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 2065
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 2066
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 2067
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2068
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2069
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2070
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2071
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2072
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2073
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2074
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2075
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2076
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 2077
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 2078
    //MOV
    t1.w = t0.x;
    //Instruction 2079
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 2080
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 2081
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 2082
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 2083
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2084
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 2085
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 2086
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2087
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2088
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2089
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2090
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2091
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2092
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 2093
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2094
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2095
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2096
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 2097
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 2098
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2099
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 2100
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 2101
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 2102
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 2103
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 2104
    //MOV
    t2.w = t0.z;
    //Instruction 2105
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 2106
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 2107
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 2108
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 2109
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 2110
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 2111
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 2112
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 2113
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 2114
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 2115
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 2116
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 2117
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 2118
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 2119
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 2120
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 2121
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 2122
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 2123
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 2124
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 2125
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
highp vec3 t2;
mediump float t16_2;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_4;
mediump vec3 t16_5;
mediump vec2 t16_7;
mediump float t16_10;
lowp float t10_12;
mediump float t16_15;
mediump float t16_16;
void main()
{
    //Instruction 2002
    //DP3
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 2003
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 2004
    //MOV
    t16_1.x = vs_TEXCOORD2.w;
    //Instruction 2005
    //MOV
    t16_1.y = vs_TEXCOORD3.w;
    //Instruction 2006
    //MOV
    t16_1.z = vs_TEXCOORD4.w;
    //Instruction 2007
    //DP3
    t16_5.x = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 2008
    //RSQ
    t16_5.x = inversesqrt(t16_5.x);
    //Instruction 2009
    //MUL
    t16_5.xyz = t16_5.xxx * t16_1.xyz;
    //Instruction 2010
    //MAD
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + t16_5.xyz;
    //Instruction 2011
    //DP3
    t16_0.x = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 2012
    //MAX
    t16_2 = max(t16_0.x, 0.001000);
    //Instruction 2013
    //RSQ
    t16_0.x = inversesqrt(t16_2);
    //Instruction 2014
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    //Instruction 2015
    //DP3
    t16_0.x = dot(t16_5.xyz, t16_1.xyz);
    //Instruction 2016
    //MAX
    t16_2 = max(t16_0.x, 0.0);
    //Instruction 2017
    //MUL
    t16_0.x = t16_2 * t16_2;
    //Instruction 2018
    //ADD
    t16_16 = (-_Glossiness) + 1.0;
    //Instruction 2019
    //MUL
    t16_3.x = t16_16 * t16_16;
    //Instruction 2020
    //ADD
    t16_16 = (-t16_16) + 1.0;
    //Instruction 2021
    //MAD
    t16_16 = t16_16 * 0.968000 + 0.030000;
    //Instruction 2022
    //LOG
    t16_16 = log2(t16_16);
    //Instruction 2023
    //DIV
    t16_16 = 10.000000 / t16_16;
    //Instruction 2024
    //MAD
    t16_0.x = t16_0.x * _Glossiness + t16_3.x;
    //Instruction 2025
    //MUL
    t16_0.x = t16_0.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 2026
    //MAD
    t16_2 = t16_0.x * t16_2 + 0.000100;
    //Instruction 2027
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2028
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 2029
    //MUL
    t16_3.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 2030
    //DP3
    t16_0.x = dot(t16_3.xyz, t16_1.xyz);
    //Instruction 2031
    //DP3
    t16_0.y = dot(t16_3.xyz, t16_5.xyz);
    //Instruction 2032
    //MAX
    t16_7.xy = max(t16_0.yx, vec2(0.0, 0.0));
    //Instruction 2033
    //LOG
    t16_0.x = log2(t16_7.y);
    //Instruction 2034
    //MUL
    t16_5.x = t16_16 * t16_16;
    //Instruction 2035
    //MAD
    t16_10 = t16_16 * t16_16 + 1.0;
    //Instruction 2036
    //MUL
    t16_0.x = t16_0.x * t16_5.x;
    //Instruction 2037
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 2038
    //MUL
    t16_0.x = t16_0.x * t16_10;
    //Instruction 2039
    //DIV
    t16_2 = t16_0.x / t16_2;
    //Instruction 2040
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 2041
    //MAD
    t16_0.xyz = _Color.xyz * t10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2042
    //MUL
    t16_4.xyz = t10_4.xyz * _Color.xyz;
    //Instruction 2043
    //MAD
    t16_0.xyz = vec3(_Metallic) * t16_0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2044
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_2);
    //Instruction 2045
    //MAD
    t16_15 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2046
    //MAD
    t16_0.xyz = t16_4.xyz * vec3(t16_15) + t16_0.xyz;
    //Instruction 2047
    //DP3
    t2.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 2048
    //SAMPLE
    t10_2 = texture(_LightTextureB0, t2.xx).w;
    //Instruction 2049
    //SAMPLE
    t10_12 = texture(_LightTexture0, vs_TEXCOORD5.xyz).w;
    //Instruction 2050
    //MUL
    t16_2 = t10_12 * t10_2;
    //Instruction 2051
    //MUL
    t16_1.xyz = vec3(t16_2) * _LightColor0.xyz;
    //Instruction 2052
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 2053
    //MUL
    t16_0.xyz = t16_7.xxx * t16_0.xyz;
    //Instruction 2054
    //MOV
    t2.x = vs_TEXCOORD7;
    t2.x = clamp(t2.x, 0.0, 1.0);
    //Instruction 2055
    //MUL
    t2.xyz = t16_0.xyz * t2.xxx;
    //Instruction 2056
    //MOV
    SV_Target0.xyz = t2.xyz;
    //Instruction 2057
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2058
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "FOG_EXP2" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp float vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 2321
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2322
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2323
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2324
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2325
    //MOV
    gl_Position = t0;
    //Instruction 2326
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 2327
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 2328
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 2329
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2330
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2331
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2332
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2333
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2334
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2335
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2336
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2337
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2338
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 2339
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 2340
    //MOV
    t1.w = t0.x;
    //Instruction 2341
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 2342
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 2343
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 2344
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 2345
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2346
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 2347
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 2348
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2349
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2350
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2351
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2352
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2353
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2354
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 2355
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2356
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2357
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2358
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 2359
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 2360
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2361
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 2362
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 2363
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 2364
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 2365
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 2366
    //MOV
    t2.w = t0.z;
    //Instruction 2367
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 2368
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 2369
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 2370
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 2371
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 2372
    //MOV
    t16_1.x = _LightMatrix0[0].x;
    //Instruction 2373
    //MOV
    t16_1.y = _LightMatrix0[1].x;
    //Instruction 2374
    //MOV
    t16_1.z = _LightMatrix0[2].x;
    //Instruction 2375
    //MOV
    t16_1.w = _LightMatrix0[3].x;
    //Instruction 2376
    //DP4
    vs_TEXCOORD5.x = dot(t16_1, t0);
    //Instruction 2377
    //MOV
    t16_1.x = _LightMatrix0[0].y;
    //Instruction 2378
    //MOV
    t16_1.y = _LightMatrix0[1].y;
    //Instruction 2379
    //MOV
    t16_1.z = _LightMatrix0[2].y;
    //Instruction 2380
    //MOV
    t16_1.w = _LightMatrix0[3].y;
    //Instruction 2381
    //DP4
    vs_TEXCOORD5.y = dot(t16_1, t0);
    //Instruction 2382
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
in highp float vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
highp vec3 t2;
mediump float t16_2;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_4;
mediump vec2 t16_7;
mediump float t16_15;
mediump float t16_16;
void main()
{
    //Instruction 2270
    //DP3
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 2271
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 2272
    //MOV
    t16_1.x = vs_TEXCOORD2.w;
    //Instruction 2273
    //MOV
    t16_1.y = vs_TEXCOORD3.w;
    //Instruction 2274
    //MOV
    t16_1.z = vs_TEXCOORD4.w;
    //Instruction 2275
    //MAD
    t16_0.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + t16_1.xyz;
    //Instruction 2276
    //DP3
    t16_15 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 2277
    //MAX
    t16_2 = max(t16_15, 0.001000);
    //Instruction 2278
    //RSQ
    t16_15 = inversesqrt(t16_2);
    //Instruction 2279
    //MUL
    t16_0.xyz = vec3(t16_15) * t16_0.xyz;
    //Instruction 2280
    //DP3
    t16_15 = dot(t16_1.xyz, t16_0.xyz);
    //Instruction 2281
    //MAX
    t16_2 = max(t16_15, 0.0);
    //Instruction 2282
    //MUL
    t16_15 = t16_2 * t16_2;
    //Instruction 2283
    //ADD
    t16_16 = (-_Glossiness) + 1.0;
    //Instruction 2284
    //MUL
    t16_3.x = t16_16 * t16_16;
    //Instruction 2285
    //ADD
    t16_16 = (-t16_16) + 1.0;
    //Instruction 2286
    //MAD
    t16_16 = t16_16 * 0.968000 + 0.030000;
    //Instruction 2287
    //LOG
    t16_16 = log2(t16_16);
    //Instruction 2288
    //DIV
    t16_16 = 10.000000 / t16_16;
    //Instruction 2289
    //MAD
    t16_15 = t16_15 * _Glossiness + t16_3.x;
    //Instruction 2290
    //MUL
    t16_15 = t16_15 * unity_LightGammaCorrectionConsts.z;
    //Instruction 2291
    //MAD
    t16_2 = t16_15 * t16_2 + 0.000100;
    //Instruction 2292
    //MAD
    t16_15 = t16_16 * t16_16 + 1.0;
    //Instruction 2293
    //MUL
    t16_16 = t16_16 * t16_16;
    //Instruction 2294
    //DP3
    t16_3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2295
    //RSQ
    t16_3.x = inversesqrt(t16_3.x);
    //Instruction 2296
    //MUL
    t16_3.xyz = t16_3.xxx * vs_TEXCOORD4.xyz;
    //Instruction 2297
    //DP3
    t16_0.x = dot(t16_3.xyz, t16_0.xyz);
    //Instruction 2298
    //DP3
    t16_0.y = dot(t16_3.xyz, t16_1.xyz);
    //Instruction 2299
    //MAX
    t16_7.xy = max(t16_0.yx, vec2(0.0, 0.0));
    //Instruction 2300
    //LOG
    t16_0.x = log2(t16_7.y);
    //Instruction 2301
    //MUL
    t16_0.x = t16_0.x * t16_16;
    //Instruction 2302
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 2303
    //MUL
    t16_0.x = t16_0.x * t16_15;
    //Instruction 2304
    //DIV
    t16_2 = t16_0.x / t16_2;
    //Instruction 2305
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 2306
    //MAD
    t16_0.xyz = _Color.xyz * t10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2307
    //MUL
    t16_4.xyz = t10_4.xyz * _Color.xyz;
    //Instruction 2308
    //MAD
    t16_0.xyz = vec3(_Metallic) * t16_0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2309
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_2);
    //Instruction 2310
    //MAD
    t16_15 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2311
    //MAD
    t16_0.xyz = t16_4.xyz * vec3(t16_15) + t16_0.xyz;
    //Instruction 2312
    //SAMPLE
    t10_2 = texture(_LightTexture0, vs_TEXCOORD5.xy).w;
    //Instruction 2313
    //MUL
    t16_1.xyz = vec3(t10_2) * _LightColor0.xyz;
    //Instruction 2314
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 2315
    //MUL
    t16_0.xyz = t16_7.xxx * t16_0.xyz;
    //Instruction 2316
    //MOV
    t2.x = vs_TEXCOORD7;
    t2.x = clamp(t2.x, 0.0, 1.0);
    //Instruction 2317
    //MUL
    t2.xyz = t16_0.xyz * t2.xxx;
    //Instruction 2318
    //MOV
    SV_Target0.xyz = t2.xyz;
    //Instruction 2319
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2320
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "FOG_EXP2" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 2194
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2195
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2196
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2197
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2198
    //MOV
    gl_Position = t0;
    //Instruction 2199
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 2200
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 2201
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 2202
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2203
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2204
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2205
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2206
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2207
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2208
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2209
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2210
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2211
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 2212
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 2213
    //MOV
    t1.w = t0.x;
    //Instruction 2214
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 2215
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 2216
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 2217
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 2218
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2219
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 2220
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 2221
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2222
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2223
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2224
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2225
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2226
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2227
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 2228
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2229
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2230
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2231
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 2232
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 2233
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2234
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 2235
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 2236
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 2237
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 2238
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 2239
    //MOV
    t2.w = t0.z;
    //Instruction 2240
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 2241
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 2242
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 2243
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 2244
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 2245
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 2246
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 2247
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 2248
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 2249
    //DP4
    t0.x = dot(t16_0, t1);
    //Instruction 2250
    //MOV
    t16_2.x = _LightMatrix0[0].y;
    //Instruction 2251
    //MOV
    t16_2.y = _LightMatrix0[1].y;
    //Instruction 2252
    //MOV
    t16_2.z = _LightMatrix0[2].y;
    //Instruction 2253
    //MOV
    t16_2.w = _LightMatrix0[3].y;
    //Instruction 2254
    //DP4
    t0.y = dot(t16_2, t1);
    //Instruction 2255
    //MOV
    t16_2.x = _LightMatrix0[0].z;
    //Instruction 2256
    //MOV
    t16_2.y = _LightMatrix0[1].z;
    //Instruction 2257
    //MOV
    t16_2.z = _LightMatrix0[2].z;
    //Instruction 2258
    //MOV
    t16_2.w = _LightMatrix0[3].z;
    //Instruction 2259
    //DP4
    t0.z = dot(t16_2, t1);
    //Instruction 2260
    //MOV
    t16_2.x = _LightMatrix0[0].w;
    //Instruction 2261
    //MOV
    t16_2.y = _LightMatrix0[1].w;
    //Instruction 2262
    //MOV
    t16_2.z = _LightMatrix0[2].w;
    //Instruction 2263
    //MOV
    t16_2.w = _LightMatrix0[3].w;
    //Instruction 2264
    //DP4
    t0.w = dot(t16_2, t1);
    //Instruction 2265
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 2266
    //MUL
    t0 = t1.yyyy * unity_World2Shadow[0][1];
    //Instruction 2267
    //MAD
    t0 = unity_World2Shadow[0][0] * t1.xxxx + t0;
    //Instruction 2268
    //MAD
    t0 = unity_World2Shadow[0][2] * t1.zzzz + t0;
    //Instruction 2269
    //MAD
    t0 = unity_World2Shadow[0][3] * t1.wwww + t0;
    //Instruction 2270
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 2271
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump vec3 t16_1;
lowp float t10_1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
lowp vec3 t10_6;
mediump float t16_8;
bool tb8;
mediump float t16_10;
mediump float t16_15;
mediump float t16_21;
mediump float t16_24;
mediump float t16_25;
void main()
{
    //Instruction 2126
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    //Instruction 2127
    //ADD
    t16_0.xy = t16_0.xy + vec2(0.500000, 0.500000);
    //Instruction 2128
    //SAMPLE
    t10_1 = texture(_LightTexture0, t16_0.xy).w;
    //Instruction 2129
    //LT
    tb8 = 0.0<vs_TEXCOORD5.z;
    //Instruction 2130
    //MOVC
    t10_2 = (tb8) ? 1.0 : 0.0;
    //Instruction 2131
    //MUL
    t10_2 = t10_1 * t10_2;
    //Instruction 2132
    //DP3
    t16_0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 2133
    //SAMPLE
    t10_1 = texture(_LightTextureB0, t16_0.xx).w;
    //Instruction 2134
    //MUL
    t10_2 = t10_1 * t10_2;
    //Instruction 2135
    //DIV
    t16_1.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
    //Instruction 2136
    //SAMPLE_C_LZ
    vec3 txVec7 = vec3(t16_1.xy,t16_1.z);
    t10_1 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    //Instruction 2137
    //ADD
    t16_0.x = (-_LightShadowData.x) + 1.0;
    //Instruction 2138
    //MAD
    t16_0.x = t10_1 * t16_0.x + _LightShadowData.x;
    //Instruction 2139
    //MUL
    t10_2 = t16_0.x * t10_2;
    //Instruction 2140
    //MUL
    t16_0.xyz = vec3(t10_2) * _LightColor0.xyz;
    //Instruction 2141
    //DP3
    t16_21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 2142
    //RSQ
    t16_21 = inversesqrt(t16_21);
    //Instruction 2143
    //MOV
    t16_3.x = vs_TEXCOORD2.w;
    //Instruction 2144
    //MOV
    t16_3.y = vs_TEXCOORD3.w;
    //Instruction 2145
    //MOV
    t16_3.z = vs_TEXCOORD4.w;
    //Instruction 2146
    //DP3
    t16_24 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 2147
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 2148
    //MUL
    t16_3.xyz = vec3(t16_24) * t16_3.xyz;
    //Instruction 2149
    //MAD
    t16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_21) + t16_3.xyz;
    //Instruction 2150
    //DP3
    t16_21 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 2151
    //MAX
    t16_1.x = max(t16_21, 0.001000);
    //Instruction 2152
    //RSQ
    t16_21 = inversesqrt(t16_1.x);
    //Instruction 2153
    //MUL
    t16_4.xyz = vec3(t16_21) * t16_4.xyz;
    //Instruction 2154
    //DP3
    t16_21 = dot(t16_3.xyz, t16_4.xyz);
    //Instruction 2155
    //MAX
    t16_1.x = max(t16_21, 0.0);
    //Instruction 2156
    //MUL
    t16_21 = t16_1.x * t16_1.x;
    //Instruction 2157
    //ADD
    t16_24 = (-_Glossiness) + 1.0;
    //Instruction 2158
    //MUL
    t16_25 = t16_24 * t16_24;
    //Instruction 2159
    //ADD
    t16_24 = (-t16_24) + 1.0;
    //Instruction 2160
    //MAD
    t16_24 = t16_24 * 0.968000 + 0.030000;
    //Instruction 2161
    //LOG
    t16_24 = log2(t16_24);
    //Instruction 2162
    //DIV
    t16_24 = 10.000000 / t16_24;
    //Instruction 2163
    //MAD
    t16_21 = t16_21 * _Glossiness + t16_25;
    //Instruction 2164
    //MUL
    t16_21 = t16_21 * unity_LightGammaCorrectionConsts.z;
    //Instruction 2165
    //MAD
    t16_1.x = t16_21 * t16_1.x + 0.000100;
    //Instruction 2166
    //DP3
    t16_21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2167
    //RSQ
    t16_21 = inversesqrt(t16_21);
    //Instruction 2168
    //MUL
    t16_5.xyz = vec3(t16_21) * vs_TEXCOORD4.xyz;
    //Instruction 2169
    //DP3
    t16_21 = dot(t16_5.xyz, t16_4.xyz);
    //Instruction 2170
    //DP3
    t16_3.x = dot(t16_5.xyz, t16_3.xyz);
    //Instruction 2171
    //MAX
    t16_8 = max(t16_3.x, 0.0);
    //Instruction 2172
    //MAX
    t16_15 = max(t16_21, 0.0);
    //Instruction 2173
    //LOG
    t16_21 = log2(t16_15);
    //Instruction 2174
    //MUL
    t16_3.x = t16_24 * t16_24;
    //Instruction 2175
    //MAD
    t16_10 = t16_24 * t16_24 + 1.0;
    //Instruction 2176
    //MUL
    t16_21 = t16_21 * t16_3.x;
    //Instruction 2177
    //EXP
    t16_21 = exp2(t16_21);
    //Instruction 2178
    //MUL
    t16_21 = t16_21 * t16_10;
    //Instruction 2179
    //DIV
    t16_1.x = t16_21 / t16_1.x;
    //Instruction 2180
    //SAMPLE
    t10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 2181
    //MAD
    t16_3.xyz = _Color.xyz * t10_6.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2182
    //MUL
    t16_6.xyz = t10_6.xyz * _Color.xyz;
    //Instruction 2183
    //MAD
    t16_3.xyz = vec3(_Metallic) * t16_3.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2184
    //MUL
    t16_3.xyz = t16_1.xxx * t16_3.xyz;
    //Instruction 2185
    //MAD
    t16_21 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2186
    //MAD
    t16_3.xyz = t16_6.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 2187
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 2188
    //MUL
    t16_0.xyz = vec3(t16_8) * t16_0.xyz;
    //Instruction 2189
    //MOV
    t1.x = vs_TEXCOORD7;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 2190
    //MUL
    t1.xyz = t16_0.xyz * t1.xxx;
    //Instruction 2191
    //MOV
    SV_Target0.xyz = t1.xyz;
    //Instruction 2192
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2193
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 2447
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2448
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2449
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2450
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2451
    //MOV
    gl_Position = t0;
    //Instruction 2452
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 2453
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 2454
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 2455
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2456
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2457
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2458
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2459
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2460
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2461
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2462
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2463
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2464
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 2465
    //MUL
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 2466
    //MAD
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    //Instruction 2467
    //MAD
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    //Instruction 2468
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 2469
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 2470
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 2471
    //MAD
    t2.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 2472
    //ADD
    vs_TEXCOORD6.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 2473
    //MOV
    t1.w = t2.x;
    //Instruction 2474
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 2475
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2476
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2477
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2478
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2479
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2480
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2481
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 2482
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2483
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2484
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2485
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 2486
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 2487
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 2488
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 2489
    //MUL
    t16_4.xyz = t1.yzx * t0.zxy;
    //Instruction 2490
    //MAD
    t16_4.xyz = t0.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 2491
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 2492
    //MOV
    vs_TEXCOORD3.w = t2.y;
    //Instruction 2493
    //MOV
    t0.w = t2.z;
    //Instruction 2494
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 2495
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 2496
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 2497
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 2498
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 2499
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 2500
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 2501
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 2502
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 2503
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 2504
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 2505
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 2506
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 2507
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 2508
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 2509
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 2510
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 2511
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 2512
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 2513
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 2514
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
highp vec4 t1;
mediump vec3 t16_1;
highp vec3 t2;
mediump float t16_2;
lowp float t10_2;
bool tb2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_4;
mediump vec3 t16_5;
mediump vec2 t16_7;
mediump float t16_10;
highp float t12;
mediump float t16_15;
mediump float t16_16;
void main()
{
    //Instruction 2383
    //DP3
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 2384
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 2385
    //MOV
    t16_1.x = vs_TEXCOORD2.w;
    //Instruction 2386
    //MOV
    t16_1.y = vs_TEXCOORD3.w;
    //Instruction 2387
    //MOV
    t16_1.z = vs_TEXCOORD4.w;
    //Instruction 2388
    //DP3
    t16_5.x = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 2389
    //RSQ
    t16_5.x = inversesqrt(t16_5.x);
    //Instruction 2390
    //MUL
    t16_5.xyz = t16_5.xxx * t16_1.xyz;
    //Instruction 2391
    //MAD
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + t16_5.xyz;
    //Instruction 2392
    //DP3
    t16_0.x = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 2393
    //MAX
    t16_2 = max(t16_0.x, 0.001000);
    //Instruction 2394
    //RSQ
    t16_0.x = inversesqrt(t16_2);
    //Instruction 2395
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    //Instruction 2396
    //DP3
    t16_0.x = dot(t16_5.xyz, t16_1.xyz);
    //Instruction 2397
    //MAX
    t16_2 = max(t16_0.x, 0.0);
    //Instruction 2398
    //MUL
    t16_0.x = t16_2 * t16_2;
    //Instruction 2399
    //ADD
    t16_16 = (-_Glossiness) + 1.0;
    //Instruction 2400
    //MUL
    t16_3.x = t16_16 * t16_16;
    //Instruction 2401
    //ADD
    t16_16 = (-t16_16) + 1.0;
    //Instruction 2402
    //MAD
    t16_16 = t16_16 * 0.968000 + 0.030000;
    //Instruction 2403
    //LOG
    t16_16 = log2(t16_16);
    //Instruction 2404
    //DIV
    t16_16 = 10.000000 / t16_16;
    //Instruction 2405
    //MAD
    t16_0.x = t16_0.x * _Glossiness + t16_3.x;
    //Instruction 2406
    //MUL
    t16_0.x = t16_0.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 2407
    //MAD
    t16_2 = t16_0.x * t16_2 + 0.000100;
    //Instruction 2408
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2409
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 2410
    //MUL
    t16_3.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 2411
    //DP3
    t16_0.x = dot(t16_3.xyz, t16_1.xyz);
    //Instruction 2412
    //DP3
    t16_0.y = dot(t16_3.xyz, t16_5.xyz);
    //Instruction 2413
    //MAX
    t16_7.xy = max(t16_0.yx, vec2(0.0, 0.0));
    //Instruction 2414
    //LOG
    t16_0.x = log2(t16_7.y);
    //Instruction 2415
    //MUL
    t16_5.x = t16_16 * t16_16;
    //Instruction 2416
    //MAD
    t16_10 = t16_16 * t16_16 + 1.0;
    //Instruction 2417
    //MUL
    t16_0.x = t16_0.x * t16_5.x;
    //Instruction 2418
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 2419
    //MUL
    t16_0.x = t16_0.x * t16_10;
    //Instruction 2420
    //DIV
    t16_2 = t16_0.x / t16_2;
    //Instruction 2421
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 2422
    //MAD
    t16_0.xyz = _Color.xyz * t10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2423
    //MUL
    t16_4.xyz = t10_4.xyz * _Color.xyz;
    //Instruction 2424
    //MAD
    t16_0.xyz = vec3(_Metallic) * t16_0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2425
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_2);
    //Instruction 2426
    //MAD
    t16_15 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2427
    //MAD
    t16_0.xyz = t16_4.xyz * vec3(t16_15) + t16_0.xyz;
    //Instruction 2428
    //DP3
    t2.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    //Instruction 2429
    //SQRT
    t2.x = sqrt(t2.x);
    //Instruction 2430
    //MUL
    t2.x = t2.x * _LightPositionRange.w;
    //Instruction 2431
    //MUL
    t2.x = t2.x * 0.970000;
    //Instruction 2432
    //SAMPLE
    t1 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
    //Instruction 2433
    //DP4
    t12 = dot(t1, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 2434
    //LT
    tb2 = t12<t2.x;
    //Instruction 2435
    //MOVC
    t16_15 = (tb2) ? _LightShadowData.x : 1.0;
    //Instruction 2436
    //DP3
    t2.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 2437
    //SAMPLE
    t10_2 = texture(_LightTexture0, t2.xx).w;
    //Instruction 2438
    //MUL
    t16_2 = t16_15 * t10_2;
    //Instruction 2439
    //MUL
    t16_3.xyz = vec3(t16_2) * _LightColor0.xyz;
    //Instruction 2440
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 2441
    //MUL
    t16_0.xyz = t16_7.xxx * t16_0.xyz;
    //Instruction 2442
    //MOV
    t2.x = vs_TEXCOORD7;
    t2.x = clamp(t2.x, 0.0, 1.0);
    //Instruction 2443
    //MUL
    t2.xyz = t16_0.xyz * t2.xxx;
    //Instruction 2444
    //MOV
    SV_Target0.xyz = t2.xyz;
    //Instruction 2445
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2446
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 2582
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2583
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2584
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2585
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2586
    //MOV
    gl_Position = t0;
    //Instruction 2587
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 2588
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 2589
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 2590
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2591
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2592
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2593
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2594
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2595
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2596
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2597
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2598
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2599
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 2600
    //MUL
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 2601
    //MAD
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    //Instruction 2602
    //MAD
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    //Instruction 2603
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 2604
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 2605
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 2606
    //MAD
    t2.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 2607
    //ADD
    vs_TEXCOORD6.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 2608
    //MOV
    t1.w = t2.x;
    //Instruction 2609
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 2610
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2611
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2612
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2613
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2614
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2615
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2616
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 2617
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2618
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2619
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2620
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 2621
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 2622
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 2623
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 2624
    //MUL
    t16_4.xyz = t1.yzx * t0.zxy;
    //Instruction 2625
    //MAD
    t16_4.xyz = t0.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 2626
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 2627
    //MOV
    vs_TEXCOORD3.w = t2.y;
    //Instruction 2628
    //MOV
    t0.w = t2.z;
    //Instruction 2629
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 2630
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 2631
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 2632
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 2633
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 2634
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 2635
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 2636
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 2637
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 2638
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 2639
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 2640
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 2641
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 2642
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 2643
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 2644
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 2645
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 2646
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 2647
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 2648
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 2649
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp float t10_0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_1;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
highp float t6;
mediump float t16_6;
lowp float t10_6;
mediump float t16_9;
mediump float t16_12;
mediump float t16_20;
mediump float t16_21;
mediump float t16_22;
void main()
{
    //Instruction 2515
    //DP3
    t0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    //Instruction 2516
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 2517
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 2518
    //MUL
    t0.x = t0.x * 0.970000;
    //Instruction 2519
    //SAMPLE
    t1 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
    //Instruction 2520
    //DP4
    t6 = dot(t1, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 2521
    //LT
    tb0 = t6<t0.x;
    //Instruction 2522
    //MOVC
    t16_2.x = (tb0) ? _LightShadowData.x : 1.0;
    //Instruction 2523
    //DP3
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 2524
    //SAMPLE
    t10_0 = texture(_LightTextureB0, t0.xx).w;
    //Instruction 2525
    //SAMPLE
    t10_6 = texture(_LightTexture0, vs_TEXCOORD5.xyz).w;
    //Instruction 2526
    //MUL
    t16_0 = t10_6 * t10_0;
    //Instruction 2527
    //MUL
    t16_0 = t16_2.x * t16_0;
    //Instruction 2528
    //MUL
    t16_2.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 2529
    //DP3
    t16_20 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 2530
    //RSQ
    t16_20 = inversesqrt(t16_20);
    //Instruction 2531
    //MOV
    t16_3.x = vs_TEXCOORD2.w;
    //Instruction 2532
    //MOV
    t16_3.y = vs_TEXCOORD3.w;
    //Instruction 2533
    //MOV
    t16_3.z = vs_TEXCOORD4.w;
    //Instruction 2534
    //DP3
    t16_21 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 2535
    //RSQ
    t16_21 = inversesqrt(t16_21);
    //Instruction 2536
    //MUL
    t16_3.xyz = vec3(t16_21) * t16_3.xyz;
    //Instruction 2537
    //MAD
    t16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_20) + t16_3.xyz;
    //Instruction 2538
    //DP3
    t16_20 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 2539
    //MAX
    t16_0 = max(t16_20, 0.001000);
    //Instruction 2540
    //RSQ
    t16_20 = inversesqrt(t16_0);
    //Instruction 2541
    //MUL
    t16_4.xyz = vec3(t16_20) * t16_4.xyz;
    //Instruction 2542
    //DP3
    t16_20 = dot(t16_3.xyz, t16_4.xyz);
    //Instruction 2543
    //MAX
    t16_0 = max(t16_20, 0.0);
    //Instruction 2544
    //MUL
    t16_20 = t16_0 * t16_0;
    //Instruction 2545
    //ADD
    t16_21 = (-_Glossiness) + 1.0;
    //Instruction 2546
    //MUL
    t16_22 = t16_21 * t16_21;
    //Instruction 2547
    //ADD
    t16_21 = (-t16_21) + 1.0;
    //Instruction 2548
    //MAD
    t16_21 = t16_21 * 0.968000 + 0.030000;
    //Instruction 2549
    //LOG
    t16_21 = log2(t16_21);
    //Instruction 2550
    //DIV
    t16_21 = 10.000000 / t16_21;
    //Instruction 2551
    //MAD
    t16_20 = t16_20 * _Glossiness + t16_22;
    //Instruction 2552
    //MUL
    t16_20 = t16_20 * unity_LightGammaCorrectionConsts.z;
    //Instruction 2553
    //MAD
    t16_0 = t16_20 * t16_0 + 0.000100;
    //Instruction 2554
    //DP3
    t16_20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2555
    //RSQ
    t16_20 = inversesqrt(t16_20);
    //Instruction 2556
    //MUL
    t16_5.xyz = vec3(t16_20) * vs_TEXCOORD4.xyz;
    //Instruction 2557
    //DP3
    t16_20 = dot(t16_5.xyz, t16_4.xyz);
    //Instruction 2558
    //DP3
    t16_3.x = dot(t16_5.xyz, t16_3.xyz);
    //Instruction 2559
    //MAX
    t16_6 = max(t16_3.x, 0.0);
    //Instruction 2560
    //MAX
    t16_12 = max(t16_20, 0.0);
    //Instruction 2561
    //LOG
    t16_20 = log2(t16_12);
    //Instruction 2562
    //MUL
    t16_3.x = t16_21 * t16_21;
    //Instruction 2563
    //MAD
    t16_9 = t16_21 * t16_21 + 1.0;
    //Instruction 2564
    //MUL
    t16_20 = t16_20 * t16_3.x;
    //Instruction 2565
    //EXP
    t16_20 = exp2(t16_20);
    //Instruction 2566
    //MUL
    t16_20 = t16_20 * t16_9;
    //Instruction 2567
    //DIV
    t16_0 = t16_20 / t16_0;
    //Instruction 2568
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 2569
    //MAD
    t16_3.xyz = _Color.xyz * t10_1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2570
    //MUL
    t16_1.xyz = t10_1.xyz * _Color.xyz;
    //Instruction 2571
    //MAD
    t16_3.xyz = vec3(_Metallic) * t16_3.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2572
    //MUL
    t16_3.xyz = vec3(t16_0) * t16_3.xyz;
    //Instruction 2573
    //MAD
    t16_20 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2574
    //MAD
    t16_3.xyz = t16_1.xyz * vec3(t16_20) + t16_3.xyz;
    //Instruction 2575
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 2576
    //MUL
    t16_2.xyz = vec3(t16_6) * t16_2.xyz;
    //Instruction 2577
    //MOV
    t0.x = vs_TEXCOORD7;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 2578
    //MUL
    t0.xyz = t16_2.xyz * t0.xxx;
    //Instruction 2579
    //MOV
    SV_Target0.xyz = t0.xyz;
    //Instruction 2580
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2581
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "FOG_EXP2" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	vec4 _ShadowOffsets[4];
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 2348
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2349
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2350
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2351
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2352
    //MOV
    gl_Position = t0;
    //Instruction 2353
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 2354
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 2355
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 2356
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2357
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2358
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2359
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2360
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2361
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2362
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2363
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2364
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2365
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 2366
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 2367
    //MOV
    t1.w = t0.x;
    //Instruction 2368
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 2369
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 2370
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 2371
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 2372
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2373
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 2374
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 2375
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2376
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2377
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2378
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2379
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2380
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2381
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 2382
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2383
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2384
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2385
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 2386
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 2387
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2388
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 2389
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 2390
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 2391
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 2392
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 2393
    //MOV
    t2.w = t0.z;
    //Instruction 2394
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 2395
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 2396
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 2397
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 2398
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 2399
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 2400
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 2401
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 2402
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 2403
    //DP4
    t0.x = dot(t16_0, t1);
    //Instruction 2404
    //MOV
    t16_2.x = _LightMatrix0[0].y;
    //Instruction 2405
    //MOV
    t16_2.y = _LightMatrix0[1].y;
    //Instruction 2406
    //MOV
    t16_2.z = _LightMatrix0[2].y;
    //Instruction 2407
    //MOV
    t16_2.w = _LightMatrix0[3].y;
    //Instruction 2408
    //DP4
    t0.y = dot(t16_2, t1);
    //Instruction 2409
    //MOV
    t16_2.x = _LightMatrix0[0].z;
    //Instruction 2410
    //MOV
    t16_2.y = _LightMatrix0[1].z;
    //Instruction 2411
    //MOV
    t16_2.z = _LightMatrix0[2].z;
    //Instruction 2412
    //MOV
    t16_2.w = _LightMatrix0[3].z;
    //Instruction 2413
    //DP4
    t0.z = dot(t16_2, t1);
    //Instruction 2414
    //MOV
    t16_2.x = _LightMatrix0[0].w;
    //Instruction 2415
    //MOV
    t16_2.y = _LightMatrix0[1].w;
    //Instruction 2416
    //MOV
    t16_2.z = _LightMatrix0[2].w;
    //Instruction 2417
    //MOV
    t16_2.w = _LightMatrix0[3].w;
    //Instruction 2418
    //DP4
    t0.w = dot(t16_2, t1);
    //Instruction 2419
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 2420
    //MUL
    t0 = t1.yyyy * unity_World2Shadow[0][1];
    //Instruction 2421
    //MAD
    t0 = unity_World2Shadow[0][0] * t1.xxxx + t0;
    //Instruction 2422
    //MAD
    t0 = unity_World2Shadow[0][2] * t1.zzzz + t0;
    //Instruction 2423
    //MAD
    t0 = unity_World2Shadow[0][3] * t1.wwww + t0;
    //Instruction 2424
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 2425
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	vec4 _ShadowOffsets[4];
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec3 t16_1;
highp vec4 t2;
mediump vec3 t16_2;
lowp vec3 t10_2;
highp vec3 t3;
lowp float t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump float t16_9;
lowp float t10_9;
mediump float t16_13;
mediump float t16_17;
bool tb17;
mediump float t16_24;
mediump float t16_29;
mediump float t16_30;
void main()
{
    //Instruction 2272
    //ADD
    t16_0.x = (-_LightShadowData.x) + 1.0;
    //Instruction 2273
    //DIV
    t16_1.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
    //Instruction 2274
    //ADD
    t2.xyz = t16_1.xyz + _ShadowOffsets[0].xyz;
    //Instruction 2275
    //SAMPLE_C_LZ
    vec3 txVec8 = vec3(t2.xy,t2.z);
    t2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    //Instruction 2276
    //ADD
    t3.xyz = t16_1.xyz + _ShadowOffsets[1].xyz;
    //Instruction 2277
    //SAMPLE_C_LZ
    vec3 txVec9 = vec3(t3.xy,t3.z);
    t2.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec9, 0.0);
    //Instruction 2278
    //ADD
    t3.xyz = t16_1.xyz + _ShadowOffsets[2].xyz;
    //Instruction 2279
    //ADD
    t1.xyz = t16_1.xyz + _ShadowOffsets[3].xyz;
    //Instruction 2280
    //SAMPLE_C_LZ
    vec3 txVec10 = vec3(t1.xy,t1.z);
    t2.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec10, 0.0);
    //Instruction 2281
    //SAMPLE_C_LZ
    vec3 txVec11 = vec3(t3.xy,t3.z);
    t2.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec11, 0.0);
    //Instruction 2282
    //MAD
    t16_0 = t2 * t16_0.xxxx + _LightShadowData.xxxx;
    //Instruction 2283
    //DP4
    t16_1.x = dot(t16_0, vec4(0.250000, 0.250000, 0.250000, 0.250000));
    //Instruction 2284
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    //Instruction 2285
    //ADD
    t16_0.xy = t16_0.xy + vec2(0.500000, 0.500000);
    //Instruction 2286
    //SAMPLE
    t10_9 = texture(_LightTexture0, t16_0.xy).w;
    //Instruction 2287
    //LT
    tb17 = 0.0<vs_TEXCOORD5.z;
    //Instruction 2288
    //MOVC
    t10_4 = (tb17) ? 1.0 : 0.0;
    //Instruction 2289
    //MUL
    t10_4 = t10_9 * t10_4;
    //Instruction 2290
    //DP3
    t16_0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 2291
    //SAMPLE
    t10_9 = texture(_LightTextureB0, t16_0.xx).w;
    //Instruction 2292
    //MUL
    t10_4 = t10_9 * t10_4;
    //Instruction 2293
    //MUL
    t10_4 = t16_1.x * t10_4;
    //Instruction 2294
    //MUL
    t16_0.xyz = vec3(t10_4) * _LightColor0.xyz;
    //Instruction 2295
    //DP3
    t16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 2296
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 2297
    //MOV
    t16_5.x = vs_TEXCOORD2.w;
    //Instruction 2298
    //MOV
    t16_5.y = vs_TEXCOORD3.w;
    //Instruction 2299
    //MOV
    t16_5.z = vs_TEXCOORD4.w;
    //Instruction 2300
    //DP3
    t16_29 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 2301
    //RSQ
    t16_29 = inversesqrt(t16_29);
    //Instruction 2302
    //MUL
    t16_5.xyz = vec3(t16_29) * t16_5.xyz;
    //Instruction 2303
    //MAD
    t16_6.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_24) + t16_5.xyz;
    //Instruction 2304
    //DP3
    t16_24 = dot(t16_6.xyz, t16_6.xyz);
    //Instruction 2305
    //MAX
    t16_1.x = max(t16_24, 0.001000);
    //Instruction 2306
    //RSQ
    t16_24 = inversesqrt(t16_1.x);
    //Instruction 2307
    //MUL
    t16_6.xyz = vec3(t16_24) * t16_6.xyz;
    //Instruction 2308
    //DP3
    t16_24 = dot(t16_5.xyz, t16_6.xyz);
    //Instruction 2309
    //MAX
    t16_1.x = max(t16_24, 0.0);
    //Instruction 2310
    //MUL
    t16_24 = t16_1.x * t16_1.x;
    //Instruction 2311
    //ADD
    t16_29 = (-_Glossiness) + 1.0;
    //Instruction 2312
    //MUL
    t16_30 = t16_29 * t16_29;
    //Instruction 2313
    //ADD
    t16_29 = (-t16_29) + 1.0;
    //Instruction 2314
    //MAD
    t16_29 = t16_29 * 0.968000 + 0.030000;
    //Instruction 2315
    //LOG
    t16_29 = log2(t16_29);
    //Instruction 2316
    //DIV
    t16_29 = 10.000000 / t16_29;
    //Instruction 2317
    //MAD
    t16_24 = t16_24 * _Glossiness + t16_30;
    //Instruction 2318
    //MUL
    t16_24 = t16_24 * unity_LightGammaCorrectionConsts.z;
    //Instruction 2319
    //MAD
    t16_1.x = t16_24 * t16_1.x + 0.000100;
    //Instruction 2320
    //DP3
    t16_24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2321
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 2322
    //MUL
    t16_7.xyz = vec3(t16_24) * vs_TEXCOORD4.xyz;
    //Instruction 2323
    //DP3
    t16_24 = dot(t16_7.xyz, t16_6.xyz);
    //Instruction 2324
    //DP3
    t16_5.x = dot(t16_7.xyz, t16_5.xyz);
    //Instruction 2325
    //MAX
    t16_9 = max(t16_5.x, 0.0);
    //Instruction 2326
    //MAX
    t16_17 = max(t16_24, 0.0);
    //Instruction 2327
    //LOG
    t16_24 = log2(t16_17);
    //Instruction 2328
    //MUL
    t16_5.x = t16_29 * t16_29;
    //Instruction 2329
    //MAD
    t16_13 = t16_29 * t16_29 + 1.0;
    //Instruction 2330
    //MUL
    t16_24 = t16_24 * t16_5.x;
    //Instruction 2331
    //EXP
    t16_24 = exp2(t16_24);
    //Instruction 2332
    //MUL
    t16_24 = t16_24 * t16_13;
    //Instruction 2333
    //DIV
    t16_1.x = t16_24 / t16_1.x;
    //Instruction 2334
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 2335
    //MAD
    t16_5.xyz = _Color.xyz * t10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2336
    //MUL
    t16_2.xyz = t10_2.xyz * _Color.xyz;
    //Instruction 2337
    //MAD
    t16_5.xyz = vec3(_Metallic) * t16_5.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2338
    //MUL
    t16_5.xyz = t16_1.xxx * t16_5.xyz;
    //Instruction 2339
    //MAD
    t16_24 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2340
    //MAD
    t16_5.xyz = t16_2.xyz * vec3(t16_24) + t16_5.xyz;
    //Instruction 2341
    //MUL
    t16_0.xyz = t16_0.xyz * t16_5.xyz;
    //Instruction 2342
    //MUL
    t16_0.xyz = vec3(t16_9) * t16_0.xyz;
    //Instruction 2343
    //MOV
    t1.x = vs_TEXCOORD7;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 2344
    //MUL
    t1.xyz = t16_0.xyz * t1.xxx;
    //Instruction 2345
    //MOV
    SV_Target0.xyz = t1.xyz;
    //Instruction 2346
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2347
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 2726
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2727
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2728
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2729
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2730
    //MOV
    gl_Position = t0;
    //Instruction 2731
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 2732
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 2733
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 2734
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2735
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2736
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2737
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2738
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2739
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2740
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2741
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2742
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2743
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 2744
    //MUL
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 2745
    //MAD
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    //Instruction 2746
    //MAD
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    //Instruction 2747
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 2748
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 2749
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 2750
    //MAD
    t2.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 2751
    //ADD
    vs_TEXCOORD6.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 2752
    //MOV
    t1.w = t2.x;
    //Instruction 2753
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 2754
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2755
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2756
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2757
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2758
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2759
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2760
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 2761
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2762
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2763
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2764
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 2765
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 2766
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 2767
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 2768
    //MUL
    t16_4.xyz = t1.yzx * t0.zxy;
    //Instruction 2769
    //MAD
    t16_4.xyz = t0.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 2770
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 2771
    //MOV
    vs_TEXCOORD3.w = t2.y;
    //Instruction 2772
    //MOV
    t0.w = t2.z;
    //Instruction 2773
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 2774
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 2775
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 2776
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 2777
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 2778
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 2779
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 2780
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 2781
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 2782
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 2783
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 2784
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 2785
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 2786
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 2787
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 2788
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 2789
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 2790
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 2791
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 2792
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 2793
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp float t10_0;
bvec4 tb0;
highp vec4 t1;
mediump vec3 t16_1;
lowp vec3 t10_1;
highp vec4 t2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp vec3 t7;
mediump float t16_7;
mediump float t16_11;
mediump float t16_14;
mediump float t16_24;
mediump float t16_25;
mediump float t16_26;
void main()
{
    //Instruction 2650
    //DP3
    t0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    //Instruction 2651
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 2652
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 2653
    //MUL
    t0.x = t0.x * 0.970000;
    //Instruction 2654
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(0.007812, 0.007812, 0.007812);
    //Instruction 2655
    //SAMPLE
    t1 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 2656
    //DP4
    t1.x = dot(t1, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 2657
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(-0.007812, -0.007812, 0.007812);
    //Instruction 2658
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 2659
    //DP4
    t1.y = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 2660
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(-0.007812, 0.007812, -0.007812);
    //Instruction 2661
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 2662
    //DP4
    t1.z = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 2663
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(0.007812, -0.007812, -0.007812);
    //Instruction 2664
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 2665
    //DP4
    t1.w = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 2666
    //LT
    tb0 = lessThan(t1, t0.xxxx);
    //Instruction 2667
    //MOVC
    t0.x = (tb0.x) ? _LightShadowData.x : float(1.0);
    t0.y = (tb0.y) ? _LightShadowData.x : float(1.0);
    t0.z = (tb0.z) ? _LightShadowData.x : float(1.0);
    t0.w = (tb0.w) ? _LightShadowData.x : float(1.0);
    //Instruction 2668
    //DP4
    t16_3.x = dot(t0, vec4(0.250000, 0.250000, 0.250000, 0.250000));
    //Instruction 2669
    //DP3
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 2670
    //SAMPLE
    t10_0 = texture(_LightTexture0, t0.xx).w;
    //Instruction 2671
    //MUL
    t16_0 = t16_3.x * t10_0;
    //Instruction 2672
    //MUL
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 2673
    //DP3
    t16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 2674
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 2675
    //MOV
    t16_4.x = vs_TEXCOORD2.w;
    //Instruction 2676
    //MOV
    t16_4.y = vs_TEXCOORD3.w;
    //Instruction 2677
    //MOV
    t16_4.z = vs_TEXCOORD4.w;
    //Instruction 2678
    //DP3
    t16_25 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 2679
    //RSQ
    t16_25 = inversesqrt(t16_25);
    //Instruction 2680
    //MUL
    t16_4.xyz = vec3(t16_25) * t16_4.xyz;
    //Instruction 2681
    //MAD
    t16_5.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_24) + t16_4.xyz;
    //Instruction 2682
    //DP3
    t16_24 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 2683
    //MAX
    t16_0 = max(t16_24, 0.001000);
    //Instruction 2684
    //RSQ
    t16_24 = inversesqrt(t16_0);
    //Instruction 2685
    //MUL
    t16_5.xyz = vec3(t16_24) * t16_5.xyz;
    //Instruction 2686
    //DP3
    t16_24 = dot(t16_4.xyz, t16_5.xyz);
    //Instruction 2687
    //MAX
    t16_0 = max(t16_24, 0.0);
    //Instruction 2688
    //MUL
    t16_24 = t16_0 * t16_0;
    //Instruction 2689
    //ADD
    t16_25 = (-_Glossiness) + 1.0;
    //Instruction 2690
    //MUL
    t16_26 = t16_25 * t16_25;
    //Instruction 2691
    //ADD
    t16_25 = (-t16_25) + 1.0;
    //Instruction 2692
    //MAD
    t16_25 = t16_25 * 0.968000 + 0.030000;
    //Instruction 2693
    //LOG
    t16_25 = log2(t16_25);
    //Instruction 2694
    //DIV
    t16_25 = 10.000000 / t16_25;
    //Instruction 2695
    //MAD
    t16_24 = t16_24 * _Glossiness + t16_26;
    //Instruction 2696
    //MUL
    t16_24 = t16_24 * unity_LightGammaCorrectionConsts.z;
    //Instruction 2697
    //MAD
    t16_0 = t16_24 * t16_0 + 0.000100;
    //Instruction 2698
    //DP3
    t16_24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2699
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 2700
    //MUL
    t16_6.xyz = vec3(t16_24) * vs_TEXCOORD4.xyz;
    //Instruction 2701
    //DP3
    t16_24 = dot(t16_6.xyz, t16_5.xyz);
    //Instruction 2702
    //DP3
    t16_4.x = dot(t16_6.xyz, t16_4.xyz);
    //Instruction 2703
    //MAX
    t16_7 = max(t16_4.x, 0.0);
    //Instruction 2704
    //MAX
    t16_14 = max(t16_24, 0.0);
    //Instruction 2705
    //LOG
    t16_24 = log2(t16_14);
    //Instruction 2706
    //MUL
    t16_4.x = t16_25 * t16_25;
    //Instruction 2707
    //MAD
    t16_11 = t16_25 * t16_25 + 1.0;
    //Instruction 2708
    //MUL
    t16_24 = t16_24 * t16_4.x;
    //Instruction 2709
    //EXP
    t16_24 = exp2(t16_24);
    //Instruction 2710
    //MUL
    t16_24 = t16_24 * t16_11;
    //Instruction 2711
    //DIV
    t16_0 = t16_24 / t16_0;
    //Instruction 2712
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 2713
    //MAD
    t16_4.xyz = _Color.xyz * t10_1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2714
    //MUL
    t16_1.xyz = t10_1.xyz * _Color.xyz;
    //Instruction 2715
    //MAD
    t16_4.xyz = vec3(_Metallic) * t16_4.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2716
    //MUL
    t16_4.xyz = vec3(t16_0) * t16_4.xyz;
    //Instruction 2717
    //MAD
    t16_24 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2718
    //MAD
    t16_4.xyz = t16_1.xyz * vec3(t16_24) + t16_4.xyz;
    //Instruction 2719
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 2720
    //MUL
    t16_3.xyz = vec3(t16_7) * t16_3.xyz;
    //Instruction 2721
    //MOV
    t0.x = vs_TEXCOORD7;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 2722
    //MUL
    t0.xyz = t16_3.xyz * t0.xxx;
    //Instruction 2723
    //MOV
    SV_Target0.xyz = t0.xyz;
    //Instruction 2724
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2725
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 2504
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2505
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2506
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2507
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2508
    //MOV
    gl_Position = t0;
    //Instruction 2509
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 2510
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 2511
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 2512
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2513
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2514
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2515
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2516
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2517
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2518
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2519
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2520
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2521
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 2522
    //MUL
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 2523
    //MAD
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    //Instruction 2524
    //MAD
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    //Instruction 2525
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 2526
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 2527
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 2528
    //MAD
    t2.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 2529
    //ADD
    vs_TEXCOORD6.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 2530
    //MOV
    t1.w = t2.x;
    //Instruction 2531
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 2532
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2533
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2534
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2535
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2536
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2537
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2538
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 2539
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2540
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2541
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2542
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 2543
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 2544
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 2545
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 2546
    //MUL
    t16_4.xyz = t1.yzx * t0.zxy;
    //Instruction 2547
    //MAD
    t16_4.xyz = t0.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 2548
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 2549
    //MOV
    vs_TEXCOORD3.w = t2.y;
    //Instruction 2550
    //MOV
    t0.w = t2.z;
    //Instruction 2551
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 2552
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 2553
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 2554
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 2555
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 2556
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 2557
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 2558
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 2559
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 2560
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 2561
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 2562
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 2563
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 2564
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 2565
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 2566
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 2567
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 2568
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 2569
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 2570
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 2571
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp float t10_0;
bvec4 tb0;
highp vec4 t1;
mediump vec3 t16_1;
lowp vec3 t10_1;
highp vec4 t2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp vec3 t7;
mediump float t16_7;
lowp float t10_7;
mediump float t16_11;
mediump float t16_14;
mediump float t16_24;
mediump float t16_25;
mediump float t16_26;
void main()
{
    //Instruction 2426
    //DP3
    t0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    //Instruction 2427
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 2428
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 2429
    //MUL
    t0.x = t0.x * 0.970000;
    //Instruction 2430
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(0.007812, 0.007812, 0.007812);
    //Instruction 2431
    //SAMPLE
    t1 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 2432
    //DP4
    t1.x = dot(t1, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 2433
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(-0.007812, -0.007812, 0.007812);
    //Instruction 2434
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 2435
    //DP4
    t1.y = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 2436
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(-0.007812, 0.007812, -0.007812);
    //Instruction 2437
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 2438
    //DP4
    t1.z = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 2439
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(0.007812, -0.007812, -0.007812);
    //Instruction 2440
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 2441
    //DP4
    t1.w = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 2442
    //LT
    tb0 = lessThan(t1, t0.xxxx);
    //Instruction 2443
    //MOVC
    t0.x = (tb0.x) ? _LightShadowData.x : float(1.0);
    t0.y = (tb0.y) ? _LightShadowData.x : float(1.0);
    t0.z = (tb0.z) ? _LightShadowData.x : float(1.0);
    t0.w = (tb0.w) ? _LightShadowData.x : float(1.0);
    //Instruction 2444
    //DP4
    t16_3.x = dot(t0, vec4(0.250000, 0.250000, 0.250000, 0.250000));
    //Instruction 2445
    //DP3
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 2446
    //SAMPLE
    t10_0 = texture(_LightTextureB0, t0.xx).w;
    //Instruction 2447
    //SAMPLE
    t10_7 = texture(_LightTexture0, vs_TEXCOORD5.xyz).w;
    //Instruction 2448
    //MUL
    t16_0 = t10_7 * t10_0;
    //Instruction 2449
    //MUL
    t16_0 = t16_3.x * t16_0;
    //Instruction 2450
    //MUL
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 2451
    //DP3
    t16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 2452
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 2453
    //MOV
    t16_4.x = vs_TEXCOORD2.w;
    //Instruction 2454
    //MOV
    t16_4.y = vs_TEXCOORD3.w;
    //Instruction 2455
    //MOV
    t16_4.z = vs_TEXCOORD4.w;
    //Instruction 2456
    //DP3
    t16_25 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 2457
    //RSQ
    t16_25 = inversesqrt(t16_25);
    //Instruction 2458
    //MUL
    t16_4.xyz = vec3(t16_25) * t16_4.xyz;
    //Instruction 2459
    //MAD
    t16_5.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_24) + t16_4.xyz;
    //Instruction 2460
    //DP3
    t16_24 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 2461
    //MAX
    t16_0 = max(t16_24, 0.001000);
    //Instruction 2462
    //RSQ
    t16_24 = inversesqrt(t16_0);
    //Instruction 2463
    //MUL
    t16_5.xyz = vec3(t16_24) * t16_5.xyz;
    //Instruction 2464
    //DP3
    t16_24 = dot(t16_4.xyz, t16_5.xyz);
    //Instruction 2465
    //MAX
    t16_0 = max(t16_24, 0.0);
    //Instruction 2466
    //MUL
    t16_24 = t16_0 * t16_0;
    //Instruction 2467
    //ADD
    t16_25 = (-_Glossiness) + 1.0;
    //Instruction 2468
    //MUL
    t16_26 = t16_25 * t16_25;
    //Instruction 2469
    //ADD
    t16_25 = (-t16_25) + 1.0;
    //Instruction 2470
    //MAD
    t16_25 = t16_25 * 0.968000 + 0.030000;
    //Instruction 2471
    //LOG
    t16_25 = log2(t16_25);
    //Instruction 2472
    //DIV
    t16_25 = 10.000000 / t16_25;
    //Instruction 2473
    //MAD
    t16_24 = t16_24 * _Glossiness + t16_26;
    //Instruction 2474
    //MUL
    t16_24 = t16_24 * unity_LightGammaCorrectionConsts.z;
    //Instruction 2475
    //MAD
    t16_0 = t16_24 * t16_0 + 0.000100;
    //Instruction 2476
    //DP3
    t16_24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2477
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 2478
    //MUL
    t16_6.xyz = vec3(t16_24) * vs_TEXCOORD4.xyz;
    //Instruction 2479
    //DP3
    t16_24 = dot(t16_6.xyz, t16_5.xyz);
    //Instruction 2480
    //DP3
    t16_4.x = dot(t16_6.xyz, t16_4.xyz);
    //Instruction 2481
    //MAX
    t16_7 = max(t16_4.x, 0.0);
    //Instruction 2482
    //MAX
    t16_14 = max(t16_24, 0.0);
    //Instruction 2483
    //LOG
    t16_24 = log2(t16_14);
    //Instruction 2484
    //MUL
    t16_4.x = t16_25 * t16_25;
    //Instruction 2485
    //MAD
    t16_11 = t16_25 * t16_25 + 1.0;
    //Instruction 2486
    //MUL
    t16_24 = t16_24 * t16_4.x;
    //Instruction 2487
    //EXP
    t16_24 = exp2(t16_24);
    //Instruction 2488
    //MUL
    t16_24 = t16_24 * t16_11;
    //Instruction 2489
    //DIV
    t16_0 = t16_24 / t16_0;
    //Instruction 2490
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 2491
    //MAD
    t16_4.xyz = _Color.xyz * t10_1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2492
    //MUL
    t16_1.xyz = t10_1.xyz * _Color.xyz;
    //Instruction 2493
    //MAD
    t16_4.xyz = vec3(_Metallic) * t16_4.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2494
    //MUL
    t16_4.xyz = vec3(t16_0) * t16_4.xyz;
    //Instruction 2495
    //MAD
    t16_24 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2496
    //MAD
    t16_4.xyz = t16_1.xyz * vec3(t16_24) + t16_4.xyz;
    //Instruction 2497
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 2498
    //MUL
    t16_3.xyz = vec3(t16_7) * t16_3.xyz;
    //Instruction 2499
    //MOV
    t0.x = vs_TEXCOORD7;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 2500
    //MUL
    t0.xyz = t16_3.xyz * t0.xxx;
    //Instruction 2501
    //MOV
    SV_Target0.xyz = t0.xyz;
    //Instruction 2502
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2503
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "FOG_EXP2" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 2847
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2848
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2849
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2850
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2851
    //MOV
    gl_Position = t0;
    //Instruction 2852
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 2853
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 2854
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 2855
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2856
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2857
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2858
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2859
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2860
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2861
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2862
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2863
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2864
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 2865
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 2866
    //MOV
    t1.w = t0.x;
    //Instruction 2867
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 2868
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 2869
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 2870
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 2871
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2872
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 2873
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 2874
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2875
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2876
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2877
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2878
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2879
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2880
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 2881
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2882
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2883
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2884
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 2885
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 2886
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2887
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 2888
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 2889
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 2890
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 2891
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 2892
    //MOV
    t2.w = t0.z;
    //Instruction 2893
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 2894
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 2895
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 2896
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 2897
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 2898
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 2899
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 2900
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 2901
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 2902
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 2903
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
highp vec3 t2;
mediump float t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_4;
mediump vec2 t16_7;
mediump float t16_15;
mediump float t16_16;
void main()
{
    //Instruction 2794
    //DP3
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 2795
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 2796
    //MOV
    t16_1.x = vs_TEXCOORD2.w;
    //Instruction 2797
    //MOV
    t16_1.y = vs_TEXCOORD3.w;
    //Instruction 2798
    //MOV
    t16_1.z = vs_TEXCOORD4.w;
    //Instruction 2799
    //MAD
    t16_0.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + t16_1.xyz;
    //Instruction 2800
    //DP3
    t16_15 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 2801
    //MAX
    t16_2 = max(t16_15, 0.001000);
    //Instruction 2802
    //RSQ
    t16_15 = inversesqrt(t16_2);
    //Instruction 2803
    //MUL
    t16_0.xyz = vec3(t16_15) * t16_0.xyz;
    //Instruction 2804
    //DP3
    t16_15 = dot(t16_1.xyz, t16_0.xyz);
    //Instruction 2805
    //MAX
    t16_2 = max(t16_15, 0.0);
    //Instruction 2806
    //MUL
    t16_15 = t16_2 * t16_2;
    //Instruction 2807
    //ADD
    t16_16 = (-_Glossiness) + 1.0;
    //Instruction 2808
    //MUL
    t16_3.x = t16_16 * t16_16;
    //Instruction 2809
    //ADD
    t16_16 = (-t16_16) + 1.0;
    //Instruction 2810
    //MAD
    t16_16 = t16_16 * 0.968000 + 0.030000;
    //Instruction 2811
    //LOG
    t16_16 = log2(t16_16);
    //Instruction 2812
    //DIV
    t16_16 = 10.000000 / t16_16;
    //Instruction 2813
    //MAD
    t16_15 = t16_15 * _Glossiness + t16_3.x;
    //Instruction 2814
    //MUL
    t16_15 = t16_15 * unity_LightGammaCorrectionConsts.z;
    //Instruction 2815
    //MAD
    t16_2 = t16_15 * t16_2 + 0.000100;
    //Instruction 2816
    //MAD
    t16_15 = t16_16 * t16_16 + 1.0;
    //Instruction 2817
    //MUL
    t16_16 = t16_16 * t16_16;
    //Instruction 2818
    //DP3
    t16_3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2819
    //RSQ
    t16_3.x = inversesqrt(t16_3.x);
    //Instruction 2820
    //MUL
    t16_3.xyz = t16_3.xxx * vs_TEXCOORD4.xyz;
    //Instruction 2821
    //DP3
    t16_0.x = dot(t16_3.xyz, t16_0.xyz);
    //Instruction 2822
    //DP3
    t16_0.y = dot(t16_3.xyz, t16_1.xyz);
    //Instruction 2823
    //MAX
    t16_7.xy = max(t16_0.yx, vec2(0.0, 0.0));
    //Instruction 2824
    //LOG
    t16_0.x = log2(t16_7.y);
    //Instruction 2825
    //MUL
    t16_0.x = t16_0.x * t16_16;
    //Instruction 2826
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 2827
    //MUL
    t16_0.x = t16_0.x * t16_15;
    //Instruction 2828
    //DIV
    t16_2 = t16_0.x / t16_2;
    //Instruction 2829
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 2830
    //MAD
    t16_0.xyz = _Color.xyz * t10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2831
    //MUL
    t16_4.xyz = t10_4.xyz * _Color.xyz;
    //Instruction 2832
    //MAD
    t16_0.xyz = vec3(_Metallic) * t16_0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2833
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_2);
    //Instruction 2834
    //MAD
    t16_15 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2835
    //MAD
    t16_0.xyz = t16_4.xyz * vec3(t16_15) + t16_0.xyz;
    //Instruction 2836
    //SAMPLE_C_LZ
    vec3 txVec8 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    //Instruction 2837
    //ADD
    t16_1.x = (-_LightShadowData.x) + 1.0;
    //Instruction 2838
    //MAD
    t16_15 = t16_15 * t16_1.x + _LightShadowData.x;
    //Instruction 2839
    //MUL
    t16_1.xyz = vec3(t16_15) * _LightColor0.xyz;
    //Instruction 2840
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 2841
    //MUL
    t16_0.xyz = t16_7.xxx * t16_0.xyz;
    //Instruction 2842
    //MOV
    t2.x = vs_TEXCOORD7;
    t2.x = clamp(t2.x, 0.0, 1.0);
    //Instruction 2843
    //MUL
    t2.xyz = t16_0.xyz * t2.xxx;
    //Instruction 2844
    //MOV
    SV_Target0.xyz = t2.xyz;
    //Instruction 2845
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2846
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "FOG_EXP2" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec2 vs_TEXCOORD5;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 2627
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2628
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2629
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2630
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2631
    //MOV
    gl_Position = t0;
    //Instruction 2632
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 2633
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 2634
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 2635
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2636
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2637
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2638
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2639
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2640
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2641
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2642
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2643
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2644
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 2645
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 2646
    //MOV
    t1.w = t0.x;
    //Instruction 2647
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 2648
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 2649
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 2650
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 2651
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2652
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 2653
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 2654
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2655
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2656
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2657
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2658
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2659
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2660
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 2661
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2662
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2663
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2664
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 2665
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 2666
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2667
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 2668
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 2669
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 2670
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 2671
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 2672
    //MOV
    t2.w = t0.z;
    //Instruction 2673
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 2674
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 2675
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 2676
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 2677
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 2678
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 2679
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 2680
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 2681
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 2682
    //DP4
    t2.x = dot(t16_0, t1);
    //Instruction 2683
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 2684
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 2685
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 2686
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 2687
    //DP4
    t2.y = dot(t16_0, t1);
    //Instruction 2688
    //MOV
    vs_TEXCOORD5.xy = t2.xy;
    //Instruction 2689
    //MUL
    t0 = t1.yyyy * unity_World2Shadow[0][1];
    //Instruction 2690
    //MAD
    t0 = unity_World2Shadow[0][0] * t1.xxxx + t0;
    //Instruction 2691
    //MAD
    t0 = unity_World2Shadow[0][2] * t1.zzzz + t0;
    //Instruction 2692
    //MAD
    t0 = unity_World2Shadow[0][3] * t1.wwww + t0;
    //Instruction 2693
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 2694
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec2 vs_TEXCOORD5;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
highp vec3 t2;
mediump float t16_2;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_4;
mediump vec2 t16_7;
mediump float t16_15;
mediump float t16_16;
void main()
{
    //Instruction 2572
    //DP3
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 2573
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 2574
    //MOV
    t16_1.x = vs_TEXCOORD2.w;
    //Instruction 2575
    //MOV
    t16_1.y = vs_TEXCOORD3.w;
    //Instruction 2576
    //MOV
    t16_1.z = vs_TEXCOORD4.w;
    //Instruction 2577
    //MAD
    t16_0.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + t16_1.xyz;
    //Instruction 2578
    //DP3
    t16_15 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 2579
    //MAX
    t16_2 = max(t16_15, 0.001000);
    //Instruction 2580
    //RSQ
    t16_15 = inversesqrt(t16_2);
    //Instruction 2581
    //MUL
    t16_0.xyz = vec3(t16_15) * t16_0.xyz;
    //Instruction 2582
    //DP3
    t16_15 = dot(t16_1.xyz, t16_0.xyz);
    //Instruction 2583
    //MAX
    t16_2 = max(t16_15, 0.0);
    //Instruction 2584
    //MUL
    t16_15 = t16_2 * t16_2;
    //Instruction 2585
    //ADD
    t16_16 = (-_Glossiness) + 1.0;
    //Instruction 2586
    //MUL
    t16_3.x = t16_16 * t16_16;
    //Instruction 2587
    //ADD
    t16_16 = (-t16_16) + 1.0;
    //Instruction 2588
    //MAD
    t16_16 = t16_16 * 0.968000 + 0.030000;
    //Instruction 2589
    //LOG
    t16_16 = log2(t16_16);
    //Instruction 2590
    //DIV
    t16_16 = 10.000000 / t16_16;
    //Instruction 2591
    //MAD
    t16_15 = t16_15 * _Glossiness + t16_3.x;
    //Instruction 2592
    //MUL
    t16_15 = t16_15 * unity_LightGammaCorrectionConsts.z;
    //Instruction 2593
    //MAD
    t16_2 = t16_15 * t16_2 + 0.000100;
    //Instruction 2594
    //MAD
    t16_15 = t16_16 * t16_16 + 1.0;
    //Instruction 2595
    //MUL
    t16_16 = t16_16 * t16_16;
    //Instruction 2596
    //DP3
    t16_3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2597
    //RSQ
    t16_3.x = inversesqrt(t16_3.x);
    //Instruction 2598
    //MUL
    t16_3.xyz = t16_3.xxx * vs_TEXCOORD4.xyz;
    //Instruction 2599
    //DP3
    t16_0.x = dot(t16_3.xyz, t16_0.xyz);
    //Instruction 2600
    //DP3
    t16_0.y = dot(t16_3.xyz, t16_1.xyz);
    //Instruction 2601
    //MAX
    t16_7.xy = max(t16_0.yx, vec2(0.0, 0.0));
    //Instruction 2602
    //LOG
    t16_0.x = log2(t16_7.y);
    //Instruction 2603
    //MUL
    t16_0.x = t16_0.x * t16_16;
    //Instruction 2604
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 2605
    //MUL
    t16_0.x = t16_0.x * t16_15;
    //Instruction 2606
    //DIV
    t16_2 = t16_0.x / t16_2;
    //Instruction 2607
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 2608
    //MAD
    t16_0.xyz = _Color.xyz * t10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2609
    //MUL
    t16_4.xyz = t10_4.xyz * _Color.xyz;
    //Instruction 2610
    //MAD
    t16_0.xyz = vec3(_Metallic) * t16_0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2611
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_2);
    //Instruction 2612
    //MAD
    t16_15 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2613
    //MAD
    t16_0.xyz = t16_4.xyz * vec3(t16_15) + t16_0.xyz;
    //Instruction 2614
    //SAMPLE_C_LZ
    vec3 txVec12 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec12, 0.0);
    //Instruction 2615
    //ADD
    t16_1.x = (-_LightShadowData.x) + 1.0;
    //Instruction 2616
    //MAD
    t16_15 = t16_15 * t16_1.x + _LightShadowData.x;
    //Instruction 2617
    //SAMPLE
    t10_2 = texture(_LightTexture0, vs_TEXCOORD5.xy).w;
    //Instruction 2618
    //MUL
    t16_2 = t16_15 * t10_2;
    //Instruction 2619
    //MUL
    t16_1.xyz = vec3(t16_2) * _LightColor0.xyz;
    //Instruction 2620
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 2621
    //MUL
    t16_0.xyz = t16_7.xxx * t16_0.xyz;
    //Instruction 2622
    //MOV
    t2.x = vs_TEXCOORD7;
    t2.x = clamp(t2.x, 0.0, 1.0);
    //Instruction 2623
    //MUL
    t2.xyz = t16_0.xyz * t2.xxx;
    //Instruction 2624
    //MOV
    SV_Target0.xyz = t2.xyz;
    //Instruction 2625
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2626
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 2959
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2960
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2961
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2962
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2963
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2964
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2965
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2966
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2967
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2968
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2969
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2970
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2971
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2972
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 2973
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 2974
    //MOV
    t1.w = t0.x;
    //Instruction 2975
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 2976
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 2977
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 2978
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 2979
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2980
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 2981
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 2982
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2983
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2984
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2985
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2986
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2987
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2988
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 2989
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2990
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2991
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2992
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 2993
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 2994
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2995
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 2996
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 2997
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 2998
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 2999
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 3000
    //MOV
    t2.w = t0.z;
    //Instruction 3001
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 3002
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 3003
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 3004
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 3005
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 3006
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 3007
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 3008
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 3009
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 3010
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 3011
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 3012
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 3013
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 3014
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 3015
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 3016
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 3017
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 3018
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 3019
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 3020
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 3021
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
highp float t0;
mediump vec3 t16_0;
lowp vec3 t10_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_4;
mediump vec3 t16_6;
mediump float t16_11;
mediump float t16_16;
mediump float t16_17;
void main()
{
    //Instruction 2904
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 2905
    //MAD
    t16_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 2906
    //MUL
    t16_2.xyz = t16_1.yyy * vs_TEXCOORD3.xyz;
    //Instruction 2907
    //MAD
    t16_1.xyw = t16_1.xxx * vs_TEXCOORD2.xyz + t16_2.xyz;
    //Instruction 2908
    //MAD
    t16_1.xyz = t16_1.zzz * vs_TEXCOORD4.xyz + t16_1.xyw;
    //Instruction 2909
    //DP3
    t16_16 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 2910
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 2911
    //MUL
    t16_1.xyz = vec3(t16_16) * t16_1.xyz;
    //Instruction 2912
    //DP3
    t16_16 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 2913
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 2914
    //MOV
    t16_2.x = vs_TEXCOORD2.w;
    //Instruction 2915
    //MOV
    t16_2.y = vs_TEXCOORD3.w;
    //Instruction 2916
    //MOV
    t16_2.z = vs_TEXCOORD4.w;
    //Instruction 2917
    //DP3
    t16_17 = dot(t16_2.xyz, t16_2.xyz);
    //Instruction 2918
    //RSQ
    t16_17 = inversesqrt(t16_17);
    //Instruction 2919
    //MUL
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    //Instruction 2920
    //MAD
    t16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_16) + t16_2.xyz;
    //Instruction 2921
    //DP3
    t16_16 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 2922
    //MAX
    t16_0.x = max(t16_16, 0.001000);
    //Instruction 2923
    //RSQ
    t16_16 = inversesqrt(t16_0.x);
    //Instruction 2924
    //MUL
    t16_3.xyz = vec3(t16_16) * t16_3.xyz;
    //Instruction 2925
    //DP3
    t16_1.w = dot(t16_1.xyz, t16_3.xyz);
    //Instruction 2926
    //DP3
    t16_1.x = dot(t16_1.xyz, t16_2.xyz);
    //Instruction 2927
    //DP3
    t16_1.y = dot(t16_2.xyz, t16_3.xyz);
    //Instruction 2928
    //MAX
    t16_0.xyz = max(t16_1.yxw, vec3(0.0, 0.0, 0.0));
    //Instruction 2929
    //LOG
    t16_1.x = log2(t16_0.z);
    //Instruction 2930
    //ADD
    t16_6.x = (-_Glossiness) + 1.0;
    //Instruction 2931
    //ADD
    t16_11 = (-t16_6.x) + 1.0;
    //Instruction 2932
    //MAD
    t16_11 = t16_11 * 0.968000 + 0.030000;
    //Instruction 2933
    //LOG
    t16_11 = log2(t16_11);
    //Instruction 2934
    //DIV
    t16_6.y = 10.000000 / t16_11;
    //Instruction 2935
    //MUL
    t16_6.xz = t16_6.xy * t16_6.xy;
    //Instruction 2936
    //MAD
    t16_11 = t16_6.y * t16_6.y + 1.0;
    //Instruction 2937
    //MUL
    t16_1.x = t16_1.x * t16_6.z;
    //Instruction 2938
    //EXP
    t16_1.x = exp2(t16_1.x);
    //Instruction 2939
    //MUL
    t16_1.x = t16_1.x * t16_11;
    //Instruction 2940
    //MUL
    t16_11 = t16_0.x * t16_0.x;
    //Instruction 2941
    //MAD
    t16_6.x = t16_11 * _Glossiness + t16_6.x;
    //Instruction 2942
    //MUL
    t16_6.x = t16_6.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 2943
    //MAD
    t16_0.x = t16_6.x * t16_0.x + 0.000100;
    //Instruction 2944
    //DIV
    t16_0.x = t16_1.x / t16_0.x;
    //Instruction 2945
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 2946
    //MAD
    t16_1.xyz = _Color.xyz * t10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2947
    //MUL
    t16_4.xyz = t10_4.xyz * _Color.xyz;
    //Instruction 2948
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2949
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    //Instruction 2950
    //MAD
    t16_16 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2951
    //MAD
    t16_1.xyz = t16_4.xyz * vec3(t16_16) + t16_1.xyz;
    //Instruction 2952
    //DP3
    t0 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 2953
    //SAMPLE
    t10_0.x = texture(_LightTexture0, vec2(t0)).w;
    //Instruction 2954
    //MUL
    t16_2.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 2955
    //MUL
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 2956
    //MUL
    SV_Target0.xyz = t16_0.yyy * t16_1.xyz;
    //Instruction 2957
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2958
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 2744
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2745
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2746
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2747
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2748
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2749
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2750
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2751
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2752
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2753
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2754
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2755
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2756
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2757
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 2758
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 2759
    //MOV
    t1.w = t0.x;
    //Instruction 2760
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 2761
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 2762
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 2763
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 2764
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2765
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 2766
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 2767
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2768
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2769
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2770
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2771
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2772
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2773
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 2774
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2775
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2776
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2777
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 2778
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 2779
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2780
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 2781
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 2782
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 2783
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 2784
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 2785
    //MOV
    t2.w = t0.z;
    //Instruction 2786
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 2787
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec3 t10_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_4;
mediump vec3 t16_6;
mediump float t16_11;
mediump float t16_16;
void main()
{
    //Instruction 2695
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 2696
    //MAD
    t16_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 2697
    //MUL
    t16_2.xyz = t16_1.yyy * vs_TEXCOORD3.xyz;
    //Instruction 2698
    //MAD
    t16_1.xyw = t16_1.xxx * vs_TEXCOORD2.xyz + t16_2.xyz;
    //Instruction 2699
    //MAD
    t16_1.xyz = t16_1.zzz * vs_TEXCOORD4.xyz + t16_1.xyw;
    //Instruction 2700
    //DP3
    t16_16 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 2701
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 2702
    //MUL
    t16_1.xyz = vec3(t16_16) * t16_1.xyz;
    //Instruction 2703
    //DP3
    t16_16 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 2704
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 2705
    //MOV
    t16_2.x = vs_TEXCOORD2.w;
    //Instruction 2706
    //MOV
    t16_2.y = vs_TEXCOORD3.w;
    //Instruction 2707
    //MOV
    t16_2.z = vs_TEXCOORD4.w;
    //Instruction 2708
    //MAD
    t16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_16) + t16_2.xyz;
    //Instruction 2709
    //DP3
    t16_16 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 2710
    //MAX
    t16_0.x = max(t16_16, 0.001000);
    //Instruction 2711
    //RSQ
    t16_16 = inversesqrt(t16_0.x);
    //Instruction 2712
    //MUL
    t16_3.xyz = vec3(t16_16) * t16_3.xyz;
    //Instruction 2713
    //DP3
    t16_1.w = dot(t16_1.xyz, t16_3.xyz);
    //Instruction 2714
    //DP3
    t16_1.x = dot(t16_1.xyz, t16_2.xyz);
    //Instruction 2715
    //DP3
    t16_1.y = dot(t16_2.xyz, t16_3.xyz);
    //Instruction 2716
    //MAX
    t16_0.xyz = max(t16_1.yxw, vec3(0.0, 0.0, 0.0));
    //Instruction 2717
    //LOG
    t16_1.x = log2(t16_0.z);
    //Instruction 2718
    //ADD
    t16_6.x = (-_Glossiness) + 1.0;
    //Instruction 2719
    //ADD
    t16_11 = (-t16_6.x) + 1.0;
    //Instruction 2720
    //MAD
    t16_11 = t16_11 * 0.968000 + 0.030000;
    //Instruction 2721
    //LOG
    t16_11 = log2(t16_11);
    //Instruction 2722
    //DIV
    t16_6.y = 10.000000 / t16_11;
    //Instruction 2723
    //MUL
    t16_6.xz = t16_6.xy * t16_6.xy;
    //Instruction 2724
    //MAD
    t16_11 = t16_6.y * t16_6.y + 1.0;
    //Instruction 2725
    //MUL
    t16_1.x = t16_1.x * t16_6.z;
    //Instruction 2726
    //EXP
    t16_1.x = exp2(t16_1.x);
    //Instruction 2727
    //MUL
    t16_1.x = t16_1.x * t16_11;
    //Instruction 2728
    //MUL
    t16_11 = t16_0.x * t16_0.x;
    //Instruction 2729
    //MAD
    t16_6.x = t16_11 * _Glossiness + t16_6.x;
    //Instruction 2730
    //MUL
    t16_6.x = t16_6.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 2731
    //MAD
    t16_0.x = t16_6.x * t16_0.x + 0.000100;
    //Instruction 2732
    //DIV
    t16_0.x = t16_1.x / t16_0.x;
    //Instruction 2733
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 2734
    //MAD
    t16_1.xyz = _Color.xyz * t10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2735
    //MUL
    t16_4.xyz = t10_4.xyz * _Color.xyz;
    //Instruction 2736
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2737
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    //Instruction 2738
    //MAD
    t16_16 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2739
    //MAD
    t16_1.xyz = t16_4.xyz * vec3(t16_16) + t16_1.xyz;
    //Instruction 2740
    //MUL
    t16_1.xyz = t16_1.xyz * _LightColor0.xyz;
    //Instruction 2741
    //MUL
    SV_Target0.xyz = t16_0.yyy * t16_1.xyz;
    //Instruction 2742
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2743
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 3084
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3085
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3086
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3087
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3088
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 3089
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 3090
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 3091
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3092
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3093
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3094
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3095
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3096
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3097
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 3098
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 3099
    //MOV
    t1.w = t0.x;
    //Instruction 3100
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 3101
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 3102
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 3103
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 3104
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 3105
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 3106
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 3107
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3108
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3109
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3110
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3111
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3112
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3113
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 3114
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3115
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3116
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3117
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 3118
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 3119
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 3120
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 3121
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 3122
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 3123
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 3124
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 3125
    //MOV
    t2.w = t0.z;
    //Instruction 3126
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 3127
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 3128
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 3129
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 3130
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 3131
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 3132
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 3133
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 3134
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 3135
    //DP4
    t0.x = dot(t16_0, t1);
    //Instruction 3136
    //MOV
    t16_2.x = _LightMatrix0[0].y;
    //Instruction 3137
    //MOV
    t16_2.y = _LightMatrix0[1].y;
    //Instruction 3138
    //MOV
    t16_2.z = _LightMatrix0[2].y;
    //Instruction 3139
    //MOV
    t16_2.w = _LightMatrix0[3].y;
    //Instruction 3140
    //DP4
    t0.y = dot(t16_2, t1);
    //Instruction 3141
    //MOV
    t16_2.x = _LightMatrix0[0].z;
    //Instruction 3142
    //MOV
    t16_2.y = _LightMatrix0[1].z;
    //Instruction 3143
    //MOV
    t16_2.z = _LightMatrix0[2].z;
    //Instruction 3144
    //MOV
    t16_2.w = _LightMatrix0[3].z;
    //Instruction 3145
    //DP4
    t0.z = dot(t16_2, t1);
    //Instruction 3146
    //MOV
    t16_2.x = _LightMatrix0[0].w;
    //Instruction 3147
    //MOV
    t16_2.y = _LightMatrix0[1].w;
    //Instruction 3148
    //MOV
    t16_2.z = _LightMatrix0[2].w;
    //Instruction 3149
    //MOV
    t16_2.w = _LightMatrix0[3].w;
    //Instruction 3150
    //DP4
    t0.w = dot(t16_2, t1);
    //Instruction 3151
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 3152
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec3 t10_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_4;
lowp float t10_5;
mediump vec3 t16_7;
bool tb12;
mediump float t16_13;
mediump float t16_19;
mediump float t16_20;
void main()
{
    //Instruction 3022
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 3023
    //MAD
    t16_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3024
    //MUL
    t16_2.xyz = t16_1.yyy * vs_TEXCOORD3.xyz;
    //Instruction 3025
    //MAD
    t16_1.xyw = t16_1.xxx * vs_TEXCOORD2.xyz + t16_2.xyz;
    //Instruction 3026
    //MAD
    t16_1.xyz = t16_1.zzz * vs_TEXCOORD4.xyz + t16_1.xyw;
    //Instruction 3027
    //DP3
    t16_19 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 3028
    //RSQ
    t16_19 = inversesqrt(t16_19);
    //Instruction 3029
    //MUL
    t16_1.xyz = vec3(t16_19) * t16_1.xyz;
    //Instruction 3030
    //DP3
    t16_19 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 3031
    //RSQ
    t16_19 = inversesqrt(t16_19);
    //Instruction 3032
    //MOV
    t16_2.x = vs_TEXCOORD2.w;
    //Instruction 3033
    //MOV
    t16_2.y = vs_TEXCOORD3.w;
    //Instruction 3034
    //MOV
    t16_2.z = vs_TEXCOORD4.w;
    //Instruction 3035
    //DP3
    t16_20 = dot(t16_2.xyz, t16_2.xyz);
    //Instruction 3036
    //RSQ
    t16_20 = inversesqrt(t16_20);
    //Instruction 3037
    //MUL
    t16_2.xyz = vec3(t16_20) * t16_2.xyz;
    //Instruction 3038
    //MAD
    t16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_19) + t16_2.xyz;
    //Instruction 3039
    //DP3
    t16_19 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 3040
    //MAX
    t16_0.x = max(t16_19, 0.001000);
    //Instruction 3041
    //RSQ
    t16_19 = inversesqrt(t16_0.x);
    //Instruction 3042
    //MUL
    t16_3.xyz = vec3(t16_19) * t16_3.xyz;
    //Instruction 3043
    //DP3
    t16_1.w = dot(t16_1.xyz, t16_3.xyz);
    //Instruction 3044
    //DP3
    t16_1.x = dot(t16_1.xyz, t16_2.xyz);
    //Instruction 3045
    //DP3
    t16_1.y = dot(t16_2.xyz, t16_3.xyz);
    //Instruction 3046
    //MAX
    t16_0.xyz = max(t16_1.yxw, vec3(0.0, 0.0, 0.0));
    //Instruction 3047
    //LOG
    t16_1.x = log2(t16_0.z);
    //Instruction 3048
    //ADD
    t16_7.x = (-_Glossiness) + 1.0;
    //Instruction 3049
    //ADD
    t16_13 = (-t16_7.x) + 1.0;
    //Instruction 3050
    //MAD
    t16_13 = t16_13 * 0.968000 + 0.030000;
    //Instruction 3051
    //LOG
    t16_13 = log2(t16_13);
    //Instruction 3052
    //DIV
    t16_7.y = 10.000000 / t16_13;
    //Instruction 3053
    //MUL
    t16_7.xz = t16_7.xy * t16_7.xy;
    //Instruction 3054
    //MAD
    t16_13 = t16_7.y * t16_7.y + 1.0;
    //Instruction 3055
    //MUL
    t16_1.x = t16_1.x * t16_7.z;
    //Instruction 3056
    //EXP
    t16_1.x = exp2(t16_1.x);
    //Instruction 3057
    //MUL
    t16_1.x = t16_1.x * t16_13;
    //Instruction 3058
    //MUL
    t16_13 = t16_0.x * t16_0.x;
    //Instruction 3059
    //MAD
    t16_7.x = t16_13 * _Glossiness + t16_7.x;
    //Instruction 3060
    //MUL
    t16_7.x = t16_7.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 3061
    //MAD
    t16_0.x = t16_7.x * t16_0.x + 0.000100;
    //Instruction 3062
    //DIV
    t16_0.x = t16_1.x / t16_0.x;
    //Instruction 3063
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3064
    //MAD
    t16_1.xyz = _Color.xyz * t10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 3065
    //MUL
    t16_4.xyz = t10_4.xyz * _Color.xyz;
    //Instruction 3066
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 3067
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    //Instruction 3068
    //MAD
    t16_19 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 3069
    //MAD
    t16_1.xyz = t16_4.xyz * vec3(t16_19) + t16_1.xyz;
    //Instruction 3070
    //DIV
    t16_2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    //Instruction 3071
    //ADD
    t16_2.xy = t16_2.xy + vec2(0.500000, 0.500000);
    //Instruction 3072
    //SAMPLE
    t10_0.x = texture(_LightTexture0, t16_2.xy).w;
    //Instruction 3073
    //LT
    tb12 = 0.0<vs_TEXCOORD5.z;
    //Instruction 3074
    //MOVC
    t10_5 = (tb12) ? 1.0 : 0.0;
    //Instruction 3075
    //MUL
    t10_5 = t10_0.x * t10_5;
    //Instruction 3076
    //DP3
    t16_0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 3077
    //SAMPLE
    t10_0.x = texture(_LightTextureB0, t16_0.xx).w;
    //Instruction 3078
    //MUL
    t10_5 = t10_0.x * t10_5;
    //Instruction 3079
    //MUL
    t16_2.xyz = vec3(t10_5) * _LightColor0.xyz;
    //Instruction 3080
    //MUL
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 3081
    //MUL
    SV_Target0.xyz = t16_0.yyy * t16_1.xyz;
    //Instruction 3082
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3083
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 2845
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2846
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2847
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2848
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2849
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2850
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2851
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2852
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2853
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2854
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2855
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2856
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2857
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2858
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 2859
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 2860
    //MOV
    t1.w = t0.x;
    //Instruction 2861
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 2862
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 2863
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 2864
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 2865
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2866
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 2867
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 2868
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2869
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2870
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2871
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2872
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2873
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2874
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 2875
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2876
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2877
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2878
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 2879
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 2880
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2881
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 2882
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 2883
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 2884
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 2885
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 2886
    //MOV
    t2.w = t0.z;
    //Instruction 2887
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 2888
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 2889
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 2890
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 2891
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 2892
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 2893
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 2894
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 2895
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 2896
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 2897
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 2898
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 2899
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 2900
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 2901
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 2902
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 2903
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 2904
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 2905
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 2906
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 2907
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
highp float t0;
mediump vec3 t16_0;
lowp vec3 t10_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_4;
mediump vec3 t16_6;
lowp float t10_10;
mediump float t16_11;
mediump float t16_16;
mediump float t16_17;
void main()
{
    //Instruction 2788
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 2789
    //MAD
    t16_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 2790
    //MUL
    t16_2.xyz = t16_1.yyy * vs_TEXCOORD3.xyz;
    //Instruction 2791
    //MAD
    t16_1.xyw = t16_1.xxx * vs_TEXCOORD2.xyz + t16_2.xyz;
    //Instruction 2792
    //MAD
    t16_1.xyz = t16_1.zzz * vs_TEXCOORD4.xyz + t16_1.xyw;
    //Instruction 2793
    //DP3
    t16_16 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 2794
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 2795
    //MUL
    t16_1.xyz = vec3(t16_16) * t16_1.xyz;
    //Instruction 2796
    //DP3
    t16_16 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 2797
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 2798
    //MOV
    t16_2.x = vs_TEXCOORD2.w;
    //Instruction 2799
    //MOV
    t16_2.y = vs_TEXCOORD3.w;
    //Instruction 2800
    //MOV
    t16_2.z = vs_TEXCOORD4.w;
    //Instruction 2801
    //DP3
    t16_17 = dot(t16_2.xyz, t16_2.xyz);
    //Instruction 2802
    //RSQ
    t16_17 = inversesqrt(t16_17);
    //Instruction 2803
    //MUL
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    //Instruction 2804
    //MAD
    t16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_16) + t16_2.xyz;
    //Instruction 2805
    //DP3
    t16_16 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 2806
    //MAX
    t16_0.x = max(t16_16, 0.001000);
    //Instruction 2807
    //RSQ
    t16_16 = inversesqrt(t16_0.x);
    //Instruction 2808
    //MUL
    t16_3.xyz = vec3(t16_16) * t16_3.xyz;
    //Instruction 2809
    //DP3
    t16_1.w = dot(t16_1.xyz, t16_3.xyz);
    //Instruction 2810
    //DP3
    t16_1.x = dot(t16_1.xyz, t16_2.xyz);
    //Instruction 2811
    //DP3
    t16_1.y = dot(t16_2.xyz, t16_3.xyz);
    //Instruction 2812
    //MAX
    t16_0.xyz = max(t16_1.yxw, vec3(0.0, 0.0, 0.0));
    //Instruction 2813
    //LOG
    t16_1.x = log2(t16_0.z);
    //Instruction 2814
    //ADD
    t16_6.x = (-_Glossiness) + 1.0;
    //Instruction 2815
    //ADD
    t16_11 = (-t16_6.x) + 1.0;
    //Instruction 2816
    //MAD
    t16_11 = t16_11 * 0.968000 + 0.030000;
    //Instruction 2817
    //LOG
    t16_11 = log2(t16_11);
    //Instruction 2818
    //DIV
    t16_6.y = 10.000000 / t16_11;
    //Instruction 2819
    //MUL
    t16_6.xz = t16_6.xy * t16_6.xy;
    //Instruction 2820
    //MAD
    t16_11 = t16_6.y * t16_6.y + 1.0;
    //Instruction 2821
    //MUL
    t16_1.x = t16_1.x * t16_6.z;
    //Instruction 2822
    //EXP
    t16_1.x = exp2(t16_1.x);
    //Instruction 2823
    //MUL
    t16_1.x = t16_1.x * t16_11;
    //Instruction 2824
    //MUL
    t16_11 = t16_0.x * t16_0.x;
    //Instruction 2825
    //MAD
    t16_6.x = t16_11 * _Glossiness + t16_6.x;
    //Instruction 2826
    //MUL
    t16_6.x = t16_6.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 2827
    //MAD
    t16_0.x = t16_6.x * t16_0.x + 0.000100;
    //Instruction 2828
    //DIV
    t16_0.x = t16_1.x / t16_0.x;
    //Instruction 2829
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 2830
    //MAD
    t16_1.xyz = _Color.xyz * t10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2831
    //MUL
    t16_4.xyz = t10_4.xyz * _Color.xyz;
    //Instruction 2832
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2833
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    //Instruction 2834
    //MAD
    t16_16 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2835
    //MAD
    t16_1.xyz = t16_4.xyz * vec3(t16_16) + t16_1.xyz;
    //Instruction 2836
    //DP3
    t0 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 2837
    //SAMPLE
    t10_0.x = texture(_LightTextureB0, vec2(t0)).w;
    //Instruction 2838
    //SAMPLE
    t10_10 = texture(_LightTexture0, vs_TEXCOORD5.xyz).w;
    //Instruction 2839
    //MUL
    t16_0.x = t10_10 * t10_0.x;
    //Instruction 2840
    //MUL
    t16_2.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 2841
    //MUL
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 2842
    //MUL
    SV_Target0.xyz = t16_0.yyy * t16_1.xyz;
    //Instruction 2843
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2844
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 3204
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3205
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3206
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3207
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3208
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 3209
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 3210
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 3211
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3212
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3213
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3214
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3215
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3216
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3217
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 3218
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 3219
    //MOV
    t1.w = t0.x;
    //Instruction 3220
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 3221
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 3222
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 3223
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 3224
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 3225
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 3226
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 3227
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3228
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3229
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3230
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3231
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3232
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3233
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 3234
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3235
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3236
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3237
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 3238
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 3239
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 3240
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 3241
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 3242
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 3243
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 3244
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 3245
    //MOV
    t2.w = t0.z;
    //Instruction 3246
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 3247
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 3248
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 3249
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 3250
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 3251
    //MOV
    t16_1.x = _LightMatrix0[0].x;
    //Instruction 3252
    //MOV
    t16_1.y = _LightMatrix0[1].x;
    //Instruction 3253
    //MOV
    t16_1.z = _LightMatrix0[2].x;
    //Instruction 3254
    //MOV
    t16_1.w = _LightMatrix0[3].x;
    //Instruction 3255
    //DP4
    vs_TEXCOORD5.x = dot(t16_1, t0);
    //Instruction 3256
    //MOV
    t16_1.x = _LightMatrix0[0].y;
    //Instruction 3257
    //MOV
    t16_1.y = _LightMatrix0[1].y;
    //Instruction 3258
    //MOV
    t16_1.z = _LightMatrix0[2].y;
    //Instruction 3259
    //MOV
    t16_1.w = _LightMatrix0[3].y;
    //Instruction 3260
    //DP4
    vs_TEXCOORD5.y = dot(t16_1, t0);
    //Instruction 3261
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec3 t10_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_4;
mediump vec3 t16_6;
mediump float t16_11;
mediump float t16_16;
void main()
{
    //Instruction 3153
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 3154
    //MAD
    t16_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3155
    //MUL
    t16_2.xyz = t16_1.yyy * vs_TEXCOORD3.xyz;
    //Instruction 3156
    //MAD
    t16_1.xyw = t16_1.xxx * vs_TEXCOORD2.xyz + t16_2.xyz;
    //Instruction 3157
    //MAD
    t16_1.xyz = t16_1.zzz * vs_TEXCOORD4.xyz + t16_1.xyw;
    //Instruction 3158
    //DP3
    t16_16 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 3159
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 3160
    //MUL
    t16_1.xyz = vec3(t16_16) * t16_1.xyz;
    //Instruction 3161
    //DP3
    t16_16 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 3162
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 3163
    //MOV
    t16_2.x = vs_TEXCOORD2.w;
    //Instruction 3164
    //MOV
    t16_2.y = vs_TEXCOORD3.w;
    //Instruction 3165
    //MOV
    t16_2.z = vs_TEXCOORD4.w;
    //Instruction 3166
    //MAD
    t16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_16) + t16_2.xyz;
    //Instruction 3167
    //DP3
    t16_16 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 3168
    //MAX
    t16_0.x = max(t16_16, 0.001000);
    //Instruction 3169
    //RSQ
    t16_16 = inversesqrt(t16_0.x);
    //Instruction 3170
    //MUL
    t16_3.xyz = vec3(t16_16) * t16_3.xyz;
    //Instruction 3171
    //DP3
    t16_1.w = dot(t16_1.xyz, t16_3.xyz);
    //Instruction 3172
    //DP3
    t16_1.x = dot(t16_1.xyz, t16_2.xyz);
    //Instruction 3173
    //DP3
    t16_1.y = dot(t16_2.xyz, t16_3.xyz);
    //Instruction 3174
    //MAX
    t16_0.xyz = max(t16_1.yxw, vec3(0.0, 0.0, 0.0));
    //Instruction 3175
    //LOG
    t16_1.x = log2(t16_0.z);
    //Instruction 3176
    //ADD
    t16_6.x = (-_Glossiness) + 1.0;
    //Instruction 3177
    //ADD
    t16_11 = (-t16_6.x) + 1.0;
    //Instruction 3178
    //MAD
    t16_11 = t16_11 * 0.968000 + 0.030000;
    //Instruction 3179
    //LOG
    t16_11 = log2(t16_11);
    //Instruction 3180
    //DIV
    t16_6.y = 10.000000 / t16_11;
    //Instruction 3181
    //MUL
    t16_6.xz = t16_6.xy * t16_6.xy;
    //Instruction 3182
    //MAD
    t16_11 = t16_6.y * t16_6.y + 1.0;
    //Instruction 3183
    //MUL
    t16_1.x = t16_1.x * t16_6.z;
    //Instruction 3184
    //EXP
    t16_1.x = exp2(t16_1.x);
    //Instruction 3185
    //MUL
    t16_1.x = t16_1.x * t16_11;
    //Instruction 3186
    //MUL
    t16_11 = t16_0.x * t16_0.x;
    //Instruction 3187
    //MAD
    t16_6.x = t16_11 * _Glossiness + t16_6.x;
    //Instruction 3188
    //MUL
    t16_6.x = t16_6.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 3189
    //MAD
    t16_0.x = t16_6.x * t16_0.x + 0.000100;
    //Instruction 3190
    //DIV
    t16_0.x = t16_1.x / t16_0.x;
    //Instruction 3191
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3192
    //MAD
    t16_1.xyz = _Color.xyz * t10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 3193
    //MUL
    t16_4.xyz = t10_4.xyz * _Color.xyz;
    //Instruction 3194
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 3195
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    //Instruction 3196
    //MAD
    t16_16 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 3197
    //MAD
    t16_1.xyz = t16_4.xyz * vec3(t16_16) + t16_1.xyz;
    //Instruction 3198
    //SAMPLE
    t10_0.x = texture(_LightTexture0, vs_TEXCOORD5.xy).w;
    //Instruction 3199
    //MUL
    t16_2.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 3200
    //MUL
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 3201
    //MUL
    SV_Target0.xyz = t16_0.yyy * t16_1.xyz;
    //Instruction 3202
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3203
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 2975
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2976
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2977
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2978
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2979
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2980
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2981
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2982
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2983
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2984
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2985
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2986
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2987
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2988
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 2989
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 2990
    //MOV
    t1.w = t0.x;
    //Instruction 2991
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 2992
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 2993
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 2994
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 2995
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2996
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 2997
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 2998
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2999
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3000
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3001
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3002
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3003
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3004
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 3005
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3006
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3007
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3008
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 3009
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 3010
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 3011
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 3012
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 3013
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 3014
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 3015
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 3016
    //MOV
    t2.w = t0.z;
    //Instruction 3017
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 3018
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 3019
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 3020
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 3021
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 3022
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 3023
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 3024
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 3025
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 3026
    //DP4
    t0.x = dot(t16_0, t1);
    //Instruction 3027
    //MOV
    t16_2.x = _LightMatrix0[0].y;
    //Instruction 3028
    //MOV
    t16_2.y = _LightMatrix0[1].y;
    //Instruction 3029
    //MOV
    t16_2.z = _LightMatrix0[2].y;
    //Instruction 3030
    //MOV
    t16_2.w = _LightMatrix0[3].y;
    //Instruction 3031
    //DP4
    t0.y = dot(t16_2, t1);
    //Instruction 3032
    //MOV
    t16_2.x = _LightMatrix0[0].z;
    //Instruction 3033
    //MOV
    t16_2.y = _LightMatrix0[1].z;
    //Instruction 3034
    //MOV
    t16_2.z = _LightMatrix0[2].z;
    //Instruction 3035
    //MOV
    t16_2.w = _LightMatrix0[3].z;
    //Instruction 3036
    //DP4
    t0.z = dot(t16_2, t1);
    //Instruction 3037
    //MOV
    t16_2.x = _LightMatrix0[0].w;
    //Instruction 3038
    //MOV
    t16_2.y = _LightMatrix0[1].w;
    //Instruction 3039
    //MOV
    t16_2.z = _LightMatrix0[2].w;
    //Instruction 3040
    //MOV
    t16_2.w = _LightMatrix0[3].w;
    //Instruction 3041
    //DP4
    t0.w = dot(t16_2, t1);
    //Instruction 3042
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 3043
    //MUL
    t0 = t1.yyyy * unity_World2Shadow[0][1];
    //Instruction 3044
    //MAD
    t0 = unity_World2Shadow[0][0] * t1.xxxx + t0;
    //Instruction 3045
    //MAD
    t0 = unity_World2Shadow[0][2] * t1.zzzz + t0;
    //Instruction 3046
    //MAD
    t0 = unity_World2Shadow[0][3] * t1.wwww + t0;
    //Instruction 3047
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 3048
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec3 t10_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_4;
lowp float t10_5;
mediump vec3 t16_7;
bool tb12;
mediump float t16_13;
mediump float t16_19;
mediump float t16_20;
void main()
{
    //Instruction 2908
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 2909
    //MAD
    t16_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 2910
    //MUL
    t16_2.xyz = t16_1.yyy * vs_TEXCOORD3.xyz;
    //Instruction 2911
    //MAD
    t16_1.xyw = t16_1.xxx * vs_TEXCOORD2.xyz + t16_2.xyz;
    //Instruction 2912
    //MAD
    t16_1.xyz = t16_1.zzz * vs_TEXCOORD4.xyz + t16_1.xyw;
    //Instruction 2913
    //DP3
    t16_19 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 2914
    //RSQ
    t16_19 = inversesqrt(t16_19);
    //Instruction 2915
    //MUL
    t16_1.xyz = vec3(t16_19) * t16_1.xyz;
    //Instruction 2916
    //DP3
    t16_19 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 2917
    //RSQ
    t16_19 = inversesqrt(t16_19);
    //Instruction 2918
    //MOV
    t16_2.x = vs_TEXCOORD2.w;
    //Instruction 2919
    //MOV
    t16_2.y = vs_TEXCOORD3.w;
    //Instruction 2920
    //MOV
    t16_2.z = vs_TEXCOORD4.w;
    //Instruction 2921
    //DP3
    t16_20 = dot(t16_2.xyz, t16_2.xyz);
    //Instruction 2922
    //RSQ
    t16_20 = inversesqrt(t16_20);
    //Instruction 2923
    //MUL
    t16_2.xyz = vec3(t16_20) * t16_2.xyz;
    //Instruction 2924
    //MAD
    t16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_19) + t16_2.xyz;
    //Instruction 2925
    //DP3
    t16_19 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 2926
    //MAX
    t16_0.x = max(t16_19, 0.001000);
    //Instruction 2927
    //RSQ
    t16_19 = inversesqrt(t16_0.x);
    //Instruction 2928
    //MUL
    t16_3.xyz = vec3(t16_19) * t16_3.xyz;
    //Instruction 2929
    //DP3
    t16_1.w = dot(t16_1.xyz, t16_3.xyz);
    //Instruction 2930
    //DP3
    t16_1.x = dot(t16_1.xyz, t16_2.xyz);
    //Instruction 2931
    //DP3
    t16_1.y = dot(t16_2.xyz, t16_3.xyz);
    //Instruction 2932
    //MAX
    t16_0.xyz = max(t16_1.yxw, vec3(0.0, 0.0, 0.0));
    //Instruction 2933
    //LOG
    t16_1.x = log2(t16_0.z);
    //Instruction 2934
    //ADD
    t16_7.x = (-_Glossiness) + 1.0;
    //Instruction 2935
    //ADD
    t16_13 = (-t16_7.x) + 1.0;
    //Instruction 2936
    //MAD
    t16_13 = t16_13 * 0.968000 + 0.030000;
    //Instruction 2937
    //LOG
    t16_13 = log2(t16_13);
    //Instruction 2938
    //DIV
    t16_7.y = 10.000000 / t16_13;
    //Instruction 2939
    //MUL
    t16_7.xz = t16_7.xy * t16_7.xy;
    //Instruction 2940
    //MAD
    t16_13 = t16_7.y * t16_7.y + 1.0;
    //Instruction 2941
    //MUL
    t16_1.x = t16_1.x * t16_7.z;
    //Instruction 2942
    //EXP
    t16_1.x = exp2(t16_1.x);
    //Instruction 2943
    //MUL
    t16_1.x = t16_1.x * t16_13;
    //Instruction 2944
    //MUL
    t16_13 = t16_0.x * t16_0.x;
    //Instruction 2945
    //MAD
    t16_7.x = t16_13 * _Glossiness + t16_7.x;
    //Instruction 2946
    //MUL
    t16_7.x = t16_7.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 2947
    //MAD
    t16_0.x = t16_7.x * t16_0.x + 0.000100;
    //Instruction 2948
    //DIV
    t16_0.x = t16_1.x / t16_0.x;
    //Instruction 2949
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 2950
    //MAD
    t16_1.xyz = _Color.xyz * t10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2951
    //MUL
    t16_4.xyz = t10_4.xyz * _Color.xyz;
    //Instruction 2952
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2953
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    //Instruction 2954
    //MAD
    t16_19 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2955
    //MAD
    t16_1.xyz = t16_4.xyz * vec3(t16_19) + t16_1.xyz;
    //Instruction 2956
    //DIV
    t16_2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    //Instruction 2957
    //ADD
    t16_2.xy = t16_2.xy + vec2(0.500000, 0.500000);
    //Instruction 2958
    //SAMPLE
    t10_0.x = texture(_LightTexture0, t16_2.xy).w;
    //Instruction 2959
    //LT
    tb12 = 0.0<vs_TEXCOORD5.z;
    //Instruction 2960
    //MOVC
    t10_5 = (tb12) ? 1.0 : 0.0;
    //Instruction 2961
    //MUL
    t10_5 = t10_0.x * t10_5;
    //Instruction 2962
    //DP3
    t16_19 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 2963
    //SAMPLE
    t10_0.x = texture(_LightTextureB0, vec2(t16_19)).w;
    //Instruction 2964
    //MUL
    t10_5 = t10_0.x * t10_5;
    //Instruction 2965
    //DIV
    t16_0.xzw = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
    //Instruction 2966
    //SAMPLE_C_LZ
    vec3 txVec13 = vec3(t16_0.xz,t16_0.w);
    t10_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec13, 0.0);
    //Instruction 2967
    //ADD
    t16_19 = (-_LightShadowData.x) + 1.0;
    //Instruction 2968
    //MAD
    t16_19 = t10_0.x * t16_19 + _LightShadowData.x;
    //Instruction 2969
    //MUL
    t10_5 = t16_19 * t10_5;
    //Instruction 2970
    //MUL
    t16_2.xyz = vec3(t10_5) * _LightColor0.xyz;
    //Instruction 2971
    //MUL
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 2972
    //MUL
    SV_Target0.xyz = t16_0.yyy * t16_1.xyz;
    //Instruction 2973
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2974
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 3326
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3327
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3328
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3329
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3330
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 3331
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 3332
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 3333
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3334
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3335
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3336
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3337
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3338
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3339
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 3340
    //MUL
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 3341
    //MAD
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    //Instruction 3342
    //MAD
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    //Instruction 3343
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 3344
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 3345
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 3346
    //MAD
    t2.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 3347
    //ADD
    vs_TEXCOORD6.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 3348
    //MOV
    t1.w = t2.x;
    //Instruction 3349
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 3350
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3351
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3352
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3353
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3354
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3355
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3356
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 3357
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3358
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3359
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3360
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 3361
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 3362
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 3363
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 3364
    //MUL
    t16_4.xyz = t1.yzx * t0.zxy;
    //Instruction 3365
    //MAD
    t16_4.xyz = t0.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 3366
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 3367
    //MOV
    vs_TEXCOORD3.w = t2.y;
    //Instruction 3368
    //MOV
    t0.w = t2.z;
    //Instruction 3369
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 3370
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 3371
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 3372
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 3373
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 3374
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 3375
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 3376
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 3377
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 3378
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 3379
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 3380
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 3381
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 3382
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 3383
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 3384
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 3385
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 3386
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 3387
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 3388
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 3389
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
highp float t0;
mediump vec3 t16_0;
lowp vec3 t10_0;
bool tb0;
mediump vec4 t16_1;
highp vec4 t2;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_4;
mediump vec3 t16_6;
highp float t10;
mediump float t16_11;
mediump float t16_16;
mediump float t16_17;
void main()
{
    //Instruction 3262
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 3263
    //MAD
    t16_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3264
    //MUL
    t16_2.xyz = t16_1.yyy * vs_TEXCOORD3.xyz;
    //Instruction 3265
    //MAD
    t16_1.xyw = t16_1.xxx * vs_TEXCOORD2.xyz + t16_2.xyz;
    //Instruction 3266
    //MAD
    t16_1.xyz = t16_1.zzz * vs_TEXCOORD4.xyz + t16_1.xyw;
    //Instruction 3267
    //DP3
    t16_16 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 3268
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 3269
    //MUL
    t16_1.xyz = vec3(t16_16) * t16_1.xyz;
    //Instruction 3270
    //DP3
    t16_16 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 3271
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 3272
    //MOV
    t16_2.x = vs_TEXCOORD2.w;
    //Instruction 3273
    //MOV
    t16_2.y = vs_TEXCOORD3.w;
    //Instruction 3274
    //MOV
    t16_2.z = vs_TEXCOORD4.w;
    //Instruction 3275
    //DP3
    t16_17 = dot(t16_2.xyz, t16_2.xyz);
    //Instruction 3276
    //RSQ
    t16_17 = inversesqrt(t16_17);
    //Instruction 3277
    //MUL
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    //Instruction 3278
    //MAD
    t16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_16) + t16_2.xyz;
    //Instruction 3279
    //DP3
    t16_16 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 3280
    //MAX
    t16_0.x = max(t16_16, 0.001000);
    //Instruction 3281
    //RSQ
    t16_16 = inversesqrt(t16_0.x);
    //Instruction 3282
    //MUL
    t16_3.xyz = vec3(t16_16) * t16_3.xyz;
    //Instruction 3283
    //DP3
    t16_1.w = dot(t16_1.xyz, t16_3.xyz);
    //Instruction 3284
    //DP3
    t16_1.x = dot(t16_1.xyz, t16_2.xyz);
    //Instruction 3285
    //DP3
    t16_1.y = dot(t16_2.xyz, t16_3.xyz);
    //Instruction 3286
    //MAX
    t16_0.xyz = max(t16_1.yxw, vec3(0.0, 0.0, 0.0));
    //Instruction 3287
    //LOG
    t16_1.x = log2(t16_0.z);
    //Instruction 3288
    //ADD
    t16_6.x = (-_Glossiness) + 1.0;
    //Instruction 3289
    //ADD
    t16_11 = (-t16_6.x) + 1.0;
    //Instruction 3290
    //MAD
    t16_11 = t16_11 * 0.968000 + 0.030000;
    //Instruction 3291
    //LOG
    t16_11 = log2(t16_11);
    //Instruction 3292
    //DIV
    t16_6.y = 10.000000 / t16_11;
    //Instruction 3293
    //MUL
    t16_6.xz = t16_6.xy * t16_6.xy;
    //Instruction 3294
    //MAD
    t16_11 = t16_6.y * t16_6.y + 1.0;
    //Instruction 3295
    //MUL
    t16_1.x = t16_1.x * t16_6.z;
    //Instruction 3296
    //EXP
    t16_1.x = exp2(t16_1.x);
    //Instruction 3297
    //MUL
    t16_1.x = t16_1.x * t16_11;
    //Instruction 3298
    //MUL
    t16_11 = t16_0.x * t16_0.x;
    //Instruction 3299
    //MAD
    t16_6.x = t16_11 * _Glossiness + t16_6.x;
    //Instruction 3300
    //MUL
    t16_6.x = t16_6.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 3301
    //MAD
    t16_0.x = t16_6.x * t16_0.x + 0.000100;
    //Instruction 3302
    //DIV
    t16_0.x = t16_1.x / t16_0.x;
    //Instruction 3303
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3304
    //MAD
    t16_1.xyz = _Color.xyz * t10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 3305
    //MUL
    t16_4.xyz = t10_4.xyz * _Color.xyz;
    //Instruction 3306
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 3307
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    //Instruction 3308
    //MAD
    t16_16 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 3309
    //MAD
    t16_1.xyz = t16_4.xyz * vec3(t16_16) + t16_1.xyz;
    //Instruction 3310
    //DP3
    t0 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    //Instruction 3311
    //SQRT
    t0 = sqrt(t0);
    //Instruction 3312
    //MUL
    t0 = t0 * _LightPositionRange.w;
    //Instruction 3313
    //MUL
    t0 = t0 * 0.970000;
    //Instruction 3314
    //SAMPLE
    t2 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
    //Instruction 3315
    //DP4
    t10 = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 3316
    //LT
    tb0 = t10<t0;
    //Instruction 3317
    //MOVC
    t16_16 = (tb0) ? _LightShadowData.x : 1.0;
    //Instruction 3318
    //DP3
    t0 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 3319
    //SAMPLE
    t10_0.x = texture(_LightTexture0, vec2(t0)).w;
    //Instruction 3320
    //MUL
    t16_0.x = t16_16 * t10_0.x;
    //Instruction 3321
    //MUL
    t16_3.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 3322
    //MUL
    t16_1.xyz = t16_1.xyz * t16_3.xyz;
    //Instruction 3323
    //MUL
    SV_Target0.xyz = t16_0.yyy * t16_1.xyz;
    //Instruction 3324
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3325
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 3115
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3116
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3117
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3118
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3119
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 3120
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 3121
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 3122
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3123
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3124
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3125
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3126
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3127
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3128
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 3129
    //MUL
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 3130
    //MAD
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    //Instruction 3131
    //MAD
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    //Instruction 3132
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 3133
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 3134
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 3135
    //MAD
    t2.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 3136
    //ADD
    vs_TEXCOORD6.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 3137
    //MOV
    t1.w = t2.x;
    //Instruction 3138
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 3139
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3140
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3141
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3142
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3143
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3144
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3145
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 3146
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3147
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3148
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3149
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 3150
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 3151
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 3152
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 3153
    //MUL
    t16_4.xyz = t1.yzx * t0.zxy;
    //Instruction 3154
    //MAD
    t16_4.xyz = t0.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 3155
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 3156
    //MOV
    vs_TEXCOORD3.w = t2.y;
    //Instruction 3157
    //MOV
    t0.w = t2.z;
    //Instruction 3158
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 3159
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 3160
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 3161
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 3162
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 3163
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 3164
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 3165
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 3166
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 3167
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 3168
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 3169
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 3170
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 3171
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 3172
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 3173
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 3174
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 3175
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 3176
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 3177
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 3178
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
highp float t0;
mediump vec3 t16_0;
lowp vec3 t10_0;
bool tb0;
mediump vec4 t16_1;
highp vec4 t2;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_4;
mediump vec3 t16_6;
highp float t10;
lowp float t10_10;
mediump float t16_11;
mediump float t16_16;
mediump float t16_17;
void main()
{
    //Instruction 3049
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 3050
    //MAD
    t16_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3051
    //MUL
    t16_2.xyz = t16_1.yyy * vs_TEXCOORD3.xyz;
    //Instruction 3052
    //MAD
    t16_1.xyw = t16_1.xxx * vs_TEXCOORD2.xyz + t16_2.xyz;
    //Instruction 3053
    //MAD
    t16_1.xyz = t16_1.zzz * vs_TEXCOORD4.xyz + t16_1.xyw;
    //Instruction 3054
    //DP3
    t16_16 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 3055
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 3056
    //MUL
    t16_1.xyz = vec3(t16_16) * t16_1.xyz;
    //Instruction 3057
    //DP3
    t16_16 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 3058
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 3059
    //MOV
    t16_2.x = vs_TEXCOORD2.w;
    //Instruction 3060
    //MOV
    t16_2.y = vs_TEXCOORD3.w;
    //Instruction 3061
    //MOV
    t16_2.z = vs_TEXCOORD4.w;
    //Instruction 3062
    //DP3
    t16_17 = dot(t16_2.xyz, t16_2.xyz);
    //Instruction 3063
    //RSQ
    t16_17 = inversesqrt(t16_17);
    //Instruction 3064
    //MUL
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    //Instruction 3065
    //MAD
    t16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_16) + t16_2.xyz;
    //Instruction 3066
    //DP3
    t16_16 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 3067
    //MAX
    t16_0.x = max(t16_16, 0.001000);
    //Instruction 3068
    //RSQ
    t16_16 = inversesqrt(t16_0.x);
    //Instruction 3069
    //MUL
    t16_3.xyz = vec3(t16_16) * t16_3.xyz;
    //Instruction 3070
    //DP3
    t16_1.w = dot(t16_1.xyz, t16_3.xyz);
    //Instruction 3071
    //DP3
    t16_1.x = dot(t16_1.xyz, t16_2.xyz);
    //Instruction 3072
    //DP3
    t16_1.y = dot(t16_2.xyz, t16_3.xyz);
    //Instruction 3073
    //MAX
    t16_0.xyz = max(t16_1.yxw, vec3(0.0, 0.0, 0.0));
    //Instruction 3074
    //LOG
    t16_1.x = log2(t16_0.z);
    //Instruction 3075
    //ADD
    t16_6.x = (-_Glossiness) + 1.0;
    //Instruction 3076
    //ADD
    t16_11 = (-t16_6.x) + 1.0;
    //Instruction 3077
    //MAD
    t16_11 = t16_11 * 0.968000 + 0.030000;
    //Instruction 3078
    //LOG
    t16_11 = log2(t16_11);
    //Instruction 3079
    //DIV
    t16_6.y = 10.000000 / t16_11;
    //Instruction 3080
    //MUL
    t16_6.xz = t16_6.xy * t16_6.xy;
    //Instruction 3081
    //MAD
    t16_11 = t16_6.y * t16_6.y + 1.0;
    //Instruction 3082
    //MUL
    t16_1.x = t16_1.x * t16_6.z;
    //Instruction 3083
    //EXP
    t16_1.x = exp2(t16_1.x);
    //Instruction 3084
    //MUL
    t16_1.x = t16_1.x * t16_11;
    //Instruction 3085
    //MUL
    t16_11 = t16_0.x * t16_0.x;
    //Instruction 3086
    //MAD
    t16_6.x = t16_11 * _Glossiness + t16_6.x;
    //Instruction 3087
    //MUL
    t16_6.x = t16_6.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 3088
    //MAD
    t16_0.x = t16_6.x * t16_0.x + 0.000100;
    //Instruction 3089
    //DIV
    t16_0.x = t16_1.x / t16_0.x;
    //Instruction 3090
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3091
    //MAD
    t16_1.xyz = _Color.xyz * t10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 3092
    //MUL
    t16_4.xyz = t10_4.xyz * _Color.xyz;
    //Instruction 3093
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 3094
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    //Instruction 3095
    //MAD
    t16_16 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 3096
    //MAD
    t16_1.xyz = t16_4.xyz * vec3(t16_16) + t16_1.xyz;
    //Instruction 3097
    //DP3
    t0 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    //Instruction 3098
    //SQRT
    t0 = sqrt(t0);
    //Instruction 3099
    //MUL
    t0 = t0 * _LightPositionRange.w;
    //Instruction 3100
    //MUL
    t0 = t0 * 0.970000;
    //Instruction 3101
    //SAMPLE
    t2 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
    //Instruction 3102
    //DP4
    t10 = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 3103
    //LT
    tb0 = t10<t0;
    //Instruction 3104
    //MOVC
    t16_16 = (tb0) ? _LightShadowData.x : 1.0;
    //Instruction 3105
    //DP3
    t0 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 3106
    //SAMPLE
    t10_0.x = texture(_LightTextureB0, vec2(t0)).w;
    //Instruction 3107
    //SAMPLE
    t10_10 = texture(_LightTexture0, vs_TEXCOORD5.xyz).w;
    //Instruction 3108
    //MUL
    t16_0.x = t10_10 * t10_0.x;
    //Instruction 3109
    //MUL
    t16_0.x = t16_16 * t16_0.x;
    //Instruction 3110
    //MUL
    t16_3.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 3111
    //MUL
    t16_1.xyz = t16_1.xyz * t16_3.xyz;
    //Instruction 3112
    //MUL
    SV_Target0.xyz = t16_0.yyy * t16_1.xyz;
    //Instruction 3113
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3114
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	vec4 _ShadowOffsets[4];
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 3466
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3467
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3468
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3469
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3470
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 3471
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 3472
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 3473
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3474
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3475
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3476
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3477
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3478
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3479
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 3480
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 3481
    //MOV
    t1.w = t0.x;
    //Instruction 3482
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 3483
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 3484
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 3485
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 3486
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 3487
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 3488
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 3489
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3490
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3491
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3492
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3493
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3494
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3495
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 3496
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3497
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3498
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3499
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 3500
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 3501
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 3502
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 3503
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 3504
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 3505
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 3506
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 3507
    //MOV
    t2.w = t0.z;
    //Instruction 3508
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 3509
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 3510
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 3511
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 3512
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 3513
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 3514
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 3515
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 3516
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 3517
    //DP4
    t0.x = dot(t16_0, t1);
    //Instruction 3518
    //MOV
    t16_2.x = _LightMatrix0[0].y;
    //Instruction 3519
    //MOV
    t16_2.y = _LightMatrix0[1].y;
    //Instruction 3520
    //MOV
    t16_2.z = _LightMatrix0[2].y;
    //Instruction 3521
    //MOV
    t16_2.w = _LightMatrix0[3].y;
    //Instruction 3522
    //DP4
    t0.y = dot(t16_2, t1);
    //Instruction 3523
    //MOV
    t16_2.x = _LightMatrix0[0].z;
    //Instruction 3524
    //MOV
    t16_2.y = _LightMatrix0[1].z;
    //Instruction 3525
    //MOV
    t16_2.z = _LightMatrix0[2].z;
    //Instruction 3526
    //MOV
    t16_2.w = _LightMatrix0[3].z;
    //Instruction 3527
    //DP4
    t0.z = dot(t16_2, t1);
    //Instruction 3528
    //MOV
    t16_2.x = _LightMatrix0[0].w;
    //Instruction 3529
    //MOV
    t16_2.y = _LightMatrix0[1].w;
    //Instruction 3530
    //MOV
    t16_2.z = _LightMatrix0[2].w;
    //Instruction 3531
    //MOV
    t16_2.w = _LightMatrix0[3].w;
    //Instruction 3532
    //DP4
    t0.w = dot(t16_2, t1);
    //Instruction 3533
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 3534
    //MUL
    t0 = t1.yyyy * unity_World2Shadow[0][1];
    //Instruction 3535
    //MAD
    t0 = unity_World2Shadow[0][0] * t1.xxxx + t0;
    //Instruction 3536
    //MAD
    t0 = unity_World2Shadow[0][2] * t1.zzzz + t0;
    //Instruction 3537
    //MAD
    t0 = unity_World2Shadow[0][3] * t1.wwww + t0;
    //Instruction 3538
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 3539
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	vec4 _ShadowOffsets[4];
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec3 t16_1;
lowp vec3 t10_1;
highp vec4 t2;
mediump vec3 t16_2;
lowp vec3 t10_2;
highp vec3 t3;
lowp float t10_4;
mediump vec4 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
lowp float t10_9;
mediump float t16_13;
mediump float t16_17;
bool tb17;
mediump float t16_24;
mediump float t16_29;
void main()
{
    //Instruction 3390
    //ADD
    t16_0.x = (-_LightShadowData.x) + 1.0;
    //Instruction 3391
    //DIV
    t16_1.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
    //Instruction 3392
    //ADD
    t2.xyz = t16_1.xyz + _ShadowOffsets[0].xyz;
    //Instruction 3393
    //SAMPLE_C_LZ
    vec3 txVec9 = vec3(t2.xy,t2.z);
    t2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec9, 0.0);
    //Instruction 3394
    //ADD
    t3.xyz = t16_1.xyz + _ShadowOffsets[1].xyz;
    //Instruction 3395
    //SAMPLE_C_LZ
    vec3 txVec10 = vec3(t3.xy,t3.z);
    t2.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec10, 0.0);
    //Instruction 3396
    //ADD
    t3.xyz = t16_1.xyz + _ShadowOffsets[2].xyz;
    //Instruction 3397
    //ADD
    t1.xyz = t16_1.xyz + _ShadowOffsets[3].xyz;
    //Instruction 3398
    //SAMPLE_C_LZ
    vec3 txVec11 = vec3(t1.xy,t1.z);
    t2.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec11, 0.0);
    //Instruction 3399
    //SAMPLE_C_LZ
    vec3 txVec12 = vec3(t3.xy,t3.z);
    t2.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec12, 0.0);
    //Instruction 3400
    //MAD
    t16_0 = t2 * t16_0.xxxx + _LightShadowData.xxxx;
    //Instruction 3401
    //DP4
    t16_1.x = dot(t16_0, vec4(0.250000, 0.250000, 0.250000, 0.250000));
    //Instruction 3402
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    //Instruction 3403
    //ADD
    t16_0.xy = t16_0.xy + vec2(0.500000, 0.500000);
    //Instruction 3404
    //SAMPLE
    t10_9 = texture(_LightTexture0, t16_0.xy).w;
    //Instruction 3405
    //LT
    tb17 = 0.0<vs_TEXCOORD5.z;
    //Instruction 3406
    //MOVC
    t10_4 = (tb17) ? 1.0 : 0.0;
    //Instruction 3407
    //MUL
    t10_4 = t10_9 * t10_4;
    //Instruction 3408
    //DP3
    t16_0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 3409
    //SAMPLE
    t10_9 = texture(_LightTextureB0, t16_0.xx).w;
    //Instruction 3410
    //MUL
    t10_4 = t10_9 * t10_4;
    //Instruction 3411
    //MUL
    t10_4 = t16_1.x * t10_4;
    //Instruction 3412
    //MUL
    t16_0.xyz = vec3(t10_4) * _LightColor0.xyz;
    //Instruction 3413
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 3414
    //MAD
    t16_5.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3415
    //MUL
    t16_6.xyz = t16_5.yyy * vs_TEXCOORD3.xyz;
    //Instruction 3416
    //MAD
    t16_5.xyw = t16_5.xxx * vs_TEXCOORD2.xyz + t16_6.xyz;
    //Instruction 3417
    //MAD
    t16_5.xyz = t16_5.zzz * vs_TEXCOORD4.xyz + t16_5.xyw;
    //Instruction 3418
    //DP3
    t16_24 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 3419
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 3420
    //MUL
    t16_5.xyz = vec3(t16_24) * t16_5.xyz;
    //Instruction 3421
    //DP3
    t16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 3422
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 3423
    //MOV
    t16_6.x = vs_TEXCOORD2.w;
    //Instruction 3424
    //MOV
    t16_6.y = vs_TEXCOORD3.w;
    //Instruction 3425
    //MOV
    t16_6.z = vs_TEXCOORD4.w;
    //Instruction 3426
    //DP3
    t16_29 = dot(t16_6.xyz, t16_6.xyz);
    //Instruction 3427
    //RSQ
    t16_29 = inversesqrt(t16_29);
    //Instruction 3428
    //MUL
    t16_6.xyz = vec3(t16_29) * t16_6.xyz;
    //Instruction 3429
    //MAD
    t16_7.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_24) + t16_6.xyz;
    //Instruction 3430
    //DP3
    t16_24 = dot(t16_7.xyz, t16_7.xyz);
    //Instruction 3431
    //MAX
    t16_1.x = max(t16_24, 0.001000);
    //Instruction 3432
    //RSQ
    t16_24 = inversesqrt(t16_1.x);
    //Instruction 3433
    //MUL
    t16_7.xyz = vec3(t16_24) * t16_7.xyz;
    //Instruction 3434
    //DP3
    t16_24 = dot(t16_5.xyz, t16_7.xyz);
    //Instruction 3435
    //DP3
    t16_5.x = dot(t16_5.xyz, t16_6.xyz);
    //Instruction 3436
    //DP3
    t16_5.y = dot(t16_6.xyz, t16_7.xyz);
    //Instruction 3437
    //MAX
    t16_1.xy = max(t16_5.yx, vec2(0.0, 0.0));
    //Instruction 3438
    //MAX
    t16_17 = max(t16_24, 0.0);
    //Instruction 3439
    //LOG
    t16_24 = log2(t16_17);
    //Instruction 3440
    //ADD
    t16_5.x = (-_Glossiness) + 1.0;
    //Instruction 3441
    //ADD
    t16_13 = (-t16_5.x) + 1.0;
    //Instruction 3442
    //MAD
    t16_13 = t16_13 * 0.968000 + 0.030000;
    //Instruction 3443
    //LOG
    t16_13 = log2(t16_13);
    //Instruction 3444
    //DIV
    t16_5.y = 10.000000 / t16_13;
    //Instruction 3445
    //MUL
    t16_5.xz = t16_5.xy * t16_5.xy;
    //Instruction 3446
    //MAD
    t16_13 = t16_5.y * t16_5.y + 1.0;
    //Instruction 3447
    //MUL
    t16_24 = t16_24 * t16_5.z;
    //Instruction 3448
    //EXP
    t16_24 = exp2(t16_24);
    //Instruction 3449
    //MUL
    t16_24 = t16_24 * t16_13;
    //Instruction 3450
    //MUL
    t16_13 = t16_1.x * t16_1.x;
    //Instruction 3451
    //MAD
    t16_5.x = t16_13 * _Glossiness + t16_5.x;
    //Instruction 3452
    //MUL
    t16_5.x = t16_5.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 3453
    //MAD
    t16_1.x = t16_5.x * t16_1.x + 0.000100;
    //Instruction 3454
    //DIV
    t16_1.x = t16_24 / t16_1.x;
    //Instruction 3455
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3456
    //MAD
    t16_5.xyz = _Color.xyz * t10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 3457
    //MUL
    t16_2.xyz = t10_2.xyz * _Color.xyz;
    //Instruction 3458
    //MAD
    t16_5.xyz = vec3(_Metallic) * t16_5.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 3459
    //MUL
    t16_5.xyz = t16_1.xxx * t16_5.xyz;
    //Instruction 3460
    //MAD
    t16_24 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 3461
    //MAD
    t16_5.xyz = t16_2.xyz * vec3(t16_24) + t16_5.xyz;
    //Instruction 3462
    //MUL
    t16_0.xyz = t16_0.xyz * t16_5.xyz;
    //Instruction 3463
    //MUL
    SV_Target0.xyz = t16_1.yyy * t16_0.xyz;
    //Instruction 3464
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3465
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 3255
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3256
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3257
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3258
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3259
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 3260
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 3261
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 3262
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3263
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3264
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3265
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3266
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3267
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3268
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 3269
    //MUL
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 3270
    //MAD
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    //Instruction 3271
    //MAD
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    //Instruction 3272
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 3273
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 3274
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 3275
    //MAD
    t2.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 3276
    //ADD
    vs_TEXCOORD6.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 3277
    //MOV
    t1.w = t2.x;
    //Instruction 3278
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 3279
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3280
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3281
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3282
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3283
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3284
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3285
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 3286
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3287
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3288
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3289
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 3290
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 3291
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 3292
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 3293
    //MUL
    t16_4.xyz = t1.yzx * t0.zxy;
    //Instruction 3294
    //MAD
    t16_4.xyz = t0.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 3295
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 3296
    //MOV
    vs_TEXCOORD3.w = t2.y;
    //Instruction 3297
    //MOV
    t0.w = t2.z;
    //Instruction 3298
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 3299
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 3300
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 3301
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 3302
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 3303
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 3304
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 3305
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 3306
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 3307
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 3308
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 3309
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 3310
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 3311
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 3312
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 3313
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 3314
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 3315
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 3316
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 3317
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 3318
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec3 t10_0;
bvec4 tb0;
highp vec4 t1;
mediump vec3 t16_1;
lowp vec3 t10_1;
highp vec4 t2;
mediump vec3 t16_3;
mediump vec4 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp vec3 t7;
mediump float t16_11;
mediump float t16_14;
mediump float t16_24;
mediump float t16_25;
void main()
{
    //Instruction 3179
    //DP3
    t0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    //Instruction 3180
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 3181
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 3182
    //MUL
    t0.x = t0.x * 0.970000;
    //Instruction 3183
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(0.007812, 0.007812, 0.007812);
    //Instruction 3184
    //SAMPLE
    t1 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 3185
    //DP4
    t1.x = dot(t1, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 3186
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(-0.007812, -0.007812, 0.007812);
    //Instruction 3187
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 3188
    //DP4
    t1.y = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 3189
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(-0.007812, 0.007812, -0.007812);
    //Instruction 3190
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 3191
    //DP4
    t1.z = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 3192
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(0.007812, -0.007812, -0.007812);
    //Instruction 3193
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 3194
    //DP4
    t1.w = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 3195
    //LT
    tb0 = lessThan(t1, t0.xxxx);
    //Instruction 3196
    //MOVC
    t0.x = (tb0.x) ? _LightShadowData.x : float(1.0);
    t0.y = (tb0.y) ? _LightShadowData.x : float(1.0);
    t0.z = (tb0.z) ? _LightShadowData.x : float(1.0);
    t0.w = (tb0.w) ? _LightShadowData.x : float(1.0);
    //Instruction 3197
    //DP4
    t16_3.x = dot(t0, vec4(0.250000, 0.250000, 0.250000, 0.250000));
    //Instruction 3198
    //DP3
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 3199
    //SAMPLE
    t10_0.x = texture(_LightTexture0, t0.xx).w;
    //Instruction 3200
    //MUL
    t16_0.x = t16_3.x * t10_0.x;
    //Instruction 3201
    //MUL
    t16_3.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 3202
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 3203
    //MAD
    t16_4.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3204
    //MUL
    t16_5.xyz = t16_4.yyy * vs_TEXCOORD3.xyz;
    //Instruction 3205
    //MAD
    t16_4.xyw = t16_4.xxx * vs_TEXCOORD2.xyz + t16_5.xyz;
    //Instruction 3206
    //MAD
    t16_4.xyz = t16_4.zzz * vs_TEXCOORD4.xyz + t16_4.xyw;
    //Instruction 3207
    //DP3
    t16_24 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 3208
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 3209
    //MUL
    t16_4.xyz = vec3(t16_24) * t16_4.xyz;
    //Instruction 3210
    //DP3
    t16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 3211
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 3212
    //MOV
    t16_5.x = vs_TEXCOORD2.w;
    //Instruction 3213
    //MOV
    t16_5.y = vs_TEXCOORD3.w;
    //Instruction 3214
    //MOV
    t16_5.z = vs_TEXCOORD4.w;
    //Instruction 3215
    //DP3
    t16_25 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 3216
    //RSQ
    t16_25 = inversesqrt(t16_25);
    //Instruction 3217
    //MUL
    t16_5.xyz = vec3(t16_25) * t16_5.xyz;
    //Instruction 3218
    //MAD
    t16_6.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_24) + t16_5.xyz;
    //Instruction 3219
    //DP3
    t16_24 = dot(t16_6.xyz, t16_6.xyz);
    //Instruction 3220
    //MAX
    t16_0.x = max(t16_24, 0.001000);
    //Instruction 3221
    //RSQ
    t16_24 = inversesqrt(t16_0.x);
    //Instruction 3222
    //MUL
    t16_6.xyz = vec3(t16_24) * t16_6.xyz;
    //Instruction 3223
    //DP3
    t16_24 = dot(t16_4.xyz, t16_6.xyz);
    //Instruction 3224
    //DP3
    t16_4.x = dot(t16_4.xyz, t16_5.xyz);
    //Instruction 3225
    //DP3
    t16_4.y = dot(t16_5.xyz, t16_6.xyz);
    //Instruction 3226
    //MAX
    t16_0.xy = max(t16_4.yx, vec2(0.0, 0.0));
    //Instruction 3227
    //MAX
    t16_14 = max(t16_24, 0.0);
    //Instruction 3228
    //LOG
    t16_24 = log2(t16_14);
    //Instruction 3229
    //ADD
    t16_4.x = (-_Glossiness) + 1.0;
    //Instruction 3230
    //ADD
    t16_11 = (-t16_4.x) + 1.0;
    //Instruction 3231
    //MAD
    t16_11 = t16_11 * 0.968000 + 0.030000;
    //Instruction 3232
    //LOG
    t16_11 = log2(t16_11);
    //Instruction 3233
    //DIV
    t16_4.y = 10.000000 / t16_11;
    //Instruction 3234
    //MUL
    t16_4.xz = t16_4.xy * t16_4.xy;
    //Instruction 3235
    //MAD
    t16_11 = t16_4.y * t16_4.y + 1.0;
    //Instruction 3236
    //MUL
    t16_24 = t16_24 * t16_4.z;
    //Instruction 3237
    //EXP
    t16_24 = exp2(t16_24);
    //Instruction 3238
    //MUL
    t16_24 = t16_24 * t16_11;
    //Instruction 3239
    //MUL
    t16_11 = t16_0.x * t16_0.x;
    //Instruction 3240
    //MAD
    t16_4.x = t16_11 * _Glossiness + t16_4.x;
    //Instruction 3241
    //MUL
    t16_4.x = t16_4.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 3242
    //MAD
    t16_0.x = t16_4.x * t16_0.x + 0.000100;
    //Instruction 3243
    //DIV
    t16_0.x = t16_24 / t16_0.x;
    //Instruction 3244
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3245
    //MAD
    t16_4.xyz = _Color.xyz * t10_1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 3246
    //MUL
    t16_1.xyz = t10_1.xyz * _Color.xyz;
    //Instruction 3247
    //MAD
    t16_4.xyz = vec3(_Metallic) * t16_4.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 3248
    //MUL
    t16_4.xyz = t16_0.xxx * t16_4.xyz;
    //Instruction 3249
    //MAD
    t16_24 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 3250
    //MAD
    t16_4.xyz = t16_1.xyz * vec3(t16_24) + t16_4.xyz;
    //Instruction 3251
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 3252
    //MUL
    SV_Target0.xyz = t16_0.yyy * t16_3.xyz;
    //Instruction 3253
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3254
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 3618
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3619
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3620
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3621
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3622
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 3623
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 3624
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 3625
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3626
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3627
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3628
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3629
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3630
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3631
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 3632
    //MUL
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 3633
    //MAD
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    //Instruction 3634
    //MAD
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    //Instruction 3635
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 3636
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 3637
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 3638
    //MAD
    t2.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 3639
    //ADD
    vs_TEXCOORD6.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 3640
    //MOV
    t1.w = t2.x;
    //Instruction 3641
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 3642
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3643
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3644
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3645
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3646
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3647
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3648
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 3649
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3650
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3651
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3652
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 3653
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 3654
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 3655
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 3656
    //MUL
    t16_4.xyz = t1.yzx * t0.zxy;
    //Instruction 3657
    //MAD
    t16_4.xyz = t0.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 3658
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 3659
    //MOV
    vs_TEXCOORD3.w = t2.y;
    //Instruction 3660
    //MOV
    t0.w = t2.z;
    //Instruction 3661
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 3662
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 3663
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 3664
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 3665
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 3666
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 3667
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 3668
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 3669
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 3670
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 3671
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 3672
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 3673
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 3674
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 3675
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 3676
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 3677
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 3678
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 3679
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 3680
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 3681
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec3 t10_0;
bvec4 tb0;
highp vec4 t1;
mediump vec3 t16_1;
lowp vec3 t10_1;
highp vec4 t2;
mediump vec3 t16_3;
mediump vec4 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp vec3 t7;
lowp float t10_7;
mediump float t16_11;
mediump float t16_14;
mediump float t16_24;
mediump float t16_25;
void main()
{
    //Instruction 3540
    //DP3
    t0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    //Instruction 3541
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 3542
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 3543
    //MUL
    t0.x = t0.x * 0.970000;
    //Instruction 3544
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(0.007812, 0.007812, 0.007812);
    //Instruction 3545
    //SAMPLE
    t1 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 3546
    //DP4
    t1.x = dot(t1, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 3547
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(-0.007812, -0.007812, 0.007812);
    //Instruction 3548
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 3549
    //DP4
    t1.y = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 3550
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(-0.007812, 0.007812, -0.007812);
    //Instruction 3551
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 3552
    //DP4
    t1.z = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 3553
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(0.007812, -0.007812, -0.007812);
    //Instruction 3554
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 3555
    //DP4
    t1.w = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 3556
    //LT
    tb0 = lessThan(t1, t0.xxxx);
    //Instruction 3557
    //MOVC
    t0.x = (tb0.x) ? _LightShadowData.x : float(1.0);
    t0.y = (tb0.y) ? _LightShadowData.x : float(1.0);
    t0.z = (tb0.z) ? _LightShadowData.x : float(1.0);
    t0.w = (tb0.w) ? _LightShadowData.x : float(1.0);
    //Instruction 3558
    //DP4
    t16_3.x = dot(t0, vec4(0.250000, 0.250000, 0.250000, 0.250000));
    //Instruction 3559
    //DP3
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 3560
    //SAMPLE
    t10_0.x = texture(_LightTextureB0, t0.xx).w;
    //Instruction 3561
    //SAMPLE
    t10_7 = texture(_LightTexture0, vs_TEXCOORD5.xyz).w;
    //Instruction 3562
    //MUL
    t16_0.x = t10_7 * t10_0.x;
    //Instruction 3563
    //MUL
    t16_0.x = t16_3.x * t16_0.x;
    //Instruction 3564
    //MUL
    t16_3.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 3565
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 3566
    //MAD
    t16_4.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3567
    //MUL
    t16_5.xyz = t16_4.yyy * vs_TEXCOORD3.xyz;
    //Instruction 3568
    //MAD
    t16_4.xyw = t16_4.xxx * vs_TEXCOORD2.xyz + t16_5.xyz;
    //Instruction 3569
    //MAD
    t16_4.xyz = t16_4.zzz * vs_TEXCOORD4.xyz + t16_4.xyw;
    //Instruction 3570
    //DP3
    t16_24 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 3571
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 3572
    //MUL
    t16_4.xyz = vec3(t16_24) * t16_4.xyz;
    //Instruction 3573
    //DP3
    t16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 3574
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 3575
    //MOV
    t16_5.x = vs_TEXCOORD2.w;
    //Instruction 3576
    //MOV
    t16_5.y = vs_TEXCOORD3.w;
    //Instruction 3577
    //MOV
    t16_5.z = vs_TEXCOORD4.w;
    //Instruction 3578
    //DP3
    t16_25 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 3579
    //RSQ
    t16_25 = inversesqrt(t16_25);
    //Instruction 3580
    //MUL
    t16_5.xyz = vec3(t16_25) * t16_5.xyz;
    //Instruction 3581
    //MAD
    t16_6.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_24) + t16_5.xyz;
    //Instruction 3582
    //DP3
    t16_24 = dot(t16_6.xyz, t16_6.xyz);
    //Instruction 3583
    //MAX
    t16_0.x = max(t16_24, 0.001000);
    //Instruction 3584
    //RSQ
    t16_24 = inversesqrt(t16_0.x);
    //Instruction 3585
    //MUL
    t16_6.xyz = vec3(t16_24) * t16_6.xyz;
    //Instruction 3586
    //DP3
    t16_24 = dot(t16_4.xyz, t16_6.xyz);
    //Instruction 3587
    //DP3
    t16_4.x = dot(t16_4.xyz, t16_5.xyz);
    //Instruction 3588
    //DP3
    t16_4.y = dot(t16_5.xyz, t16_6.xyz);
    //Instruction 3589
    //MAX
    t16_0.xy = max(t16_4.yx, vec2(0.0, 0.0));
    //Instruction 3590
    //MAX
    t16_14 = max(t16_24, 0.0);
    //Instruction 3591
    //LOG
    t16_24 = log2(t16_14);
    //Instruction 3592
    //ADD
    t16_4.x = (-_Glossiness) + 1.0;
    //Instruction 3593
    //ADD
    t16_11 = (-t16_4.x) + 1.0;
    //Instruction 3594
    //MAD
    t16_11 = t16_11 * 0.968000 + 0.030000;
    //Instruction 3595
    //LOG
    t16_11 = log2(t16_11);
    //Instruction 3596
    //DIV
    t16_4.y = 10.000000 / t16_11;
    //Instruction 3597
    //MUL
    t16_4.xz = t16_4.xy * t16_4.xy;
    //Instruction 3598
    //MAD
    t16_11 = t16_4.y * t16_4.y + 1.0;
    //Instruction 3599
    //MUL
    t16_24 = t16_24 * t16_4.z;
    //Instruction 3600
    //EXP
    t16_24 = exp2(t16_24);
    //Instruction 3601
    //MUL
    t16_24 = t16_24 * t16_11;
    //Instruction 3602
    //MUL
    t16_11 = t16_0.x * t16_0.x;
    //Instruction 3603
    //MAD
    t16_4.x = t16_11 * _Glossiness + t16_4.x;
    //Instruction 3604
    //MUL
    t16_4.x = t16_4.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 3605
    //MAD
    t16_0.x = t16_4.x * t16_0.x + 0.000100;
    //Instruction 3606
    //DIV
    t16_0.x = t16_24 / t16_0.x;
    //Instruction 3607
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3608
    //MAD
    t16_4.xyz = _Color.xyz * t10_1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 3609
    //MUL
    t16_1.xyz = t10_1.xyz * _Color.xyz;
    //Instruction 3610
    //MAD
    t16_4.xyz = vec3(_Metallic) * t16_4.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 3611
    //MUL
    t16_4.xyz = t16_0.xxx * t16_4.xyz;
    //Instruction 3612
    //MAD
    t16_24 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 3613
    //MAD
    t16_4.xyz = t16_1.xyz * vec3(t16_24) + t16_4.xyz;
    //Instruction 3614
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 3615
    //MUL
    SV_Target0.xyz = t16_0.yyy * t16_3.xyz;
    //Instruction 3616
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3617
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 3372
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3373
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3374
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3375
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3376
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 3377
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 3378
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 3379
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3380
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3381
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3382
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3383
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3384
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3385
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 3386
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 3387
    //MOV
    t1.w = t0.x;
    //Instruction 3388
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 3389
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 3390
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 3391
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 3392
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 3393
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 3394
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 3395
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3396
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3397
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3398
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3399
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3400
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3401
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 3402
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3403
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3404
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3405
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 3406
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 3407
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 3408
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 3409
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 3410
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 3411
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 3412
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 3413
    //MOV
    t2.w = t0.z;
    //Instruction 3414
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 3415
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 3416
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 3417
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 3418
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 3419
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 3420
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 3421
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 3422
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 3423
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 3424
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec3 t10_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_4;
mediump vec3 t16_6;
mediump float t16_11;
mediump float t16_16;
void main()
{
    //Instruction 3319
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 3320
    //MAD
    t16_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3321
    //MUL
    t16_2.xyz = t16_1.yyy * vs_TEXCOORD3.xyz;
    //Instruction 3322
    //MAD
    t16_1.xyw = t16_1.xxx * vs_TEXCOORD2.xyz + t16_2.xyz;
    //Instruction 3323
    //MAD
    t16_1.xyz = t16_1.zzz * vs_TEXCOORD4.xyz + t16_1.xyw;
    //Instruction 3324
    //DP3
    t16_16 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 3325
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 3326
    //MUL
    t16_1.xyz = vec3(t16_16) * t16_1.xyz;
    //Instruction 3327
    //DP3
    t16_16 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 3328
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 3329
    //MOV
    t16_2.x = vs_TEXCOORD2.w;
    //Instruction 3330
    //MOV
    t16_2.y = vs_TEXCOORD3.w;
    //Instruction 3331
    //MOV
    t16_2.z = vs_TEXCOORD4.w;
    //Instruction 3332
    //MAD
    t16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_16) + t16_2.xyz;
    //Instruction 3333
    //DP3
    t16_16 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 3334
    //MAX
    t16_0.x = max(t16_16, 0.001000);
    //Instruction 3335
    //RSQ
    t16_16 = inversesqrt(t16_0.x);
    //Instruction 3336
    //MUL
    t16_3.xyz = vec3(t16_16) * t16_3.xyz;
    //Instruction 3337
    //DP3
    t16_1.w = dot(t16_1.xyz, t16_3.xyz);
    //Instruction 3338
    //DP3
    t16_1.x = dot(t16_1.xyz, t16_2.xyz);
    //Instruction 3339
    //DP3
    t16_1.y = dot(t16_2.xyz, t16_3.xyz);
    //Instruction 3340
    //MAX
    t16_0.xyz = max(t16_1.yxw, vec3(0.0, 0.0, 0.0));
    //Instruction 3341
    //LOG
    t16_1.x = log2(t16_0.z);
    //Instruction 3342
    //ADD
    t16_6.x = (-_Glossiness) + 1.0;
    //Instruction 3343
    //ADD
    t16_11 = (-t16_6.x) + 1.0;
    //Instruction 3344
    //MAD
    t16_11 = t16_11 * 0.968000 + 0.030000;
    //Instruction 3345
    //LOG
    t16_11 = log2(t16_11);
    //Instruction 3346
    //DIV
    t16_6.y = 10.000000 / t16_11;
    //Instruction 3347
    //MUL
    t16_6.xz = t16_6.xy * t16_6.xy;
    //Instruction 3348
    //MAD
    t16_11 = t16_6.y * t16_6.y + 1.0;
    //Instruction 3349
    //MUL
    t16_1.x = t16_1.x * t16_6.z;
    //Instruction 3350
    //EXP
    t16_1.x = exp2(t16_1.x);
    //Instruction 3351
    //MUL
    t16_1.x = t16_1.x * t16_11;
    //Instruction 3352
    //MUL
    t16_11 = t16_0.x * t16_0.x;
    //Instruction 3353
    //MAD
    t16_6.x = t16_11 * _Glossiness + t16_6.x;
    //Instruction 3354
    //MUL
    t16_6.x = t16_6.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 3355
    //MAD
    t16_0.x = t16_6.x * t16_0.x + 0.000100;
    //Instruction 3356
    //DIV
    t16_0.x = t16_1.x / t16_0.x;
    //Instruction 3357
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3358
    //MAD
    t16_1.xyz = _Color.xyz * t10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 3359
    //MUL
    t16_4.xyz = t10_4.xyz * _Color.xyz;
    //Instruction 3360
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 3361
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    //Instruction 3362
    //MAD
    t16_16 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 3363
    //MAD
    t16_1.xyz = t16_4.xyz * vec3(t16_16) + t16_1.xyz;
    //Instruction 3364
    //SAMPLE_C_LZ
    vec3 txVec14 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec14, 0.0);
    //Instruction 3365
    //ADD
    t16_2.x = (-_LightShadowData.x) + 1.0;
    //Instruction 3366
    //MAD
    t16_16 = t16_16 * t16_2.x + _LightShadowData.x;
    //Instruction 3367
    //MUL
    t16_2.xyz = vec3(t16_16) * _LightColor0.xyz;
    //Instruction 3368
    //MUL
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 3369
    //MUL
    SV_Target0.xyz = t16_0.yyy * t16_1.xyz;
    //Instruction 3370
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3371
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec2 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 3737
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3738
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3739
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3740
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3741
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 3742
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 3743
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 3744
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3745
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3746
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3747
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3748
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3749
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3750
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 3751
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 3752
    //MOV
    t1.w = t0.x;
    //Instruction 3753
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 3754
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 3755
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 3756
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 3757
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 3758
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 3759
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 3760
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3761
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3762
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3763
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3764
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3765
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3766
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 3767
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3768
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3769
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3770
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 3771
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 3772
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 3773
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 3774
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 3775
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 3776
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 3777
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 3778
    //MOV
    t2.w = t0.z;
    //Instruction 3779
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 3780
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 3781
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 3782
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 3783
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 3784
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 3785
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 3786
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 3787
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 3788
    //DP4
    t2.x = dot(t16_0, t1);
    //Instruction 3789
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 3790
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 3791
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 3792
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 3793
    //DP4
    t2.y = dot(t16_0, t1);
    //Instruction 3794
    //MOV
    vs_TEXCOORD5.xy = t2.xy;
    //Instruction 3795
    //MUL
    t0 = t1.yyyy * unity_World2Shadow[0][1];
    //Instruction 3796
    //MAD
    t0 = unity_World2Shadow[0][0] * t1.xxxx + t0;
    //Instruction 3797
    //MAD
    t0 = unity_World2Shadow[0][2] * t1.zzzz + t0;
    //Instruction 3798
    //MAD
    t0 = unity_World2Shadow[0][3] * t1.wwww + t0;
    //Instruction 3799
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 3800
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec2 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec3 t10_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_4;
mediump vec3 t16_6;
mediump float t16_11;
mediump float t16_16;
void main()
{
    //Instruction 3682
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 3683
    //MAD
    t16_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3684
    //MUL
    t16_2.xyz = t16_1.yyy * vs_TEXCOORD3.xyz;
    //Instruction 3685
    //MAD
    t16_1.xyw = t16_1.xxx * vs_TEXCOORD2.xyz + t16_2.xyz;
    //Instruction 3686
    //MAD
    t16_1.xyz = t16_1.zzz * vs_TEXCOORD4.xyz + t16_1.xyw;
    //Instruction 3687
    //DP3
    t16_16 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 3688
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 3689
    //MUL
    t16_1.xyz = vec3(t16_16) * t16_1.xyz;
    //Instruction 3690
    //DP3
    t16_16 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 3691
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 3692
    //MOV
    t16_2.x = vs_TEXCOORD2.w;
    //Instruction 3693
    //MOV
    t16_2.y = vs_TEXCOORD3.w;
    //Instruction 3694
    //MOV
    t16_2.z = vs_TEXCOORD4.w;
    //Instruction 3695
    //MAD
    t16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_16) + t16_2.xyz;
    //Instruction 3696
    //DP3
    t16_16 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 3697
    //MAX
    t16_0.x = max(t16_16, 0.001000);
    //Instruction 3698
    //RSQ
    t16_16 = inversesqrt(t16_0.x);
    //Instruction 3699
    //MUL
    t16_3.xyz = vec3(t16_16) * t16_3.xyz;
    //Instruction 3700
    //DP3
    t16_1.w = dot(t16_1.xyz, t16_3.xyz);
    //Instruction 3701
    //DP3
    t16_1.x = dot(t16_1.xyz, t16_2.xyz);
    //Instruction 3702
    //DP3
    t16_1.y = dot(t16_2.xyz, t16_3.xyz);
    //Instruction 3703
    //MAX
    t16_0.xyz = max(t16_1.yxw, vec3(0.0, 0.0, 0.0));
    //Instruction 3704
    //LOG
    t16_1.x = log2(t16_0.z);
    //Instruction 3705
    //ADD
    t16_6.x = (-_Glossiness) + 1.0;
    //Instruction 3706
    //ADD
    t16_11 = (-t16_6.x) + 1.0;
    //Instruction 3707
    //MAD
    t16_11 = t16_11 * 0.968000 + 0.030000;
    //Instruction 3708
    //LOG
    t16_11 = log2(t16_11);
    //Instruction 3709
    //DIV
    t16_6.y = 10.000000 / t16_11;
    //Instruction 3710
    //MUL
    t16_6.xz = t16_6.xy * t16_6.xy;
    //Instruction 3711
    //MAD
    t16_11 = t16_6.y * t16_6.y + 1.0;
    //Instruction 3712
    //MUL
    t16_1.x = t16_1.x * t16_6.z;
    //Instruction 3713
    //EXP
    t16_1.x = exp2(t16_1.x);
    //Instruction 3714
    //MUL
    t16_1.x = t16_1.x * t16_11;
    //Instruction 3715
    //MUL
    t16_11 = t16_0.x * t16_0.x;
    //Instruction 3716
    //MAD
    t16_6.x = t16_11 * _Glossiness + t16_6.x;
    //Instruction 3717
    //MUL
    t16_6.x = t16_6.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 3718
    //MAD
    t16_0.x = t16_6.x * t16_0.x + 0.000100;
    //Instruction 3719
    //DIV
    t16_0.x = t16_1.x / t16_0.x;
    //Instruction 3720
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3721
    //MAD
    t16_1.xyz = _Color.xyz * t10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 3722
    //MUL
    t16_4.xyz = t10_4.xyz * _Color.xyz;
    //Instruction 3723
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 3724
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    //Instruction 3725
    //MAD
    t16_16 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 3726
    //MAD
    t16_1.xyz = t16_4.xyz * vec3(t16_16) + t16_1.xyz;
    //Instruction 3727
    //SAMPLE_C_LZ
    vec3 txVec13 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec13, 0.0);
    //Instruction 3728
    //ADD
    t16_2.x = (-_LightShadowData.x) + 1.0;
    //Instruction 3729
    //MAD
    t16_16 = t16_16 * t16_2.x + _LightShadowData.x;
    //Instruction 3730
    //SAMPLE
    t10_0.x = texture(_LightTexture0, vs_TEXCOORD5.xy).w;
    //Instruction 3731
    //MUL
    t16_0.x = t16_16 * t10_0.x;
    //Instruction 3732
    //MUL
    t16_2.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 3733
    //MUL
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 3734
    //MUL
    SV_Target0.xyz = t16_0.yyy * t16_1.xyz;
    //Instruction 3735
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3736
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 3483
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3484
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3485
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3486
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3487
    //MOV
    gl_Position = t0;
    //Instruction 3488
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 3489
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 3490
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 3491
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 3492
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 3493
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 3494
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3495
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3496
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3497
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3498
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3499
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3500
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 3501
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 3502
    //MOV
    t1.w = t0.x;
    //Instruction 3503
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 3504
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 3505
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 3506
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 3507
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 3508
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 3509
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 3510
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3511
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3512
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3513
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3514
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3515
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3516
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 3517
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3518
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3519
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3520
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 3521
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 3522
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 3523
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 3524
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 3525
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 3526
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 3527
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 3528
    //MOV
    t2.w = t0.z;
    //Instruction 3529
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 3530
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 3531
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 3532
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 3533
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 3534
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 3535
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 3536
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 3537
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 3538
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 3539
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 3540
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 3541
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 3542
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 3543
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 3544
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 3545
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 3546
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 3547
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 3548
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 3549
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec3 t0;
mediump vec3 t16_0;
lowp vec3 t10_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_4;
mediump vec3 t16_6;
mediump float t16_11;
mediump float t16_16;
mediump float t16_17;
void main()
{
    //Instruction 3425
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 3426
    //MAD
    t16_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3427
    //MUL
    t16_2.xyz = t16_1.yyy * vs_TEXCOORD3.xyz;
    //Instruction 3428
    //MAD
    t16_1.xyw = t16_1.xxx * vs_TEXCOORD2.xyz + t16_2.xyz;
    //Instruction 3429
    //MAD
    t16_1.xyz = t16_1.zzz * vs_TEXCOORD4.xyz + t16_1.xyw;
    //Instruction 3430
    //DP3
    t16_16 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 3431
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 3432
    //MUL
    t16_1.xyz = vec3(t16_16) * t16_1.xyz;
    //Instruction 3433
    //DP3
    t16_16 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 3434
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 3435
    //MOV
    t16_2.x = vs_TEXCOORD2.w;
    //Instruction 3436
    //MOV
    t16_2.y = vs_TEXCOORD3.w;
    //Instruction 3437
    //MOV
    t16_2.z = vs_TEXCOORD4.w;
    //Instruction 3438
    //DP3
    t16_17 = dot(t16_2.xyz, t16_2.xyz);
    //Instruction 3439
    //RSQ
    t16_17 = inversesqrt(t16_17);
    //Instruction 3440
    //MUL
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    //Instruction 3441
    //MAD
    t16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_16) + t16_2.xyz;
    //Instruction 3442
    //DP3
    t16_16 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 3443
    //MAX
    t16_0.x = max(t16_16, 0.001000);
    //Instruction 3444
    //RSQ
    t16_16 = inversesqrt(t16_0.x);
    //Instruction 3445
    //MUL
    t16_3.xyz = vec3(t16_16) * t16_3.xyz;
    //Instruction 3446
    //DP3
    t16_1.w = dot(t16_1.xyz, t16_3.xyz);
    //Instruction 3447
    //DP3
    t16_1.x = dot(t16_1.xyz, t16_2.xyz);
    //Instruction 3448
    //DP3
    t16_1.y = dot(t16_2.xyz, t16_3.xyz);
    //Instruction 3449
    //MAX
    t16_0.xyz = max(t16_1.yxw, vec3(0.0, 0.0, 0.0));
    //Instruction 3450
    //LOG
    t16_1.x = log2(t16_0.z);
    //Instruction 3451
    //ADD
    t16_6.x = (-_Glossiness) + 1.0;
    //Instruction 3452
    //ADD
    t16_11 = (-t16_6.x) + 1.0;
    //Instruction 3453
    //MAD
    t16_11 = t16_11 * 0.968000 + 0.030000;
    //Instruction 3454
    //LOG
    t16_11 = log2(t16_11);
    //Instruction 3455
    //DIV
    t16_6.y = 10.000000 / t16_11;
    //Instruction 3456
    //MUL
    t16_6.xz = t16_6.xy * t16_6.xy;
    //Instruction 3457
    //MAD
    t16_11 = t16_6.y * t16_6.y + 1.0;
    //Instruction 3458
    //MUL
    t16_1.x = t16_1.x * t16_6.z;
    //Instruction 3459
    //EXP
    t16_1.x = exp2(t16_1.x);
    //Instruction 3460
    //MUL
    t16_1.x = t16_1.x * t16_11;
    //Instruction 3461
    //MUL
    t16_11 = t16_0.x * t16_0.x;
    //Instruction 3462
    //MAD
    t16_6.x = t16_11 * _Glossiness + t16_6.x;
    //Instruction 3463
    //MUL
    t16_6.x = t16_6.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 3464
    //MAD
    t16_0.x = t16_6.x * t16_0.x + 0.000100;
    //Instruction 3465
    //DIV
    t16_0.x = t16_1.x / t16_0.x;
    //Instruction 3466
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3467
    //MAD
    t16_1.xyz = _Color.xyz * t10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 3468
    //MUL
    t16_4.xyz = t10_4.xyz * _Color.xyz;
    //Instruction 3469
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 3470
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    //Instruction 3471
    //MAD
    t16_16 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 3472
    //MAD
    t16_1.xyz = t16_4.xyz * vec3(t16_16) + t16_1.xyz;
    //Instruction 3473
    //DP3
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 3474
    //SAMPLE
    t10_0.x = texture(_LightTexture0, t0.xx).w;
    //Instruction 3475
    //MUL
    t16_2.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 3476
    //MUL
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 3477
    //MUL
    t16_1.xyz = t16_0.yyy * t16_1.xyz;
    //Instruction 3478
    //MOV
    t0.x = vs_TEXCOORD7;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 3479
    //MUL
    t0.xyz = t16_1.xyz * t0.xxx;
    //Instruction 3480
    //MOV
    SV_Target0.xyz = t0.xyz;
    //Instruction 3481
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3482
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 3853
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3854
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3855
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3856
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3857
    //MOV
    gl_Position = t0;
    //Instruction 3858
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 3859
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 3860
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 3861
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 3862
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 3863
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 3864
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3865
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3866
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3867
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3868
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3869
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3870
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 3871
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 3872
    //MOV
    t1.w = t0.x;
    //Instruction 3873
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 3874
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 3875
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 3876
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 3877
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 3878
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 3879
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 3880
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3881
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3882
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3883
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3884
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3885
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3886
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 3887
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3888
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3889
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3890
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 3891
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 3892
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 3893
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 3894
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 3895
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 3896
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 3897
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 3898
    //MOV
    t2.w = t0.z;
    //Instruction 3899
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 3900
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec3 t0;
mediump vec3 t16_0;
lowp vec3 t10_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_4;
mediump vec3 t16_6;
mediump float t16_11;
mediump float t16_16;
void main()
{
    //Instruction 3801
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 3802
    //MAD
    t16_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3803
    //MUL
    t16_2.xyz = t16_1.yyy * vs_TEXCOORD3.xyz;
    //Instruction 3804
    //MAD
    t16_1.xyw = t16_1.xxx * vs_TEXCOORD2.xyz + t16_2.xyz;
    //Instruction 3805
    //MAD
    t16_1.xyz = t16_1.zzz * vs_TEXCOORD4.xyz + t16_1.xyw;
    //Instruction 3806
    //DP3
    t16_16 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 3807
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 3808
    //MUL
    t16_1.xyz = vec3(t16_16) * t16_1.xyz;
    //Instruction 3809
    //DP3
    t16_16 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 3810
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 3811
    //MOV
    t16_2.x = vs_TEXCOORD2.w;
    //Instruction 3812
    //MOV
    t16_2.y = vs_TEXCOORD3.w;
    //Instruction 3813
    //MOV
    t16_2.z = vs_TEXCOORD4.w;
    //Instruction 3814
    //MAD
    t16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_16) + t16_2.xyz;
    //Instruction 3815
    //DP3
    t16_16 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 3816
    //MAX
    t16_0.x = max(t16_16, 0.001000);
    //Instruction 3817
    //RSQ
    t16_16 = inversesqrt(t16_0.x);
    //Instruction 3818
    //MUL
    t16_3.xyz = vec3(t16_16) * t16_3.xyz;
    //Instruction 3819
    //DP3
    t16_1.w = dot(t16_1.xyz, t16_3.xyz);
    //Instruction 3820
    //DP3
    t16_1.x = dot(t16_1.xyz, t16_2.xyz);
    //Instruction 3821
    //DP3
    t16_1.y = dot(t16_2.xyz, t16_3.xyz);
    //Instruction 3822
    //MAX
    t16_0.xyz = max(t16_1.yxw, vec3(0.0, 0.0, 0.0));
    //Instruction 3823
    //LOG
    t16_1.x = log2(t16_0.z);
    //Instruction 3824
    //ADD
    t16_6.x = (-_Glossiness) + 1.0;
    //Instruction 3825
    //ADD
    t16_11 = (-t16_6.x) + 1.0;
    //Instruction 3826
    //MAD
    t16_11 = t16_11 * 0.968000 + 0.030000;
    //Instruction 3827
    //LOG
    t16_11 = log2(t16_11);
    //Instruction 3828
    //DIV
    t16_6.y = 10.000000 / t16_11;
    //Instruction 3829
    //MUL
    t16_6.xz = t16_6.xy * t16_6.xy;
    //Instruction 3830
    //MAD
    t16_11 = t16_6.y * t16_6.y + 1.0;
    //Instruction 3831
    //MUL
    t16_1.x = t16_1.x * t16_6.z;
    //Instruction 3832
    //EXP
    t16_1.x = exp2(t16_1.x);
    //Instruction 3833
    //MUL
    t16_1.x = t16_1.x * t16_11;
    //Instruction 3834
    //MUL
    t16_11 = t16_0.x * t16_0.x;
    //Instruction 3835
    //MAD
    t16_6.x = t16_11 * _Glossiness + t16_6.x;
    //Instruction 3836
    //MUL
    t16_6.x = t16_6.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 3837
    //MAD
    t16_0.x = t16_6.x * t16_0.x + 0.000100;
    //Instruction 3838
    //DIV
    t16_0.x = t16_1.x / t16_0.x;
    //Instruction 3839
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3840
    //MAD
    t16_1.xyz = _Color.xyz * t10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 3841
    //MUL
    t16_4.xyz = t10_4.xyz * _Color.xyz;
    //Instruction 3842
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 3843
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    //Instruction 3844
    //MAD
    t16_16 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 3845
    //MAD
    t16_1.xyz = t16_4.xyz * vec3(t16_16) + t16_1.xyz;
    //Instruction 3846
    //MUL
    t16_1.xyz = t16_1.xyz * _LightColor0.xyz;
    //Instruction 3847
    //MUL
    t16_1.xyz = t16_0.yyy * t16_1.xyz;
    //Instruction 3848
    //MOV
    t0.x = vs_TEXCOORD7;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 3849
    //MUL
    t0.xyz = t16_1.xyz * t0.xxx;
    //Instruction 3850
    //MOV
    SV_Target0.xyz = t0.xyz;
    //Instruction 3851
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3852
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 3615
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3616
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3617
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3618
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3619
    //MOV
    gl_Position = t0;
    //Instruction 3620
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 3621
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 3622
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 3623
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 3624
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 3625
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 3626
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3627
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3628
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3629
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3630
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3631
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3632
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 3633
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 3634
    //MOV
    t1.w = t0.x;
    //Instruction 3635
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 3636
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 3637
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 3638
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 3639
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 3640
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 3641
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 3642
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3643
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3644
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3645
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3646
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3647
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3648
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 3649
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3650
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3651
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3652
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 3653
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 3654
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 3655
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 3656
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 3657
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 3658
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 3659
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 3660
    //MOV
    t2.w = t0.z;
    //Instruction 3661
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 3662
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 3663
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 3664
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 3665
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 3666
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 3667
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 3668
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 3669
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 3670
    //DP4
    t0.x = dot(t16_0, t1);
    //Instruction 3671
    //MOV
    t16_2.x = _LightMatrix0[0].y;
    //Instruction 3672
    //MOV
    t16_2.y = _LightMatrix0[1].y;
    //Instruction 3673
    //MOV
    t16_2.z = _LightMatrix0[2].y;
    //Instruction 3674
    //MOV
    t16_2.w = _LightMatrix0[3].y;
    //Instruction 3675
    //DP4
    t0.y = dot(t16_2, t1);
    //Instruction 3676
    //MOV
    t16_2.x = _LightMatrix0[0].z;
    //Instruction 3677
    //MOV
    t16_2.y = _LightMatrix0[1].z;
    //Instruction 3678
    //MOV
    t16_2.z = _LightMatrix0[2].z;
    //Instruction 3679
    //MOV
    t16_2.w = _LightMatrix0[3].z;
    //Instruction 3680
    //DP4
    t0.z = dot(t16_2, t1);
    //Instruction 3681
    //MOV
    t16_2.x = _LightMatrix0[0].w;
    //Instruction 3682
    //MOV
    t16_2.y = _LightMatrix0[1].w;
    //Instruction 3683
    //MOV
    t16_2.z = _LightMatrix0[2].w;
    //Instruction 3684
    //MOV
    t16_2.w = _LightMatrix0[3].w;
    //Instruction 3685
    //DP4
    t0.w = dot(t16_2, t1);
    //Instruction 3686
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 3687
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec3 t0;
mediump vec3 t16_0;
lowp vec3 t10_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_4;
lowp float t10_5;
mediump vec3 t16_7;
bool tb12;
mediump float t16_13;
mediump float t16_19;
mediump float t16_20;
void main()
{
    //Instruction 3550
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 3551
    //MAD
    t16_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3552
    //MUL
    t16_2.xyz = t16_1.yyy * vs_TEXCOORD3.xyz;
    //Instruction 3553
    //MAD
    t16_1.xyw = t16_1.xxx * vs_TEXCOORD2.xyz + t16_2.xyz;
    //Instruction 3554
    //MAD
    t16_1.xyz = t16_1.zzz * vs_TEXCOORD4.xyz + t16_1.xyw;
    //Instruction 3555
    //DP3
    t16_19 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 3556
    //RSQ
    t16_19 = inversesqrt(t16_19);
    //Instruction 3557
    //MUL
    t16_1.xyz = vec3(t16_19) * t16_1.xyz;
    //Instruction 3558
    //DP3
    t16_19 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 3559
    //RSQ
    t16_19 = inversesqrt(t16_19);
    //Instruction 3560
    //MOV
    t16_2.x = vs_TEXCOORD2.w;
    //Instruction 3561
    //MOV
    t16_2.y = vs_TEXCOORD3.w;
    //Instruction 3562
    //MOV
    t16_2.z = vs_TEXCOORD4.w;
    //Instruction 3563
    //DP3
    t16_20 = dot(t16_2.xyz, t16_2.xyz);
    //Instruction 3564
    //RSQ
    t16_20 = inversesqrt(t16_20);
    //Instruction 3565
    //MUL
    t16_2.xyz = vec3(t16_20) * t16_2.xyz;
    //Instruction 3566
    //MAD
    t16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_19) + t16_2.xyz;
    //Instruction 3567
    //DP3
    t16_19 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 3568
    //MAX
    t16_0.x = max(t16_19, 0.001000);
    //Instruction 3569
    //RSQ
    t16_19 = inversesqrt(t16_0.x);
    //Instruction 3570
    //MUL
    t16_3.xyz = vec3(t16_19) * t16_3.xyz;
    //Instruction 3571
    //DP3
    t16_1.w = dot(t16_1.xyz, t16_3.xyz);
    //Instruction 3572
    //DP3
    t16_1.x = dot(t16_1.xyz, t16_2.xyz);
    //Instruction 3573
    //DP3
    t16_1.y = dot(t16_2.xyz, t16_3.xyz);
    //Instruction 3574
    //MAX
    t16_0.xyz = max(t16_1.yxw, vec3(0.0, 0.0, 0.0));
    //Instruction 3575
    //LOG
    t16_1.x = log2(t16_0.z);
    //Instruction 3576
    //ADD
    t16_7.x = (-_Glossiness) + 1.0;
    //Instruction 3577
    //ADD
    t16_13 = (-t16_7.x) + 1.0;
    //Instruction 3578
    //MAD
    t16_13 = t16_13 * 0.968000 + 0.030000;
    //Instruction 3579
    //LOG
    t16_13 = log2(t16_13);
    //Instruction 3580
    //DIV
    t16_7.y = 10.000000 / t16_13;
    //Instruction 3581
    //MUL
    t16_7.xz = t16_7.xy * t16_7.xy;
    //Instruction 3582
    //MAD
    t16_13 = t16_7.y * t16_7.y + 1.0;
    //Instruction 3583
    //MUL
    t16_1.x = t16_1.x * t16_7.z;
    //Instruction 3584
    //EXP
    t16_1.x = exp2(t16_1.x);
    //Instruction 3585
    //MUL
    t16_1.x = t16_1.x * t16_13;
    //Instruction 3586
    //MUL
    t16_13 = t16_0.x * t16_0.x;
    //Instruction 3587
    //MAD
    t16_7.x = t16_13 * _Glossiness + t16_7.x;
    //Instruction 3588
    //MUL
    t16_7.x = t16_7.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 3589
    //MAD
    t16_0.x = t16_7.x * t16_0.x + 0.000100;
    //Instruction 3590
    //DIV
    t16_0.x = t16_1.x / t16_0.x;
    //Instruction 3591
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3592
    //MAD
    t16_1.xyz = _Color.xyz * t10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 3593
    //MUL
    t16_4.xyz = t10_4.xyz * _Color.xyz;
    //Instruction 3594
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 3595
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    //Instruction 3596
    //MAD
    t16_19 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 3597
    //MAD
    t16_1.xyz = t16_4.xyz * vec3(t16_19) + t16_1.xyz;
    //Instruction 3598
    //DIV
    t16_2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    //Instruction 3599
    //ADD
    t16_2.xy = t16_2.xy + vec2(0.500000, 0.500000);
    //Instruction 3600
    //SAMPLE
    t10_0.x = texture(_LightTexture0, t16_2.xy).w;
    //Instruction 3601
    //LT
    tb12 = 0.0<vs_TEXCOORD5.z;
    //Instruction 3602
    //MOVC
    t10_5 = (tb12) ? 1.0 : 0.0;
    //Instruction 3603
    //MUL
    t10_5 = t10_0.x * t10_5;
    //Instruction 3604
    //DP3
    t16_0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 3605
    //SAMPLE
    t10_0.x = texture(_LightTextureB0, t16_0.xx).w;
    //Instruction 3606
    //MUL
    t10_5 = t10_0.x * t10_5;
    //Instruction 3607
    //MUL
    t16_2.xyz = vec3(t10_5) * _LightColor0.xyz;
    //Instruction 3608
    //MUL
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 3609
    //MUL
    t16_1.xyz = t16_0.yyy * t16_1.xyz;
    //Instruction 3610
    //MOV
    t0.x = vs_TEXCOORD7;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 3611
    //MUL
    t0.xyz = t16_1.xyz * t0.xxx;
    //Instruction 3612
    //MOV
    SV_Target0.xyz = t0.xyz;
    //Instruction 3613
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3614
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 3961
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3962
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3963
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3964
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3965
    //MOV
    gl_Position = t0;
    //Instruction 3966
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 3967
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 3968
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 3969
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 3970
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 3971
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 3972
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3973
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3974
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3975
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3976
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3977
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3978
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 3979
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 3980
    //MOV
    t1.w = t0.x;
    //Instruction 3981
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 3982
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 3983
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 3984
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 3985
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 3986
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 3987
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 3988
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3989
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3990
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3991
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3992
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3993
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3994
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 3995
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3996
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3997
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3998
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 3999
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 4000
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 4001
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 4002
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 4003
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 4004
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 4005
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 4006
    //MOV
    t2.w = t0.z;
    //Instruction 4007
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 4008
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 4009
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 4010
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 4011
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 4012
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 4013
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 4014
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 4015
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 4016
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 4017
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 4018
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 4019
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 4020
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 4021
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 4022
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 4023
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 4024
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 4025
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 4026
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 4027
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec3 t0;
mediump vec3 t16_0;
lowp vec3 t10_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_4;
mediump vec3 t16_6;
lowp float t10_10;
mediump float t16_11;
mediump float t16_16;
mediump float t16_17;
void main()
{
    //Instruction 3901
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 3902
    //MAD
    t16_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3903
    //MUL
    t16_2.xyz = t16_1.yyy * vs_TEXCOORD3.xyz;
    //Instruction 3904
    //MAD
    t16_1.xyw = t16_1.xxx * vs_TEXCOORD2.xyz + t16_2.xyz;
    //Instruction 3905
    //MAD
    t16_1.xyz = t16_1.zzz * vs_TEXCOORD4.xyz + t16_1.xyw;
    //Instruction 3906
    //DP3
    t16_16 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 3907
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 3908
    //MUL
    t16_1.xyz = vec3(t16_16) * t16_1.xyz;
    //Instruction 3909
    //DP3
    t16_16 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 3910
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 3911
    //MOV
    t16_2.x = vs_TEXCOORD2.w;
    //Instruction 3912
    //MOV
    t16_2.y = vs_TEXCOORD3.w;
    //Instruction 3913
    //MOV
    t16_2.z = vs_TEXCOORD4.w;
    //Instruction 3914
    //DP3
    t16_17 = dot(t16_2.xyz, t16_2.xyz);
    //Instruction 3915
    //RSQ
    t16_17 = inversesqrt(t16_17);
    //Instruction 3916
    //MUL
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    //Instruction 3917
    //MAD
    t16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_16) + t16_2.xyz;
    //Instruction 3918
    //DP3
    t16_16 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 3919
    //MAX
    t16_0.x = max(t16_16, 0.001000);
    //Instruction 3920
    //RSQ
    t16_16 = inversesqrt(t16_0.x);
    //Instruction 3921
    //MUL
    t16_3.xyz = vec3(t16_16) * t16_3.xyz;
    //Instruction 3922
    //DP3
    t16_1.w = dot(t16_1.xyz, t16_3.xyz);
    //Instruction 3923
    //DP3
    t16_1.x = dot(t16_1.xyz, t16_2.xyz);
    //Instruction 3924
    //DP3
    t16_1.y = dot(t16_2.xyz, t16_3.xyz);
    //Instruction 3925
    //MAX
    t16_0.xyz = max(t16_1.yxw, vec3(0.0, 0.0, 0.0));
    //Instruction 3926
    //LOG
    t16_1.x = log2(t16_0.z);
    //Instruction 3927
    //ADD
    t16_6.x = (-_Glossiness) + 1.0;
    //Instruction 3928
    //ADD
    t16_11 = (-t16_6.x) + 1.0;
    //Instruction 3929
    //MAD
    t16_11 = t16_11 * 0.968000 + 0.030000;
    //Instruction 3930
    //LOG
    t16_11 = log2(t16_11);
    //Instruction 3931
    //DIV
    t16_6.y = 10.000000 / t16_11;
    //Instruction 3932
    //MUL
    t16_6.xz = t16_6.xy * t16_6.xy;
    //Instruction 3933
    //MAD
    t16_11 = t16_6.y * t16_6.y + 1.0;
    //Instruction 3934
    //MUL
    t16_1.x = t16_1.x * t16_6.z;
    //Instruction 3935
    //EXP
    t16_1.x = exp2(t16_1.x);
    //Instruction 3936
    //MUL
    t16_1.x = t16_1.x * t16_11;
    //Instruction 3937
    //MUL
    t16_11 = t16_0.x * t16_0.x;
    //Instruction 3938
    //MAD
    t16_6.x = t16_11 * _Glossiness + t16_6.x;
    //Instruction 3939
    //MUL
    t16_6.x = t16_6.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 3940
    //MAD
    t16_0.x = t16_6.x * t16_0.x + 0.000100;
    //Instruction 3941
    //DIV
    t16_0.x = t16_1.x / t16_0.x;
    //Instruction 3942
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3943
    //MAD
    t16_1.xyz = _Color.xyz * t10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 3944
    //MUL
    t16_4.xyz = t10_4.xyz * _Color.xyz;
    //Instruction 3945
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 3946
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    //Instruction 3947
    //MAD
    t16_16 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 3948
    //MAD
    t16_1.xyz = t16_4.xyz * vec3(t16_16) + t16_1.xyz;
    //Instruction 3949
    //DP3
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 3950
    //SAMPLE
    t10_0.x = texture(_LightTextureB0, t0.xx).w;
    //Instruction 3951
    //SAMPLE
    t10_10 = texture(_LightTexture0, vs_TEXCOORD5.xyz).w;
    //Instruction 3952
    //MUL
    t16_0.x = t10_10 * t10_0.x;
    //Instruction 3953
    //MUL
    t16_2.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 3954
    //MUL
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 3955
    //MUL
    t16_1.xyz = t16_0.yyy * t16_1.xyz;
    //Instruction 3956
    //MOV
    t0.x = vs_TEXCOORD7;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 3957
    //MUL
    t0.xyz = t16_1.xyz * t0.xxx;
    //Instruction 3958
    //MOV
    SV_Target0.xyz = t0.xyz;
    //Instruction 3959
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3960
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp float vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 3742
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3743
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3744
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3745
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3746
    //MOV
    gl_Position = t0;
    //Instruction 3747
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 3748
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 3749
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 3750
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 3751
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 3752
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 3753
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3754
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3755
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3756
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3757
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3758
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3759
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 3760
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 3761
    //MOV
    t1.w = t0.x;
    //Instruction 3762
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 3763
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 3764
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 3765
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 3766
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 3767
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 3768
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 3769
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3770
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3771
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3772
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3773
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3774
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3775
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 3776
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3777
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3778
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3779
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 3780
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 3781
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 3782
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 3783
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 3784
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 3785
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 3786
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 3787
    //MOV
    t2.w = t0.z;
    //Instruction 3788
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 3789
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 3790
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 3791
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 3792
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 3793
    //MOV
    t16_1.x = _LightMatrix0[0].x;
    //Instruction 3794
    //MOV
    t16_1.y = _LightMatrix0[1].x;
    //Instruction 3795
    //MOV
    t16_1.z = _LightMatrix0[2].x;
    //Instruction 3796
    //MOV
    t16_1.w = _LightMatrix0[3].x;
    //Instruction 3797
    //DP4
    vs_TEXCOORD5.x = dot(t16_1, t0);
    //Instruction 3798
    //MOV
    t16_1.x = _LightMatrix0[0].y;
    //Instruction 3799
    //MOV
    t16_1.y = _LightMatrix0[1].y;
    //Instruction 3800
    //MOV
    t16_1.z = _LightMatrix0[2].y;
    //Instruction 3801
    //MOV
    t16_1.w = _LightMatrix0[3].y;
    //Instruction 3802
    //DP4
    vs_TEXCOORD5.y = dot(t16_1, t0);
    //Instruction 3803
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
in highp float vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec3 t0;
mediump vec3 t16_0;
lowp vec3 t10_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_4;
mediump vec3 t16_6;
mediump float t16_11;
mediump float t16_16;
void main()
{
    //Instruction 3688
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 3689
    //MAD
    t16_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3690
    //MUL
    t16_2.xyz = t16_1.yyy * vs_TEXCOORD3.xyz;
    //Instruction 3691
    //MAD
    t16_1.xyw = t16_1.xxx * vs_TEXCOORD2.xyz + t16_2.xyz;
    //Instruction 3692
    //MAD
    t16_1.xyz = t16_1.zzz * vs_TEXCOORD4.xyz + t16_1.xyw;
    //Instruction 3693
    //DP3
    t16_16 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 3694
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 3695
    //MUL
    t16_1.xyz = vec3(t16_16) * t16_1.xyz;
    //Instruction 3696
    //DP3
    t16_16 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 3697
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 3698
    //MOV
    t16_2.x = vs_TEXCOORD2.w;
    //Instruction 3699
    //MOV
    t16_2.y = vs_TEXCOORD3.w;
    //Instruction 3700
    //MOV
    t16_2.z = vs_TEXCOORD4.w;
    //Instruction 3701
    //MAD
    t16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_16) + t16_2.xyz;
    //Instruction 3702
    //DP3
    t16_16 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 3703
    //MAX
    t16_0.x = max(t16_16, 0.001000);
    //Instruction 3704
    //RSQ
    t16_16 = inversesqrt(t16_0.x);
    //Instruction 3705
    //MUL
    t16_3.xyz = vec3(t16_16) * t16_3.xyz;
    //Instruction 3706
    //DP3
    t16_1.w = dot(t16_1.xyz, t16_3.xyz);
    //Instruction 3707
    //DP3
    t16_1.x = dot(t16_1.xyz, t16_2.xyz);
    //Instruction 3708
    //DP3
    t16_1.y = dot(t16_2.xyz, t16_3.xyz);
    //Instruction 3709
    //MAX
    t16_0.xyz = max(t16_1.yxw, vec3(0.0, 0.0, 0.0));
    //Instruction 3710
    //LOG
    t16_1.x = log2(t16_0.z);
    //Instruction 3711
    //ADD
    t16_6.x = (-_Glossiness) + 1.0;
    //Instruction 3712
    //ADD
    t16_11 = (-t16_6.x) + 1.0;
    //Instruction 3713
    //MAD
    t16_11 = t16_11 * 0.968000 + 0.030000;
    //Instruction 3714
    //LOG
    t16_11 = log2(t16_11);
    //Instruction 3715
    //DIV
    t16_6.y = 10.000000 / t16_11;
    //Instruction 3716
    //MUL
    t16_6.xz = t16_6.xy * t16_6.xy;
    //Instruction 3717
    //MAD
    t16_11 = t16_6.y * t16_6.y + 1.0;
    //Instruction 3718
    //MUL
    t16_1.x = t16_1.x * t16_6.z;
    //Instruction 3719
    //EXP
    t16_1.x = exp2(t16_1.x);
    //Instruction 3720
    //MUL
    t16_1.x = t16_1.x * t16_11;
    //Instruction 3721
    //MUL
    t16_11 = t16_0.x * t16_0.x;
    //Instruction 3722
    //MAD
    t16_6.x = t16_11 * _Glossiness + t16_6.x;
    //Instruction 3723
    //MUL
    t16_6.x = t16_6.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 3724
    //MAD
    t16_0.x = t16_6.x * t16_0.x + 0.000100;
    //Instruction 3725
    //DIV
    t16_0.x = t16_1.x / t16_0.x;
    //Instruction 3726
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3727
    //MAD
    t16_1.xyz = _Color.xyz * t10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 3728
    //MUL
    t16_4.xyz = t10_4.xyz * _Color.xyz;
    //Instruction 3729
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 3730
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    //Instruction 3731
    //MAD
    t16_16 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 3732
    //MAD
    t16_1.xyz = t16_4.xyz * vec3(t16_16) + t16_1.xyz;
    //Instruction 3733
    //SAMPLE
    t10_0.x = texture(_LightTexture0, vs_TEXCOORD5.xy).w;
    //Instruction 3734
    //MUL
    t16_2.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 3735
    //MUL
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 3736
    //MUL
    t16_1.xyz = t16_0.yyy * t16_1.xyz;
    //Instruction 3737
    //MOV
    t0.x = vs_TEXCOORD7;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 3738
    //MUL
    t0.xyz = t16_1.xyz * t0.xxx;
    //Instruction 3739
    //MOV
    SV_Target0.xyz = t0.xyz;
    //Instruction 3740
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3741
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 4098
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4099
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4100
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4101
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4102
    //MOV
    gl_Position = t0;
    //Instruction 4103
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 4104
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 4105
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 4106
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 4107
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 4108
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 4109
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4110
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4111
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4112
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4113
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4114
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4115
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 4116
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 4117
    //MOV
    t1.w = t0.x;
    //Instruction 4118
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 4119
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 4120
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 4121
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 4122
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 4123
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 4124
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 4125
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4126
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4127
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4128
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4129
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4130
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4131
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 4132
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4133
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4134
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4135
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 4136
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 4137
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 4138
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 4139
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 4140
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 4141
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 4142
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 4143
    //MOV
    t2.w = t0.z;
    //Instruction 4144
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 4145
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 4146
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 4147
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 4148
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 4149
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 4150
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 4151
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 4152
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 4153
    //DP4
    t0.x = dot(t16_0, t1);
    //Instruction 4154
    //MOV
    t16_2.x = _LightMatrix0[0].y;
    //Instruction 4155
    //MOV
    t16_2.y = _LightMatrix0[1].y;
    //Instruction 4156
    //MOV
    t16_2.z = _LightMatrix0[2].y;
    //Instruction 4157
    //MOV
    t16_2.w = _LightMatrix0[3].y;
    //Instruction 4158
    //DP4
    t0.y = dot(t16_2, t1);
    //Instruction 4159
    //MOV
    t16_2.x = _LightMatrix0[0].z;
    //Instruction 4160
    //MOV
    t16_2.y = _LightMatrix0[1].z;
    //Instruction 4161
    //MOV
    t16_2.z = _LightMatrix0[2].z;
    //Instruction 4162
    //MOV
    t16_2.w = _LightMatrix0[3].z;
    //Instruction 4163
    //DP4
    t0.z = dot(t16_2, t1);
    //Instruction 4164
    //MOV
    t16_2.x = _LightMatrix0[0].w;
    //Instruction 4165
    //MOV
    t16_2.y = _LightMatrix0[1].w;
    //Instruction 4166
    //MOV
    t16_2.z = _LightMatrix0[2].w;
    //Instruction 4167
    //MOV
    t16_2.w = _LightMatrix0[3].w;
    //Instruction 4168
    //DP4
    t0.w = dot(t16_2, t1);
    //Instruction 4169
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 4170
    //MUL
    t0 = t1.yyyy * unity_World2Shadow[0][1];
    //Instruction 4171
    //MAD
    t0 = unity_World2Shadow[0][0] * t1.xxxx + t0;
    //Instruction 4172
    //MAD
    t0 = unity_World2Shadow[0][2] * t1.zzzz + t0;
    //Instruction 4173
    //MAD
    t0 = unity_World2Shadow[0][3] * t1.wwww + t0;
    //Instruction 4174
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 4175
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec3 t0;
mediump vec4 t16_0;
lowp vec3 t10_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_4;
lowp float t10_5;
mediump vec3 t16_7;
bool tb12;
mediump float t16_13;
mediump float t16_19;
mediump float t16_20;
void main()
{
    //Instruction 4028
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 4029
    //MAD
    t16_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 4030
    //MUL
    t16_2.xyz = t16_1.yyy * vs_TEXCOORD3.xyz;
    //Instruction 4031
    //MAD
    t16_1.xyw = t16_1.xxx * vs_TEXCOORD2.xyz + t16_2.xyz;
    //Instruction 4032
    //MAD
    t16_1.xyz = t16_1.zzz * vs_TEXCOORD4.xyz + t16_1.xyw;
    //Instruction 4033
    //DP3
    t16_19 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 4034
    //RSQ
    t16_19 = inversesqrt(t16_19);
    //Instruction 4035
    //MUL
    t16_1.xyz = vec3(t16_19) * t16_1.xyz;
    //Instruction 4036
    //DP3
    t16_19 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 4037
    //RSQ
    t16_19 = inversesqrt(t16_19);
    //Instruction 4038
    //MOV
    t16_2.x = vs_TEXCOORD2.w;
    //Instruction 4039
    //MOV
    t16_2.y = vs_TEXCOORD3.w;
    //Instruction 4040
    //MOV
    t16_2.z = vs_TEXCOORD4.w;
    //Instruction 4041
    //DP3
    t16_20 = dot(t16_2.xyz, t16_2.xyz);
    //Instruction 4042
    //RSQ
    t16_20 = inversesqrt(t16_20);
    //Instruction 4043
    //MUL
    t16_2.xyz = vec3(t16_20) * t16_2.xyz;
    //Instruction 4044
    //MAD
    t16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_19) + t16_2.xyz;
    //Instruction 4045
    //DP3
    t16_19 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 4046
    //MAX
    t16_0.x = max(t16_19, 0.001000);
    //Instruction 4047
    //RSQ
    t16_19 = inversesqrt(t16_0.x);
    //Instruction 4048
    //MUL
    t16_3.xyz = vec3(t16_19) * t16_3.xyz;
    //Instruction 4049
    //DP3
    t16_1.w = dot(t16_1.xyz, t16_3.xyz);
    //Instruction 4050
    //DP3
    t16_1.x = dot(t16_1.xyz, t16_2.xyz);
    //Instruction 4051
    //DP3
    t16_1.y = dot(t16_2.xyz, t16_3.xyz);
    //Instruction 4052
    //MAX
    t16_0.xyz = max(t16_1.yxw, vec3(0.0, 0.0, 0.0));
    //Instruction 4053
    //LOG
    t16_1.x = log2(t16_0.z);
    //Instruction 4054
    //ADD
    t16_7.x = (-_Glossiness) + 1.0;
    //Instruction 4055
    //ADD
    t16_13 = (-t16_7.x) + 1.0;
    //Instruction 4056
    //MAD
    t16_13 = t16_13 * 0.968000 + 0.030000;
    //Instruction 4057
    //LOG
    t16_13 = log2(t16_13);
    //Instruction 4058
    //DIV
    t16_7.y = 10.000000 / t16_13;
    //Instruction 4059
    //MUL
    t16_7.xz = t16_7.xy * t16_7.xy;
    //Instruction 4060
    //MAD
    t16_13 = t16_7.y * t16_7.y + 1.0;
    //Instruction 4061
    //MUL
    t16_1.x = t16_1.x * t16_7.z;
    //Instruction 4062
    //EXP
    t16_1.x = exp2(t16_1.x);
    //Instruction 4063
    //MUL
    t16_1.x = t16_1.x * t16_13;
    //Instruction 4064
    //MUL
    t16_13 = t16_0.x * t16_0.x;
    //Instruction 4065
    //MAD
    t16_7.x = t16_13 * _Glossiness + t16_7.x;
    //Instruction 4066
    //MUL
    t16_7.x = t16_7.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 4067
    //MAD
    t16_0.x = t16_7.x * t16_0.x + 0.000100;
    //Instruction 4068
    //DIV
    t16_0.x = t16_1.x / t16_0.x;
    //Instruction 4069
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4070
    //MAD
    t16_1.xyz = _Color.xyz * t10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 4071
    //MUL
    t16_4.xyz = t10_4.xyz * _Color.xyz;
    //Instruction 4072
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 4073
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    //Instruction 4074
    //MAD
    t16_19 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 4075
    //MAD
    t16_1.xyz = t16_4.xyz * vec3(t16_19) + t16_1.xyz;
    //Instruction 4076
    //DIV
    t16_2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    //Instruction 4077
    //ADD
    t16_2.xy = t16_2.xy + vec2(0.500000, 0.500000);
    //Instruction 4078
    //SAMPLE
    t10_0.x = texture(_LightTexture0, t16_2.xy).w;
    //Instruction 4079
    //LT
    tb12 = 0.0<vs_TEXCOORD5.z;
    //Instruction 4080
    //MOVC
    t10_5 = (tb12) ? 1.0 : 0.0;
    //Instruction 4081
    //MUL
    t10_5 = t10_0.x * t10_5;
    //Instruction 4082
    //DP3
    t16_19 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 4083
    //SAMPLE
    t10_0.x = texture(_LightTextureB0, vec2(t16_19)).w;
    //Instruction 4084
    //MUL
    t10_5 = t10_0.x * t10_5;
    //Instruction 4085
    //DIV
    t16_0.xzw = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
    //Instruction 4086
    //SAMPLE_C_LZ
    vec3 txVec14 = vec3(t16_0.xz,t16_0.w);
    t10_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec14, 0.0);
    //Instruction 4087
    //ADD
    t16_19 = (-_LightShadowData.x) + 1.0;
    //Instruction 4088
    //MAD
    t16_19 = t10_0.x * t16_19 + _LightShadowData.x;
    //Instruction 4089
    //MUL
    t10_5 = t16_19 * t10_5;
    //Instruction 4090
    //MUL
    t16_2.xyz = vec3(t10_5) * _LightColor0.xyz;
    //Instruction 4091
    //MUL
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 4092
    //MUL
    t16_1.xyz = t16_0.yyy * t16_1.xyz;
    //Instruction 4093
    //MOV
    t0.x = vs_TEXCOORD7;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 4094
    //MUL
    t0.xyz = t16_1.xyz * t0.xxx;
    //Instruction 4095
    //MOV
    SV_Target0.xyz = t0.xyz;
    //Instruction 4096
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4097
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 3871
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3872
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3873
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3874
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3875
    //MOV
    gl_Position = t0;
    //Instruction 3876
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 3877
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 3878
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 3879
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 3880
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 3881
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 3882
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3883
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3884
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3885
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3886
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3887
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3888
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 3889
    //MUL
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 3890
    //MAD
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    //Instruction 3891
    //MAD
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    //Instruction 3892
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 3893
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 3894
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 3895
    //MAD
    t2.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 3896
    //ADD
    vs_TEXCOORD6.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 3897
    //MOV
    t1.w = t2.x;
    //Instruction 3898
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 3899
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3900
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3901
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3902
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3903
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3904
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3905
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 3906
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3907
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3908
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3909
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 3910
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 3911
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 3912
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 3913
    //MUL
    t16_4.xyz = t1.yzx * t0.zxy;
    //Instruction 3914
    //MAD
    t16_4.xyz = t0.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 3915
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 3916
    //MOV
    vs_TEXCOORD3.w = t2.y;
    //Instruction 3917
    //MOV
    t0.w = t2.z;
    //Instruction 3918
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 3919
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 3920
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 3921
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 3922
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 3923
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 3924
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 3925
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 3926
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 3927
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 3928
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 3929
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 3930
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 3931
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 3932
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 3933
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 3934
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 3935
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 3936
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 3937
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 3938
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec3 t0;
mediump vec3 t16_0;
lowp vec3 t10_0;
bool tb0;
mediump vec4 t16_1;
highp vec4 t2;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_4;
mediump vec3 t16_6;
highp float t10;
mediump float t16_11;
mediump float t16_16;
mediump float t16_17;
void main()
{
    //Instruction 3804
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 3805
    //MAD
    t16_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3806
    //MUL
    t16_2.xyz = t16_1.yyy * vs_TEXCOORD3.xyz;
    //Instruction 3807
    //MAD
    t16_1.xyw = t16_1.xxx * vs_TEXCOORD2.xyz + t16_2.xyz;
    //Instruction 3808
    //MAD
    t16_1.xyz = t16_1.zzz * vs_TEXCOORD4.xyz + t16_1.xyw;
    //Instruction 3809
    //DP3
    t16_16 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 3810
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 3811
    //MUL
    t16_1.xyz = vec3(t16_16) * t16_1.xyz;
    //Instruction 3812
    //DP3
    t16_16 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 3813
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 3814
    //MOV
    t16_2.x = vs_TEXCOORD2.w;
    //Instruction 3815
    //MOV
    t16_2.y = vs_TEXCOORD3.w;
    //Instruction 3816
    //MOV
    t16_2.z = vs_TEXCOORD4.w;
    //Instruction 3817
    //DP3
    t16_17 = dot(t16_2.xyz, t16_2.xyz);
    //Instruction 3818
    //RSQ
    t16_17 = inversesqrt(t16_17);
    //Instruction 3819
    //MUL
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    //Instruction 3820
    //MAD
    t16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_16) + t16_2.xyz;
    //Instruction 3821
    //DP3
    t16_16 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 3822
    //MAX
    t16_0.x = max(t16_16, 0.001000);
    //Instruction 3823
    //RSQ
    t16_16 = inversesqrt(t16_0.x);
    //Instruction 3824
    //MUL
    t16_3.xyz = vec3(t16_16) * t16_3.xyz;
    //Instruction 3825
    //DP3
    t16_1.w = dot(t16_1.xyz, t16_3.xyz);
    //Instruction 3826
    //DP3
    t16_1.x = dot(t16_1.xyz, t16_2.xyz);
    //Instruction 3827
    //DP3
    t16_1.y = dot(t16_2.xyz, t16_3.xyz);
    //Instruction 3828
    //MAX
    t16_0.xyz = max(t16_1.yxw, vec3(0.0, 0.0, 0.0));
    //Instruction 3829
    //LOG
    t16_1.x = log2(t16_0.z);
    //Instruction 3830
    //ADD
    t16_6.x = (-_Glossiness) + 1.0;
    //Instruction 3831
    //ADD
    t16_11 = (-t16_6.x) + 1.0;
    //Instruction 3832
    //MAD
    t16_11 = t16_11 * 0.968000 + 0.030000;
    //Instruction 3833
    //LOG
    t16_11 = log2(t16_11);
    //Instruction 3834
    //DIV
    t16_6.y = 10.000000 / t16_11;
    //Instruction 3835
    //MUL
    t16_6.xz = t16_6.xy * t16_6.xy;
    //Instruction 3836
    //MAD
    t16_11 = t16_6.y * t16_6.y + 1.0;
    //Instruction 3837
    //MUL
    t16_1.x = t16_1.x * t16_6.z;
    //Instruction 3838
    //EXP
    t16_1.x = exp2(t16_1.x);
    //Instruction 3839
    //MUL
    t16_1.x = t16_1.x * t16_11;
    //Instruction 3840
    //MUL
    t16_11 = t16_0.x * t16_0.x;
    //Instruction 3841
    //MAD
    t16_6.x = t16_11 * _Glossiness + t16_6.x;
    //Instruction 3842
    //MUL
    t16_6.x = t16_6.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 3843
    //MAD
    t16_0.x = t16_6.x * t16_0.x + 0.000100;
    //Instruction 3844
    //DIV
    t16_0.x = t16_1.x / t16_0.x;
    //Instruction 3845
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3846
    //MAD
    t16_1.xyz = _Color.xyz * t10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 3847
    //MUL
    t16_4.xyz = t10_4.xyz * _Color.xyz;
    //Instruction 3848
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 3849
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    //Instruction 3850
    //MAD
    t16_16 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 3851
    //MAD
    t16_1.xyz = t16_4.xyz * vec3(t16_16) + t16_1.xyz;
    //Instruction 3852
    //DP3
    t0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    //Instruction 3853
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 3854
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 3855
    //MUL
    t0.x = t0.x * 0.970000;
    //Instruction 3856
    //SAMPLE
    t2 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
    //Instruction 3857
    //DP4
    t10 = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 3858
    //LT
    tb0 = t10<t0.x;
    //Instruction 3859
    //MOVC
    t16_16 = (tb0) ? _LightShadowData.x : 1.0;
    //Instruction 3860
    //DP3
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 3861
    //SAMPLE
    t10_0.x = texture(_LightTexture0, t0.xx).w;
    //Instruction 3862
    //MUL
    t16_0.x = t16_16 * t10_0.x;
    //Instruction 3863
    //MUL
    t16_3.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 3864
    //MUL
    t16_1.xyz = t16_1.xyz * t16_3.xyz;
    //Instruction 3865
    //MUL
    t16_1.xyz = t16_0.yyy * t16_1.xyz;
    //Instruction 3866
    //MOV
    t0.x = vs_TEXCOORD7;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 3867
    //MUL
    t0.xyz = t16_1.xyz * t0.xxx;
    //Instruction 3868
    //MOV
    SV_Target0.xyz = t0.xyz;
    //Instruction 3869
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3870
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 4245
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4246
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4247
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4248
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4249
    //MOV
    gl_Position = t0;
    //Instruction 4250
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 4251
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 4252
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 4253
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 4254
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 4255
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 4256
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4257
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4258
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4259
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4260
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4261
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4262
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 4263
    //MUL
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 4264
    //MAD
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    //Instruction 4265
    //MAD
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    //Instruction 4266
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 4267
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 4268
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 4269
    //MAD
    t2.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 4270
    //ADD
    vs_TEXCOORD6.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 4271
    //MOV
    t1.w = t2.x;
    //Instruction 4272
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 4273
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4274
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4275
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4276
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4277
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4278
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4279
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 4280
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4281
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4282
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4283
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 4284
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 4285
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 4286
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 4287
    //MUL
    t16_4.xyz = t1.yzx * t0.zxy;
    //Instruction 4288
    //MAD
    t16_4.xyz = t0.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 4289
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 4290
    //MOV
    vs_TEXCOORD3.w = t2.y;
    //Instruction 4291
    //MOV
    t0.w = t2.z;
    //Instruction 4292
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 4293
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 4294
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 4295
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 4296
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 4297
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 4298
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 4299
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 4300
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 4301
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 4302
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 4303
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 4304
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 4305
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 4306
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 4307
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 4308
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 4309
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 4310
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 4311
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 4312
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec3 t0;
mediump vec3 t16_0;
lowp vec3 t10_0;
bool tb0;
mediump vec4 t16_1;
highp vec4 t2;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_4;
mediump vec3 t16_6;
highp float t10;
lowp float t10_10;
mediump float t16_11;
mediump float t16_16;
mediump float t16_17;
void main()
{
    //Instruction 4176
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 4177
    //MAD
    t16_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 4178
    //MUL
    t16_2.xyz = t16_1.yyy * vs_TEXCOORD3.xyz;
    //Instruction 4179
    //MAD
    t16_1.xyw = t16_1.xxx * vs_TEXCOORD2.xyz + t16_2.xyz;
    //Instruction 4180
    //MAD
    t16_1.xyz = t16_1.zzz * vs_TEXCOORD4.xyz + t16_1.xyw;
    //Instruction 4181
    //DP3
    t16_16 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 4182
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 4183
    //MUL
    t16_1.xyz = vec3(t16_16) * t16_1.xyz;
    //Instruction 4184
    //DP3
    t16_16 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 4185
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 4186
    //MOV
    t16_2.x = vs_TEXCOORD2.w;
    //Instruction 4187
    //MOV
    t16_2.y = vs_TEXCOORD3.w;
    //Instruction 4188
    //MOV
    t16_2.z = vs_TEXCOORD4.w;
    //Instruction 4189
    //DP3
    t16_17 = dot(t16_2.xyz, t16_2.xyz);
    //Instruction 4190
    //RSQ
    t16_17 = inversesqrt(t16_17);
    //Instruction 4191
    //MUL
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    //Instruction 4192
    //MAD
    t16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_16) + t16_2.xyz;
    //Instruction 4193
    //DP3
    t16_16 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 4194
    //MAX
    t16_0.x = max(t16_16, 0.001000);
    //Instruction 4195
    //RSQ
    t16_16 = inversesqrt(t16_0.x);
    //Instruction 4196
    //MUL
    t16_3.xyz = vec3(t16_16) * t16_3.xyz;
    //Instruction 4197
    //DP3
    t16_1.w = dot(t16_1.xyz, t16_3.xyz);
    //Instruction 4198
    //DP3
    t16_1.x = dot(t16_1.xyz, t16_2.xyz);
    //Instruction 4199
    //DP3
    t16_1.y = dot(t16_2.xyz, t16_3.xyz);
    //Instruction 4200
    //MAX
    t16_0.xyz = max(t16_1.yxw, vec3(0.0, 0.0, 0.0));
    //Instruction 4201
    //LOG
    t16_1.x = log2(t16_0.z);
    //Instruction 4202
    //ADD
    t16_6.x = (-_Glossiness) + 1.0;
    //Instruction 4203
    //ADD
    t16_11 = (-t16_6.x) + 1.0;
    //Instruction 4204
    //MAD
    t16_11 = t16_11 * 0.968000 + 0.030000;
    //Instruction 4205
    //LOG
    t16_11 = log2(t16_11);
    //Instruction 4206
    //DIV
    t16_6.y = 10.000000 / t16_11;
    //Instruction 4207
    //MUL
    t16_6.xz = t16_6.xy * t16_6.xy;
    //Instruction 4208
    //MAD
    t16_11 = t16_6.y * t16_6.y + 1.0;
    //Instruction 4209
    //MUL
    t16_1.x = t16_1.x * t16_6.z;
    //Instruction 4210
    //EXP
    t16_1.x = exp2(t16_1.x);
    //Instruction 4211
    //MUL
    t16_1.x = t16_1.x * t16_11;
    //Instruction 4212
    //MUL
    t16_11 = t16_0.x * t16_0.x;
    //Instruction 4213
    //MAD
    t16_6.x = t16_11 * _Glossiness + t16_6.x;
    //Instruction 4214
    //MUL
    t16_6.x = t16_6.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 4215
    //MAD
    t16_0.x = t16_6.x * t16_0.x + 0.000100;
    //Instruction 4216
    //DIV
    t16_0.x = t16_1.x / t16_0.x;
    //Instruction 4217
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4218
    //MAD
    t16_1.xyz = _Color.xyz * t10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 4219
    //MUL
    t16_4.xyz = t10_4.xyz * _Color.xyz;
    //Instruction 4220
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 4221
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    //Instruction 4222
    //MAD
    t16_16 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 4223
    //MAD
    t16_1.xyz = t16_4.xyz * vec3(t16_16) + t16_1.xyz;
    //Instruction 4224
    //DP3
    t0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    //Instruction 4225
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 4226
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 4227
    //MUL
    t0.x = t0.x * 0.970000;
    //Instruction 4228
    //SAMPLE
    t2 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
    //Instruction 4229
    //DP4
    t10 = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 4230
    //LT
    tb0 = t10<t0.x;
    //Instruction 4231
    //MOVC
    t16_16 = (tb0) ? _LightShadowData.x : 1.0;
    //Instruction 4232
    //DP3
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 4233
    //SAMPLE
    t10_0.x = texture(_LightTextureB0, t0.xx).w;
    //Instruction 4234
    //SAMPLE
    t10_10 = texture(_LightTexture0, vs_TEXCOORD5.xyz).w;
    //Instruction 4235
    //MUL
    t16_0.x = t10_10 * t10_0.x;
    //Instruction 4236
    //MUL
    t16_0.x = t16_16 * t16_0.x;
    //Instruction 4237
    //MUL
    t16_3.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 4238
    //MUL
    t16_1.xyz = t16_1.xyz * t16_3.xyz;
    //Instruction 4239
    //MUL
    t16_1.xyz = t16_0.yyy * t16_1.xyz;
    //Instruction 4240
    //MOV
    t0.x = vs_TEXCOORD7;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 4241
    //MUL
    t0.xyz = t16_1.xyz * t0.xxx;
    //Instruction 4242
    //MOV
    SV_Target0.xyz = t0.xyz;
    //Instruction 4243
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4244
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	vec4 _ShadowOffsets[4];
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 4018
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4019
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4020
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4021
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4022
    //MOV
    gl_Position = t0;
    //Instruction 4023
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 4024
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 4025
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 4026
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 4027
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 4028
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 4029
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4030
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4031
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4032
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4033
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4034
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4035
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 4036
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 4037
    //MOV
    t1.w = t0.x;
    //Instruction 4038
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 4039
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 4040
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 4041
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 4042
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 4043
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 4044
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 4045
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4046
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4047
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4048
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4049
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4050
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4051
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 4052
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4053
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4054
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4055
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 4056
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 4057
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 4058
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 4059
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 4060
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 4061
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 4062
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 4063
    //MOV
    t2.w = t0.z;
    //Instruction 4064
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 4065
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 4066
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 4067
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 4068
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 4069
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 4070
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 4071
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 4072
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 4073
    //DP4
    t0.x = dot(t16_0, t1);
    //Instruction 4074
    //MOV
    t16_2.x = _LightMatrix0[0].y;
    //Instruction 4075
    //MOV
    t16_2.y = _LightMatrix0[1].y;
    //Instruction 4076
    //MOV
    t16_2.z = _LightMatrix0[2].y;
    //Instruction 4077
    //MOV
    t16_2.w = _LightMatrix0[3].y;
    //Instruction 4078
    //DP4
    t0.y = dot(t16_2, t1);
    //Instruction 4079
    //MOV
    t16_2.x = _LightMatrix0[0].z;
    //Instruction 4080
    //MOV
    t16_2.y = _LightMatrix0[1].z;
    //Instruction 4081
    //MOV
    t16_2.z = _LightMatrix0[2].z;
    //Instruction 4082
    //MOV
    t16_2.w = _LightMatrix0[3].z;
    //Instruction 4083
    //DP4
    t0.z = dot(t16_2, t1);
    //Instruction 4084
    //MOV
    t16_2.x = _LightMatrix0[0].w;
    //Instruction 4085
    //MOV
    t16_2.y = _LightMatrix0[1].w;
    //Instruction 4086
    //MOV
    t16_2.z = _LightMatrix0[2].w;
    //Instruction 4087
    //MOV
    t16_2.w = _LightMatrix0[3].w;
    //Instruction 4088
    //DP4
    t0.w = dot(t16_2, t1);
    //Instruction 4089
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 4090
    //MUL
    t0 = t1.yyyy * unity_World2Shadow[0][1];
    //Instruction 4091
    //MAD
    t0 = unity_World2Shadow[0][0] * t1.xxxx + t0;
    //Instruction 4092
    //MAD
    t0 = unity_World2Shadow[0][2] * t1.zzzz + t0;
    //Instruction 4093
    //MAD
    t0 = unity_World2Shadow[0][3] * t1.wwww + t0;
    //Instruction 4094
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 4095
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	vec4 _ShadowOffsets[4];
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec3 t16_1;
lowp vec3 t10_1;
highp vec4 t2;
mediump vec3 t16_2;
lowp vec3 t10_2;
highp vec3 t3;
lowp float t10_4;
mediump vec4 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
lowp float t10_9;
mediump float t16_13;
mediump float t16_17;
bool tb17;
mediump float t16_24;
mediump float t16_29;
void main()
{
    //Instruction 3939
    //ADD
    t16_0.x = (-_LightShadowData.x) + 1.0;
    //Instruction 3940
    //DIV
    t16_1.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
    //Instruction 3941
    //ADD
    t2.xyz = t16_1.xyz + _ShadowOffsets[0].xyz;
    //Instruction 3942
    //SAMPLE_C_LZ
    vec3 txVec15 = vec3(t2.xy,t2.z);
    t2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec15, 0.0);
    //Instruction 3943
    //ADD
    t3.xyz = t16_1.xyz + _ShadowOffsets[1].xyz;
    //Instruction 3944
    //SAMPLE_C_LZ
    vec3 txVec16 = vec3(t3.xy,t3.z);
    t2.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec16, 0.0);
    //Instruction 3945
    //ADD
    t3.xyz = t16_1.xyz + _ShadowOffsets[2].xyz;
    //Instruction 3946
    //ADD
    t1.xyz = t16_1.xyz + _ShadowOffsets[3].xyz;
    //Instruction 3947
    //SAMPLE_C_LZ
    vec3 txVec17 = vec3(t1.xy,t1.z);
    t2.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec17, 0.0);
    //Instruction 3948
    //SAMPLE_C_LZ
    vec3 txVec18 = vec3(t3.xy,t3.z);
    t2.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec18, 0.0);
    //Instruction 3949
    //MAD
    t16_0 = t2 * t16_0.xxxx + _LightShadowData.xxxx;
    //Instruction 3950
    //DP4
    t16_1.x = dot(t16_0, vec4(0.250000, 0.250000, 0.250000, 0.250000));
    //Instruction 3951
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    //Instruction 3952
    //ADD
    t16_0.xy = t16_0.xy + vec2(0.500000, 0.500000);
    //Instruction 3953
    //SAMPLE
    t10_9 = texture(_LightTexture0, t16_0.xy).w;
    //Instruction 3954
    //LT
    tb17 = 0.0<vs_TEXCOORD5.z;
    //Instruction 3955
    //MOVC
    t10_4 = (tb17) ? 1.0 : 0.0;
    //Instruction 3956
    //MUL
    t10_4 = t10_9 * t10_4;
    //Instruction 3957
    //DP3
    t16_0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 3958
    //SAMPLE
    t10_9 = texture(_LightTextureB0, t16_0.xx).w;
    //Instruction 3959
    //MUL
    t10_4 = t10_9 * t10_4;
    //Instruction 3960
    //MUL
    t10_4 = t16_1.x * t10_4;
    //Instruction 3961
    //MUL
    t16_0.xyz = vec3(t10_4) * _LightColor0.xyz;
    //Instruction 3962
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 3963
    //MAD
    t16_5.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3964
    //MUL
    t16_6.xyz = t16_5.yyy * vs_TEXCOORD3.xyz;
    //Instruction 3965
    //MAD
    t16_5.xyw = t16_5.xxx * vs_TEXCOORD2.xyz + t16_6.xyz;
    //Instruction 3966
    //MAD
    t16_5.xyz = t16_5.zzz * vs_TEXCOORD4.xyz + t16_5.xyw;
    //Instruction 3967
    //DP3
    t16_24 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 3968
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 3969
    //MUL
    t16_5.xyz = vec3(t16_24) * t16_5.xyz;
    //Instruction 3970
    //DP3
    t16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 3971
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 3972
    //MOV
    t16_6.x = vs_TEXCOORD2.w;
    //Instruction 3973
    //MOV
    t16_6.y = vs_TEXCOORD3.w;
    //Instruction 3974
    //MOV
    t16_6.z = vs_TEXCOORD4.w;
    //Instruction 3975
    //DP3
    t16_29 = dot(t16_6.xyz, t16_6.xyz);
    //Instruction 3976
    //RSQ
    t16_29 = inversesqrt(t16_29);
    //Instruction 3977
    //MUL
    t16_6.xyz = vec3(t16_29) * t16_6.xyz;
    //Instruction 3978
    //MAD
    t16_7.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_24) + t16_6.xyz;
    //Instruction 3979
    //DP3
    t16_24 = dot(t16_7.xyz, t16_7.xyz);
    //Instruction 3980
    //MAX
    t16_1.x = max(t16_24, 0.001000);
    //Instruction 3981
    //RSQ
    t16_24 = inversesqrt(t16_1.x);
    //Instruction 3982
    //MUL
    t16_7.xyz = vec3(t16_24) * t16_7.xyz;
    //Instruction 3983
    //DP3
    t16_24 = dot(t16_5.xyz, t16_7.xyz);
    //Instruction 3984
    //DP3
    t16_5.x = dot(t16_5.xyz, t16_6.xyz);
    //Instruction 3985
    //DP3
    t16_5.y = dot(t16_6.xyz, t16_7.xyz);
    //Instruction 3986
    //MAX
    t16_1.xy = max(t16_5.yx, vec2(0.0, 0.0));
    //Instruction 3987
    //MAX
    t16_17 = max(t16_24, 0.0);
    //Instruction 3988
    //LOG
    t16_24 = log2(t16_17);
    //Instruction 3989
    //ADD
    t16_5.x = (-_Glossiness) + 1.0;
    //Instruction 3990
    //ADD
    t16_13 = (-t16_5.x) + 1.0;
    //Instruction 3991
    //MAD
    t16_13 = t16_13 * 0.968000 + 0.030000;
    //Instruction 3992
    //LOG
    t16_13 = log2(t16_13);
    //Instruction 3993
    //DIV
    t16_5.y = 10.000000 / t16_13;
    //Instruction 3994
    //MUL
    t16_5.xz = t16_5.xy * t16_5.xy;
    //Instruction 3995
    //MAD
    t16_13 = t16_5.y * t16_5.y + 1.0;
    //Instruction 3996
    //MUL
    t16_24 = t16_24 * t16_5.z;
    //Instruction 3997
    //EXP
    t16_24 = exp2(t16_24);
    //Instruction 3998
    //MUL
    t16_24 = t16_24 * t16_13;
    //Instruction 3999
    //MUL
    t16_13 = t16_1.x * t16_1.x;
    //Instruction 4000
    //MAD
    t16_5.x = t16_13 * _Glossiness + t16_5.x;
    //Instruction 4001
    //MUL
    t16_5.x = t16_5.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 4002
    //MAD
    t16_1.x = t16_5.x * t16_1.x + 0.000100;
    //Instruction 4003
    //DIV
    t16_1.x = t16_24 / t16_1.x;
    //Instruction 4004
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4005
    //MAD
    t16_5.xyz = _Color.xyz * t10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 4006
    //MUL
    t16_2.xyz = t10_2.xyz * _Color.xyz;
    //Instruction 4007
    //MAD
    t16_5.xyz = vec3(_Metallic) * t16_5.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 4008
    //MUL
    t16_5.xyz = t16_1.xxx * t16_5.xyz;
    //Instruction 4009
    //MAD
    t16_24 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 4010
    //MAD
    t16_5.xyz = t16_2.xyz * vec3(t16_24) + t16_5.xyz;
    //Instruction 4011
    //MUL
    t16_0.xyz = t16_0.xyz * t16_5.xyz;
    //Instruction 4012
    //MUL
    t16_0.xyz = t16_1.yyy * t16_0.xyz;
    //Instruction 4013
    //MOV
    t1.x = vs_TEXCOORD7;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 4014
    //MUL
    t1.xyz = t16_0.xyz * t1.xxx;
    //Instruction 4015
    //MOV
    SV_Target0.xyz = t1.xyz;
    //Instruction 4016
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4017
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 4392
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4393
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4394
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4395
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4396
    //MOV
    gl_Position = t0;
    //Instruction 4397
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 4398
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 4399
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 4400
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 4401
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 4402
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 4403
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4404
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4405
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4406
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4407
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4408
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4409
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 4410
    //MUL
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 4411
    //MAD
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    //Instruction 4412
    //MAD
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    //Instruction 4413
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 4414
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 4415
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 4416
    //MAD
    t2.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 4417
    //ADD
    vs_TEXCOORD6.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 4418
    //MOV
    t1.w = t2.x;
    //Instruction 4419
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 4420
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4421
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4422
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4423
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4424
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4425
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4426
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 4427
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4428
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4429
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4430
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 4431
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 4432
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 4433
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 4434
    //MUL
    t16_4.xyz = t1.yzx * t0.zxy;
    //Instruction 4435
    //MAD
    t16_4.xyz = t0.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 4436
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 4437
    //MOV
    vs_TEXCOORD3.w = t2.y;
    //Instruction 4438
    //MOV
    t0.w = t2.z;
    //Instruction 4439
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 4440
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 4441
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 4442
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 4443
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 4444
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 4445
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 4446
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 4447
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 4448
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 4449
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 4450
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 4451
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 4452
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 4453
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 4454
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 4455
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 4456
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 4457
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 4458
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 4459
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec3 t10_0;
bvec4 tb0;
highp vec4 t1;
mediump vec3 t16_1;
lowp vec3 t10_1;
highp vec4 t2;
mediump vec3 t16_3;
mediump vec4 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp vec3 t7;
mediump float t16_11;
mediump float t16_14;
mediump float t16_24;
mediump float t16_25;
void main()
{
    //Instruction 4313
    //DP3
    t0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    //Instruction 4314
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 4315
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 4316
    //MUL
    t0.x = t0.x * 0.970000;
    //Instruction 4317
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(0.007812, 0.007812, 0.007812);
    //Instruction 4318
    //SAMPLE
    t1 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 4319
    //DP4
    t1.x = dot(t1, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 4320
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(-0.007812, -0.007812, 0.007812);
    //Instruction 4321
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 4322
    //DP4
    t1.y = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 4323
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(-0.007812, 0.007812, -0.007812);
    //Instruction 4324
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 4325
    //DP4
    t1.z = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 4326
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(0.007812, -0.007812, -0.007812);
    //Instruction 4327
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 4328
    //DP4
    t1.w = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 4329
    //LT
    tb0 = lessThan(t1, t0.xxxx);
    //Instruction 4330
    //MOVC
    t0.x = (tb0.x) ? _LightShadowData.x : float(1.0);
    t0.y = (tb0.y) ? _LightShadowData.x : float(1.0);
    t0.z = (tb0.z) ? _LightShadowData.x : float(1.0);
    t0.w = (tb0.w) ? _LightShadowData.x : float(1.0);
    //Instruction 4331
    //DP4
    t16_3.x = dot(t0, vec4(0.250000, 0.250000, 0.250000, 0.250000));
    //Instruction 4332
    //DP3
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 4333
    //SAMPLE
    t10_0.x = texture(_LightTexture0, t0.xx).w;
    //Instruction 4334
    //MUL
    t16_0.x = t16_3.x * t10_0.x;
    //Instruction 4335
    //MUL
    t16_3.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 4336
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 4337
    //MAD
    t16_4.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 4338
    //MUL
    t16_5.xyz = t16_4.yyy * vs_TEXCOORD3.xyz;
    //Instruction 4339
    //MAD
    t16_4.xyw = t16_4.xxx * vs_TEXCOORD2.xyz + t16_5.xyz;
    //Instruction 4340
    //MAD
    t16_4.xyz = t16_4.zzz * vs_TEXCOORD4.xyz + t16_4.xyw;
    //Instruction 4341
    //DP3
    t16_24 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 4342
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 4343
    //MUL
    t16_4.xyz = vec3(t16_24) * t16_4.xyz;
    //Instruction 4344
    //DP3
    t16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 4345
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 4346
    //MOV
    t16_5.x = vs_TEXCOORD2.w;
    //Instruction 4347
    //MOV
    t16_5.y = vs_TEXCOORD3.w;
    //Instruction 4348
    //MOV
    t16_5.z = vs_TEXCOORD4.w;
    //Instruction 4349
    //DP3
    t16_25 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 4350
    //RSQ
    t16_25 = inversesqrt(t16_25);
    //Instruction 4351
    //MUL
    t16_5.xyz = vec3(t16_25) * t16_5.xyz;
    //Instruction 4352
    //MAD
    t16_6.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_24) + t16_5.xyz;
    //Instruction 4353
    //DP3
    t16_24 = dot(t16_6.xyz, t16_6.xyz);
    //Instruction 4354
    //MAX
    t16_0.x = max(t16_24, 0.001000);
    //Instruction 4355
    //RSQ
    t16_24 = inversesqrt(t16_0.x);
    //Instruction 4356
    //MUL
    t16_6.xyz = vec3(t16_24) * t16_6.xyz;
    //Instruction 4357
    //DP3
    t16_24 = dot(t16_4.xyz, t16_6.xyz);
    //Instruction 4358
    //DP3
    t16_4.x = dot(t16_4.xyz, t16_5.xyz);
    //Instruction 4359
    //DP3
    t16_4.y = dot(t16_5.xyz, t16_6.xyz);
    //Instruction 4360
    //MAX
    t16_0.xy = max(t16_4.yx, vec2(0.0, 0.0));
    //Instruction 4361
    //MAX
    t16_14 = max(t16_24, 0.0);
    //Instruction 4362
    //LOG
    t16_24 = log2(t16_14);
    //Instruction 4363
    //ADD
    t16_4.x = (-_Glossiness) + 1.0;
    //Instruction 4364
    //ADD
    t16_11 = (-t16_4.x) + 1.0;
    //Instruction 4365
    //MAD
    t16_11 = t16_11 * 0.968000 + 0.030000;
    //Instruction 4366
    //LOG
    t16_11 = log2(t16_11);
    //Instruction 4367
    //DIV
    t16_4.y = 10.000000 / t16_11;
    //Instruction 4368
    //MUL
    t16_4.xz = t16_4.xy * t16_4.xy;
    //Instruction 4369
    //MAD
    t16_11 = t16_4.y * t16_4.y + 1.0;
    //Instruction 4370
    //MUL
    t16_24 = t16_24 * t16_4.z;
    //Instruction 4371
    //EXP
    t16_24 = exp2(t16_24);
    //Instruction 4372
    //MUL
    t16_24 = t16_24 * t16_11;
    //Instruction 4373
    //MUL
    t16_11 = t16_0.x * t16_0.x;
    //Instruction 4374
    //MAD
    t16_4.x = t16_11 * _Glossiness + t16_4.x;
    //Instruction 4375
    //MUL
    t16_4.x = t16_4.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 4376
    //MAD
    t16_0.x = t16_4.x * t16_0.x + 0.000100;
    //Instruction 4377
    //DIV
    t16_0.x = t16_24 / t16_0.x;
    //Instruction 4378
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4379
    //MAD
    t16_4.xyz = _Color.xyz * t10_1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 4380
    //MUL
    t16_1.xyz = t10_1.xyz * _Color.xyz;
    //Instruction 4381
    //MAD
    t16_4.xyz = vec3(_Metallic) * t16_4.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 4382
    //MUL
    t16_4.xyz = t16_0.xxx * t16_4.xyz;
    //Instruction 4383
    //MAD
    t16_24 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 4384
    //MAD
    t16_4.xyz = t16_1.xyz * vec3(t16_24) + t16_4.xyz;
    //Instruction 4385
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 4386
    //MUL
    t16_3.xyz = t16_0.yyy * t16_3.xyz;
    //Instruction 4387
    //MOV
    t0.x = vs_TEXCOORD7;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 4388
    //MUL
    t0.xyz = t16_3.xyz * t0.xxx;
    //Instruction 4389
    //MOV
    SV_Target0.xyz = t0.xyz;
    //Instruction 4390
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4391
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 4177
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4178
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4179
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4180
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4181
    //MOV
    gl_Position = t0;
    //Instruction 4182
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 4183
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 4184
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 4185
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 4186
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 4187
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 4188
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4189
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4190
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4191
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4192
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4193
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4194
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 4195
    //MUL
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 4196
    //MAD
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    //Instruction 4197
    //MAD
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    //Instruction 4198
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 4199
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 4200
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 4201
    //MAD
    t2.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 4202
    //ADD
    vs_TEXCOORD6.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 4203
    //MOV
    t1.w = t2.x;
    //Instruction 4204
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 4205
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4206
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4207
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4208
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4209
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4210
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4211
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 4212
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4213
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4214
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4215
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 4216
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 4217
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 4218
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 4219
    //MUL
    t16_4.xyz = t1.yzx * t0.zxy;
    //Instruction 4220
    //MAD
    t16_4.xyz = t0.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 4221
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 4222
    //MOV
    vs_TEXCOORD3.w = t2.y;
    //Instruction 4223
    //MOV
    t0.w = t2.z;
    //Instruction 4224
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 4225
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 4226
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 4227
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 4228
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 4229
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 4230
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 4231
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 4232
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 4233
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 4234
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 4235
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 4236
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 4237
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 4238
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 4239
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 4240
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 4241
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 4242
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 4243
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 4244
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec3 t10_0;
bvec4 tb0;
highp vec4 t1;
mediump vec3 t16_1;
lowp vec3 t10_1;
highp vec4 t2;
mediump vec3 t16_3;
mediump vec4 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp vec3 t7;
lowp float t10_7;
mediump float t16_11;
mediump float t16_14;
mediump float t16_24;
mediump float t16_25;
void main()
{
    //Instruction 4096
    //DP3
    t0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    //Instruction 4097
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 4098
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 4099
    //MUL
    t0.x = t0.x * 0.970000;
    //Instruction 4100
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(0.007812, 0.007812, 0.007812);
    //Instruction 4101
    //SAMPLE
    t1 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 4102
    //DP4
    t1.x = dot(t1, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 4103
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(-0.007812, -0.007812, 0.007812);
    //Instruction 4104
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 4105
    //DP4
    t1.y = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 4106
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(-0.007812, 0.007812, -0.007812);
    //Instruction 4107
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 4108
    //DP4
    t1.z = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 4109
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(0.007812, -0.007812, -0.007812);
    //Instruction 4110
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 4111
    //DP4
    t1.w = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 4112
    //LT
    tb0 = lessThan(t1, t0.xxxx);
    //Instruction 4113
    //MOVC
    t0.x = (tb0.x) ? _LightShadowData.x : float(1.0);
    t0.y = (tb0.y) ? _LightShadowData.x : float(1.0);
    t0.z = (tb0.z) ? _LightShadowData.x : float(1.0);
    t0.w = (tb0.w) ? _LightShadowData.x : float(1.0);
    //Instruction 4114
    //DP4
    t16_3.x = dot(t0, vec4(0.250000, 0.250000, 0.250000, 0.250000));
    //Instruction 4115
    //DP3
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 4116
    //SAMPLE
    t10_0.x = texture(_LightTextureB0, t0.xx).w;
    //Instruction 4117
    //SAMPLE
    t10_7 = texture(_LightTexture0, vs_TEXCOORD5.xyz).w;
    //Instruction 4118
    //MUL
    t16_0.x = t10_7 * t10_0.x;
    //Instruction 4119
    //MUL
    t16_0.x = t16_3.x * t16_0.x;
    //Instruction 4120
    //MUL
    t16_3.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 4121
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 4122
    //MAD
    t16_4.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 4123
    //MUL
    t16_5.xyz = t16_4.yyy * vs_TEXCOORD3.xyz;
    //Instruction 4124
    //MAD
    t16_4.xyw = t16_4.xxx * vs_TEXCOORD2.xyz + t16_5.xyz;
    //Instruction 4125
    //MAD
    t16_4.xyz = t16_4.zzz * vs_TEXCOORD4.xyz + t16_4.xyw;
    //Instruction 4126
    //DP3
    t16_24 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 4127
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 4128
    //MUL
    t16_4.xyz = vec3(t16_24) * t16_4.xyz;
    //Instruction 4129
    //DP3
    t16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 4130
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 4131
    //MOV
    t16_5.x = vs_TEXCOORD2.w;
    //Instruction 4132
    //MOV
    t16_5.y = vs_TEXCOORD3.w;
    //Instruction 4133
    //MOV
    t16_5.z = vs_TEXCOORD4.w;
    //Instruction 4134
    //DP3
    t16_25 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 4135
    //RSQ
    t16_25 = inversesqrt(t16_25);
    //Instruction 4136
    //MUL
    t16_5.xyz = vec3(t16_25) * t16_5.xyz;
    //Instruction 4137
    //MAD
    t16_6.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_24) + t16_5.xyz;
    //Instruction 4138
    //DP3
    t16_24 = dot(t16_6.xyz, t16_6.xyz);
    //Instruction 4139
    //MAX
    t16_0.x = max(t16_24, 0.001000);
    //Instruction 4140
    //RSQ
    t16_24 = inversesqrt(t16_0.x);
    //Instruction 4141
    //MUL
    t16_6.xyz = vec3(t16_24) * t16_6.xyz;
    //Instruction 4142
    //DP3
    t16_24 = dot(t16_4.xyz, t16_6.xyz);
    //Instruction 4143
    //DP3
    t16_4.x = dot(t16_4.xyz, t16_5.xyz);
    //Instruction 4144
    //DP3
    t16_4.y = dot(t16_5.xyz, t16_6.xyz);
    //Instruction 4145
    //MAX
    t16_0.xy = max(t16_4.yx, vec2(0.0, 0.0));
    //Instruction 4146
    //MAX
    t16_14 = max(t16_24, 0.0);
    //Instruction 4147
    //LOG
    t16_24 = log2(t16_14);
    //Instruction 4148
    //ADD
    t16_4.x = (-_Glossiness) + 1.0;
    //Instruction 4149
    //ADD
    t16_11 = (-t16_4.x) + 1.0;
    //Instruction 4150
    //MAD
    t16_11 = t16_11 * 0.968000 + 0.030000;
    //Instruction 4151
    //LOG
    t16_11 = log2(t16_11);
    //Instruction 4152
    //DIV
    t16_4.y = 10.000000 / t16_11;
    //Instruction 4153
    //MUL
    t16_4.xz = t16_4.xy * t16_4.xy;
    //Instruction 4154
    //MAD
    t16_11 = t16_4.y * t16_4.y + 1.0;
    //Instruction 4155
    //MUL
    t16_24 = t16_24 * t16_4.z;
    //Instruction 4156
    //EXP
    t16_24 = exp2(t16_24);
    //Instruction 4157
    //MUL
    t16_24 = t16_24 * t16_11;
    //Instruction 4158
    //MUL
    t16_11 = t16_0.x * t16_0.x;
    //Instruction 4159
    //MAD
    t16_4.x = t16_11 * _Glossiness + t16_4.x;
    //Instruction 4160
    //MUL
    t16_4.x = t16_4.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 4161
    //MAD
    t16_0.x = t16_4.x * t16_0.x + 0.000100;
    //Instruction 4162
    //DIV
    t16_0.x = t16_24 / t16_0.x;
    //Instruction 4163
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4164
    //MAD
    t16_4.xyz = _Color.xyz * t10_1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 4165
    //MUL
    t16_1.xyz = t10_1.xyz * _Color.xyz;
    //Instruction 4166
    //MAD
    t16_4.xyz = vec3(_Metallic) * t16_4.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 4167
    //MUL
    t16_4.xyz = t16_0.xxx * t16_4.xyz;
    //Instruction 4168
    //MAD
    t16_24 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 4169
    //MAD
    t16_4.xyz = t16_1.xyz * vec3(t16_24) + t16_4.xyz;
    //Instruction 4170
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 4171
    //MUL
    t16_3.xyz = t16_0.yyy * t16_3.xyz;
    //Instruction 4172
    //MOV
    t0.x = vs_TEXCOORD7;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 4173
    //MUL
    t0.xyz = t16_3.xyz * t0.xxx;
    //Instruction 4174
    //MOV
    SV_Target0.xyz = t0.xyz;
    //Instruction 4175
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4176
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 4516
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4517
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4518
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4519
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4520
    //MOV
    gl_Position = t0;
    //Instruction 4521
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 4522
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 4523
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 4524
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 4525
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 4526
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 4527
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4528
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4529
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4530
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4531
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4532
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4533
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 4534
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 4535
    //MOV
    t1.w = t0.x;
    //Instruction 4536
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 4537
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 4538
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 4539
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 4540
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 4541
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 4542
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 4543
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4544
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4545
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4546
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4547
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4548
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4549
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 4550
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4551
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4552
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4553
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 4554
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 4555
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 4556
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 4557
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 4558
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 4559
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 4560
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 4561
    //MOV
    t2.w = t0.z;
    //Instruction 4562
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 4563
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 4564
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 4565
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 4566
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 4567
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 4568
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 4569
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 4570
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 4571
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 4572
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec3 t0;
mediump vec3 t16_0;
lowp vec3 t10_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_4;
mediump vec3 t16_6;
mediump float t16_11;
mediump float t16_16;
void main()
{
    //Instruction 4460
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 4461
    //MAD
    t16_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 4462
    //MUL
    t16_2.xyz = t16_1.yyy * vs_TEXCOORD3.xyz;
    //Instruction 4463
    //MAD
    t16_1.xyw = t16_1.xxx * vs_TEXCOORD2.xyz + t16_2.xyz;
    //Instruction 4464
    //MAD
    t16_1.xyz = t16_1.zzz * vs_TEXCOORD4.xyz + t16_1.xyw;
    //Instruction 4465
    //DP3
    t16_16 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 4466
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 4467
    //MUL
    t16_1.xyz = vec3(t16_16) * t16_1.xyz;
    //Instruction 4468
    //DP3
    t16_16 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 4469
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 4470
    //MOV
    t16_2.x = vs_TEXCOORD2.w;
    //Instruction 4471
    //MOV
    t16_2.y = vs_TEXCOORD3.w;
    //Instruction 4472
    //MOV
    t16_2.z = vs_TEXCOORD4.w;
    //Instruction 4473
    //MAD
    t16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_16) + t16_2.xyz;
    //Instruction 4474
    //DP3
    t16_16 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 4475
    //MAX
    t16_0.x = max(t16_16, 0.001000);
    //Instruction 4476
    //RSQ
    t16_16 = inversesqrt(t16_0.x);
    //Instruction 4477
    //MUL
    t16_3.xyz = vec3(t16_16) * t16_3.xyz;
    //Instruction 4478
    //DP3
    t16_1.w = dot(t16_1.xyz, t16_3.xyz);
    //Instruction 4479
    //DP3
    t16_1.x = dot(t16_1.xyz, t16_2.xyz);
    //Instruction 4480
    //DP3
    t16_1.y = dot(t16_2.xyz, t16_3.xyz);
    //Instruction 4481
    //MAX
    t16_0.xyz = max(t16_1.yxw, vec3(0.0, 0.0, 0.0));
    //Instruction 4482
    //LOG
    t16_1.x = log2(t16_0.z);
    //Instruction 4483
    //ADD
    t16_6.x = (-_Glossiness) + 1.0;
    //Instruction 4484
    //ADD
    t16_11 = (-t16_6.x) + 1.0;
    //Instruction 4485
    //MAD
    t16_11 = t16_11 * 0.968000 + 0.030000;
    //Instruction 4486
    //LOG
    t16_11 = log2(t16_11);
    //Instruction 4487
    //DIV
    t16_6.y = 10.000000 / t16_11;
    //Instruction 4488
    //MUL
    t16_6.xz = t16_6.xy * t16_6.xy;
    //Instruction 4489
    //MAD
    t16_11 = t16_6.y * t16_6.y + 1.0;
    //Instruction 4490
    //MUL
    t16_1.x = t16_1.x * t16_6.z;
    //Instruction 4491
    //EXP
    t16_1.x = exp2(t16_1.x);
    //Instruction 4492
    //MUL
    t16_1.x = t16_1.x * t16_11;
    //Instruction 4493
    //MUL
    t16_11 = t16_0.x * t16_0.x;
    //Instruction 4494
    //MAD
    t16_6.x = t16_11 * _Glossiness + t16_6.x;
    //Instruction 4495
    //MUL
    t16_6.x = t16_6.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 4496
    //MAD
    t16_0.x = t16_6.x * t16_0.x + 0.000100;
    //Instruction 4497
    //DIV
    t16_0.x = t16_1.x / t16_0.x;
    //Instruction 4498
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4499
    //MAD
    t16_1.xyz = _Color.xyz * t10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 4500
    //MUL
    t16_4.xyz = t10_4.xyz * _Color.xyz;
    //Instruction 4501
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 4502
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    //Instruction 4503
    //MAD
    t16_16 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 4504
    //MAD
    t16_1.xyz = t16_4.xyz * vec3(t16_16) + t16_1.xyz;
    //Instruction 4505
    //SAMPLE_C_LZ
    vec3 txVec15 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec15, 0.0);
    //Instruction 4506
    //ADD
    t16_2.x = (-_LightShadowData.x) + 1.0;
    //Instruction 4507
    //MAD
    t16_16 = t16_16 * t16_2.x + _LightShadowData.x;
    //Instruction 4508
    //MUL
    t16_2.xyz = vec3(t16_16) * _LightColor0.xyz;
    //Instruction 4509
    //MUL
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 4510
    //MUL
    t16_1.xyz = t16_0.yyy * t16_1.xyz;
    //Instruction 4511
    //MOV
    t0.x = vs_TEXCOORD7;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 4512
    //MUL
    t0.xyz = t16_1.xyz * t0.xxx;
    //Instruction 4513
    //MOV
    SV_Target0.xyz = t0.xyz;
    //Instruction 4514
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4515
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec2 vs_TEXCOORD5;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 4303
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4304
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4305
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4306
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4307
    //MOV
    gl_Position = t0;
    //Instruction 4308
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 4309
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 4310
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 4311
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 4312
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 4313
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 4314
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4315
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4316
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4317
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4318
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4319
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4320
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 4321
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 4322
    //MOV
    t1.w = t0.x;
    //Instruction 4323
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 4324
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 4325
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 4326
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 4327
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 4328
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 4329
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 4330
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4331
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4332
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4333
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4334
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4335
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4336
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 4337
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4338
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4339
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4340
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 4341
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 4342
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 4343
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 4344
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 4345
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 4346
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 4347
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 4348
    //MOV
    t2.w = t0.z;
    //Instruction 4349
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 4350
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 4351
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 4352
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 4353
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 4354
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 4355
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 4356
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 4357
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 4358
    //DP4
    t2.x = dot(t16_0, t1);
    //Instruction 4359
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 4360
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 4361
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 4362
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 4363
    //DP4
    t2.y = dot(t16_0, t1);
    //Instruction 4364
    //MOV
    vs_TEXCOORD5.xy = t2.xy;
    //Instruction 4365
    //MUL
    t0 = t1.yyyy * unity_World2Shadow[0][1];
    //Instruction 4366
    //MAD
    t0 = unity_World2Shadow[0][0] * t1.xxxx + t0;
    //Instruction 4367
    //MAD
    t0 = unity_World2Shadow[0][2] * t1.zzzz + t0;
    //Instruction 4368
    //MAD
    t0 = unity_World2Shadow[0][3] * t1.wwww + t0;
    //Instruction 4369
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 4370
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec2 vs_TEXCOORD5;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec3 t0;
mediump vec3 t16_0;
lowp vec3 t10_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_4;
mediump vec3 t16_6;
mediump float t16_11;
mediump float t16_16;
void main()
{
    //Instruction 4245
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 4246
    //MAD
    t16_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 4247
    //MUL
    t16_2.xyz = t16_1.yyy * vs_TEXCOORD3.xyz;
    //Instruction 4248
    //MAD
    t16_1.xyw = t16_1.xxx * vs_TEXCOORD2.xyz + t16_2.xyz;
    //Instruction 4249
    //MAD
    t16_1.xyz = t16_1.zzz * vs_TEXCOORD4.xyz + t16_1.xyw;
    //Instruction 4250
    //DP3
    t16_16 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 4251
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 4252
    //MUL
    t16_1.xyz = vec3(t16_16) * t16_1.xyz;
    //Instruction 4253
    //DP3
    t16_16 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 4254
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 4255
    //MOV
    t16_2.x = vs_TEXCOORD2.w;
    //Instruction 4256
    //MOV
    t16_2.y = vs_TEXCOORD3.w;
    //Instruction 4257
    //MOV
    t16_2.z = vs_TEXCOORD4.w;
    //Instruction 4258
    //MAD
    t16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_16) + t16_2.xyz;
    //Instruction 4259
    //DP3
    t16_16 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 4260
    //MAX
    t16_0.x = max(t16_16, 0.001000);
    //Instruction 4261
    //RSQ
    t16_16 = inversesqrt(t16_0.x);
    //Instruction 4262
    //MUL
    t16_3.xyz = vec3(t16_16) * t16_3.xyz;
    //Instruction 4263
    //DP3
    t16_1.w = dot(t16_1.xyz, t16_3.xyz);
    //Instruction 4264
    //DP3
    t16_1.x = dot(t16_1.xyz, t16_2.xyz);
    //Instruction 4265
    //DP3
    t16_1.y = dot(t16_2.xyz, t16_3.xyz);
    //Instruction 4266
    //MAX
    t16_0.xyz = max(t16_1.yxw, vec3(0.0, 0.0, 0.0));
    //Instruction 4267
    //LOG
    t16_1.x = log2(t16_0.z);
    //Instruction 4268
    //ADD
    t16_6.x = (-_Glossiness) + 1.0;
    //Instruction 4269
    //ADD
    t16_11 = (-t16_6.x) + 1.0;
    //Instruction 4270
    //MAD
    t16_11 = t16_11 * 0.968000 + 0.030000;
    //Instruction 4271
    //LOG
    t16_11 = log2(t16_11);
    //Instruction 4272
    //DIV
    t16_6.y = 10.000000 / t16_11;
    //Instruction 4273
    //MUL
    t16_6.xz = t16_6.xy * t16_6.xy;
    //Instruction 4274
    //MAD
    t16_11 = t16_6.y * t16_6.y + 1.0;
    //Instruction 4275
    //MUL
    t16_1.x = t16_1.x * t16_6.z;
    //Instruction 4276
    //EXP
    t16_1.x = exp2(t16_1.x);
    //Instruction 4277
    //MUL
    t16_1.x = t16_1.x * t16_11;
    //Instruction 4278
    //MUL
    t16_11 = t16_0.x * t16_0.x;
    //Instruction 4279
    //MAD
    t16_6.x = t16_11 * _Glossiness + t16_6.x;
    //Instruction 4280
    //MUL
    t16_6.x = t16_6.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 4281
    //MAD
    t16_0.x = t16_6.x * t16_0.x + 0.000100;
    //Instruction 4282
    //DIV
    t16_0.x = t16_1.x / t16_0.x;
    //Instruction 4283
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4284
    //MAD
    t16_1.xyz = _Color.xyz * t10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 4285
    //MUL
    t16_4.xyz = t10_4.xyz * _Color.xyz;
    //Instruction 4286
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 4287
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    //Instruction 4288
    //MAD
    t16_16 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 4289
    //MAD
    t16_1.xyz = t16_4.xyz * vec3(t16_16) + t16_1.xyz;
    //Instruction 4290
    //SAMPLE_C_LZ
    vec3 txVec19 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec19, 0.0);
    //Instruction 4291
    //ADD
    t16_2.x = (-_LightShadowData.x) + 1.0;
    //Instruction 4292
    //MAD
    t16_16 = t16_16 * t16_2.x + _LightShadowData.x;
    //Instruction 4293
    //SAMPLE
    t10_0.x = texture(_LightTexture0, vs_TEXCOORD5.xy).w;
    //Instruction 4294
    //MUL
    t16_0.x = t16_16 * t10_0.x;
    //Instruction 4295
    //MUL
    t16_2.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 4296
    //MUL
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 4297
    //MUL
    t16_1.xyz = t16_0.yyy * t16_1.xyz;
    //Instruction 4298
    //MOV
    t0.x = vs_TEXCOORD7;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 4299
    //MUL
    t0.xyz = t16_1.xyz * t0.xxx;
    //Instruction 4300
    //MOV
    SV_Target0.xyz = t0.xyz;
    //Instruction 4301
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4302
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" "FOG_EXP2" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "FOG_EXP2" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" "FOG_EXP2" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "FOG_EXP2" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "FOG_EXP2" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "FOG_EXP2" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "FOG_EXP2" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "FOG_EXP2" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "FOG_EXP2" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "FOG_EXP2" "_NORMALMAP" }
"!!GLES3"
}
}
 }
 Pass {
  Name "SHADOWCASTER"
  Tags { "LIGHTMODE"="SHADOWCASTER" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  GpuProgramID 133839
Program "vp" {
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
bool tb2;
highp float t6;
highp float t9;
void main()
{
    //Instruction 4575
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4576
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4577
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4578
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4579
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4580
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4581
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 4582
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4583
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4584
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4585
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 4586
    //DP3
    t9 = dot(t0.xyz, t0.xyz);
    //Instruction 4587
    //RSQ
    t9 = inversesqrt(t9);
    //Instruction 4588
    //MUL
    t0.xyz = vec3(t9) * t0.xyz;
    //Instruction 4589
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4590
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 4591
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 4592
    //ADD
    t1.xyz = t1.xyz + _Object2World[3].xyz;
    //Instruction 4593
    //MAD
    t2.xyz = (-t1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 4594
    //DP3
    t9 = dot(t2.xyz, t2.xyz);
    //Instruction 4595
    //RSQ
    t9 = inversesqrt(t9);
    //Instruction 4596
    //MUL
    t2.xyz = vec3(t9) * t2.xyz;
    //Instruction 4597
    //DP3
    t9 = dot(t0.xyz, t2.xyz);
    //Instruction 4598
    //MAD
    t9 = (-t9) * t9 + 1.0;
    //Instruction 4599
    //SQRT
    t9 = sqrt(t9);
    //Instruction 4600
    //MUL
    t9 = t9 * unity_LightShadowBias.z;
    //Instruction 4601
    //MAD
    t0.xyz = (-t0.xyz) * vec3(t9) + t1.xyz;
    //Instruction 4602
    //MUL
    t1 = t0.yyyy * unity_MatrixVP[1];
    //Instruction 4603
    //MAD
    t1 = unity_MatrixVP[0] * t0.xxxx + t1;
    //Instruction 4604
    //MAD
    t0 = unity_MatrixVP[2] * t0.zzzz + t1;
    //Instruction 4605
    //ADD
    t0 = t0 + unity_MatrixVP[3];
    //Instruction 4606
    //MUL
    t1 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4607
    //MAD
    t1 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t1;
    //Instruction 4608
    //MAD
    t1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t1;
    //Instruction 4609
    //ADD
    t1 = t1 + glstate_matrix_mvp[3];
    //Instruction 4610
    //NE
    tb2 = unity_LightShadowBias.z!=0.0;
    //Instruction 4611
    //MOVC
    t0 = (bool(tb2)) ? t0 : t1;
    //Instruction 4612
    //DIV
    t1.x = unity_LightShadowBias.x / t0.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 4613
    //ADD
    t6 = t0.z + t1.x;
    //Instruction 4614
    //MAX
    t1.x = max((-t0.w), t6);
    //Instruction 4615
    //MOV
    gl_Position.xyw = t0.xyw;
    //Instruction 4616
    //ADD
    t0.x = (-t6) + t1.x;
    //Instruction 4617
    //MAD
    gl_Position.z = unity_LightShadowBias.y * t0.x + t6;
    //Instruction 4618
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    //Instruction 4573
    //MOV
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 4574
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
out highp vec3 vs_TEXCOORD0;
highp vec4 t0;
void main()
{
    //Instruction 4380
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4381
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4382
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4383
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4384
    //ADD
    vs_TEXCOORD0.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 4385
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4386
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4387
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4388
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4389
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
in highp vec3 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec4 t0;
void main()
{
    //Instruction 4371
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    //Instruction 4372
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 4373
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 4374
    //MIN
    t0.x = min(t0.x, 0.999000);
    //Instruction 4375
    //MUL
    t0 = t0.xxxx * vec4(1.0, 255.000000, 65025.000000, 16581375.000000);
    //Instruction 4376
    //FRC
    t0 = fract(t0);
    //Instruction 4377
    //MAD
    t0 = (-t0.yzww) * vec4(0.003922, 0.003922, 0.003922, 0.003922) + t0;
    //Instruction 4378
    //MOV
    SV_Target0 = t0;
    //Instruction 4379
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" }
"!!GLES3"
}
}
 }
 Pass {
  Name "DEFERRED"
  Tags { "LIGHTMODE"="Deferred" "RenderType"="Opaque" "PerformanceChecks"="False" }
  GpuProgramID 200435
Program "vp" {
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec3 t1;
mediump float t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 4670
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4671
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4672
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4673
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4674
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 4675
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 4676
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 4677
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4678
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4679
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4680
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4681
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4682
    //ADD
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4683
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 4684
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 4685
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 4686
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4687
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4688
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4689
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4690
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4691
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4692
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 4693
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4694
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4695
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4696
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 4697
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 4698
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 4699
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 4700
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 4701
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 4702
    //MUL
    t16_2 = t0.y * t0.y;
    //Instruction 4703
    //MAD
    t16_2 = t0.x * t0.x + (-t16_2);
    //Instruction 4704
    //MUL
    t16_0 = t0.yzzx * t0.xyzz;
    //Instruction 4705
    //DP4
    t16_3.x = dot(unity_SHBr, t16_0);
    //Instruction 4706
    //DP4
    t16_3.y = dot(unity_SHBg, t16_0);
    //Instruction 4707
    //DP4
    t16_3.z = dot(unity_SHBb, t16_0);
    //Instruction 4708
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_2) + t16_3.xyz;
    //Instruction 4709
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 4710
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp float t10_0;
mediump vec3 t16_1;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_22;
mediump float t16_24;
void main()
{
    //Instruction 4619
    //SAMPLE
    t10_0 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 4620
    //ADD
    t16_1.x = (-_OcclusionStrength) + 1.0;
    //Instruction 4621
    //MAD
    t16_0.w = t10_0 * _OcclusionStrength + t16_1.x;
    //Instruction 4622
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4623
    //MUL
    t16_3.xyz = t10_2.xyz * _Color.xyz;
    //Instruction 4624
    //MAD
    t16_1.xyz = _Color.xyz * t10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 4625
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 4626
    //MAD
    t16_22 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 4627
    //MUL
    t16_0.xyz = vec3(t16_22) * t16_3.xyz;
    //Instruction 4628
    //ADD
    t16_22 = (-t16_22) + _Glossiness;
    //Instruction 4629
    //ADD
    t16_22 = t16_22 + 1.0;
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 4630
    //ADD
    t16_4.xyz = (-t16_1.xyz) + vec3(t16_22);
    //Instruction 4631
    //MOV
    SV_Target0 = t16_0;
    //Instruction 4632
    //MOV
    SV_Target1.xyz = t16_1.xyz;
    //Instruction 4633
    //MOV
    SV_Target1.w = _Glossiness;
    //Instruction 4634
    //DP3
    t16_22 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 4635
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 4636
    //MUL
    t16_2.xyz = vec3(t16_22) * vs_TEXCOORD4.xyz;
    //Instruction 4637
    //MOV
    t16_2.w = 1.0;
    //Instruction 4638
    //MAD
    SV_Target2 = t16_2 * vec4(0.500000, 0.500000, 0.500000, 1.0) + vec4(0.500000, 0.500000, 0.500000, 0.0);
    //Instruction 4639
    //DP4
    t16_5.x = dot(unity_SHAr, t16_2);
    //Instruction 4640
    //DP4
    t16_5.y = dot(unity_SHAg, t16_2);
    //Instruction 4641
    //DP4
    t16_5.z = dot(unity_SHAb, t16_2);
    //Instruction 4642
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    //Instruction 4643
    //MUL
    t16_5.xyz = t16_0.www * t16_5.xyz;
    //Instruction 4644
    //DP3
    t16_22 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 4645
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 4646
    //MUL
    t16_6.xyz = vec3(t16_22) * vs_TEXCOORD1.xyz;
    //Instruction 4647
    //DP3
    t16_3.x = dot(t16_6.xyz, t16_2.xyz);
    //Instruction 4648
    //ADD
    t16_3.x = t16_3.x + t16_3.x;
    //Instruction 4649
    //MAD
    t16_3.xyz = t16_2.xyz * (-t16_3.xxx) + t16_6.xyz;
    //Instruction 4650
    //DP3
    t16_22 = dot(t16_2.xyz, (-t16_6.xyz));
    //Instruction 4651
    //MAX
    t16_24 = max(t16_22, 0.0);
    //Instruction 4652
    //ADD
    t16_22 = (-t16_24) + 1.0;
    //Instruction 4653
    //MUL
    t16_22 = t16_22 * t16_22;
    //Instruction 4654
    //MUL
    t16_22 = t16_22 * t16_22;
    //Instruction 4655
    //MAD
    t16_1.xyz = vec3(t16_22) * t16_4.xyz + t16_1.xyz;
    //Instruction 4656
    //ADD
    t16_22 = (-_Glossiness) + 1.0;
    //Instruction 4657
    //LOG
    t16_22 = log2(t16_22);
    //Instruction 4658
    //MUL
    t16_22 = t16_22 * 0.750000;
    //Instruction 4659
    //EXP
    t16_22 = exp2(t16_22);
    //Instruction 4660
    //MUL
    t16_22 = t16_22 * 7.000000;
    //Instruction 4661
    //SAMPLE_L
    t10_2 = textureLod(unity_SpecCube0, t16_3.xyz, t16_22);
    //Instruction 4662
    //MUL
    t16_22 = t10_2.w * unity_SpecCube0_HDR.x;
    //Instruction 4663
    //MUL
    t16_4.xyz = t10_2.xyz * vec3(t16_22);
    //Instruction 4664
    //MUL
    t16_4.xyz = t16_0.www * t16_4.xyz;
    //Instruction 4665
    //MUL
    t16_1.xyz = t16_1.xyz * t16_4.xyz;
    //Instruction 4666
    //MAD
    t16_1.xyz = t16_5.xyz * t16_0.xyz + t16_1.xyz;
    //Instruction 4667
    //EXP
    SV_Target3.xyz = exp2((-t16_1.xyz));
    //Instruction 4668
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 4669
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec3 t1;
highp vec3 t2;
mediump vec3 t16_3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 4446
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4447
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4448
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4449
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4450
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 4451
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 4452
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 4453
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4454
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4455
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4456
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4457
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4458
    //ADD
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4459
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 4460
    //MUL
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 4461
    //MAD
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    //Instruction 4462
    //MAD
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    //Instruction 4463
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 4464
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 4465
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 4466
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 4467
    //MOV
    vs_TEXCOORD2.w = 0.0;
    //Instruction 4468
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4469
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4470
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4471
    //MUL
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4472
    //MUL
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4473
    //MUL
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4474
    //ADD
    t1.xyz = t1.xyz + t2.xyz;
    //Instruction 4475
    //MUL
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4476
    //MUL
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4477
    //MUL
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4478
    //ADD
    t1.xyz = t1.xyz + t2.xyz;
    //Instruction 4479
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 4480
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 4481
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 4482
    //MUL
    t16_3.xyz = t0.yzx * t1.zxy;
    //Instruction 4483
    //MAD
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    //Instruction 4484
    //MUL
    vs_TEXCOORD3.xyz = t16_3.xyz * in_TANGENT0.www;
    //Instruction 4485
    //MOV
    vs_TEXCOORD3.w = 0.0;
    //Instruction 4486
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 4487
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 4488
    //MUL
    t16_3.x = t1.y * t1.y;
    //Instruction 4489
    //MAD
    t16_3.x = t1.x * t1.x + (-t16_3.x);
    //Instruction 4490
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 4491
    //DP4
    t16_4.x = dot(unity_SHBr, t16_0);
    //Instruction 4492
    //DP4
    t16_4.y = dot(unity_SHBg, t16_0);
    //Instruction 4493
    //DP4
    t16_4.z = dot(unity_SHBb, t16_0);
    //Instruction 4494
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * t16_3.xxx + t16_4.xyz;
    //Instruction 4495
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 4496
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp float t10_0;
mediump vec3 t16_1;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec4 t16_5;
mediump vec3 t16_6;
mediump float t16_22;
mediump float t16_24;
void main()
{
    //Instruction 4390
    //SAMPLE
    t10_0 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 4391
    //ADD
    t16_1.x = (-_OcclusionStrength) + 1.0;
    //Instruction 4392
    //MAD
    t16_0.w = t10_0 * _OcclusionStrength + t16_1.x;
    //Instruction 4393
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4394
    //MUL
    t16_3.xyz = t10_2.xyz * _Color.xyz;
    //Instruction 4395
    //MAD
    t16_1.xyz = _Color.xyz * t10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 4396
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 4397
    //MAD
    t16_22 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 4398
    //MUL
    t16_0.xyz = vec3(t16_22) * t16_3.xyz;
    //Instruction 4399
    //ADD
    t16_22 = (-t16_22) + _Glossiness;
    //Instruction 4400
    //ADD
    t16_22 = t16_22 + 1.0;
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 4401
    //ADD
    t16_4.xyz = (-t16_1.xyz) + vec3(t16_22);
    //Instruction 4402
    //MOV
    SV_Target0 = t16_0;
    //Instruction 4403
    //MOV
    SV_Target1.xyz = t16_1.xyz;
    //Instruction 4404
    //MOV
    SV_Target1.w = _Glossiness;
    //Instruction 4405
    //SAMPLE
    t10_2.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 4406
    //MAD
    t16_5.xyz = t10_2.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 4407
    //MUL
    t16_6.xyz = t16_5.yyy * vs_TEXCOORD3.xyz;
    //Instruction 4408
    //MAD
    t16_5.xyw = t16_5.xxx * vs_TEXCOORD2.xyz + t16_6.xyz;
    //Instruction 4409
    //MAD
    t16_5.xyz = t16_5.zzz * vs_TEXCOORD4.xyz + t16_5.xyw;
    //Instruction 4410
    //DP3
    t16_22 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 4411
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 4412
    //MUL
    t16_2.xyz = vec3(t16_22) * t16_5.xyz;
    //Instruction 4413
    //MOV
    t16_2.w = 1.0;
    //Instruction 4414
    //MAD
    SV_Target2 = t16_2 * vec4(0.500000, 0.500000, 0.500000, 1.0) + vec4(0.500000, 0.500000, 0.500000, 0.0);
    //Instruction 4415
    //DP4
    t16_5.x = dot(unity_SHAr, t16_2);
    //Instruction 4416
    //DP4
    t16_5.y = dot(unity_SHAg, t16_2);
    //Instruction 4417
    //DP4
    t16_5.z = dot(unity_SHAb, t16_2);
    //Instruction 4418
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    //Instruction 4419
    //MUL
    t16_5.xyz = t16_0.www * t16_5.xyz;
    //Instruction 4420
    //DP3
    t16_22 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 4421
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 4422
    //MUL
    t16_6.xyz = vec3(t16_22) * vs_TEXCOORD1.xyz;
    //Instruction 4423
    //DP3
    t16_3.x = dot(t16_6.xyz, t16_2.xyz);
    //Instruction 4424
    //ADD
    t16_3.x = t16_3.x + t16_3.x;
    //Instruction 4425
    //MAD
    t16_3.xyz = t16_2.xyz * (-t16_3.xxx) + t16_6.xyz;
    //Instruction 4426
    //DP3
    t16_22 = dot(t16_2.xyz, (-t16_6.xyz));
    //Instruction 4427
    //MAX
    t16_24 = max(t16_22, 0.0);
    //Instruction 4428
    //ADD
    t16_22 = (-t16_24) + 1.0;
    //Instruction 4429
    //MUL
    t16_22 = t16_22 * t16_22;
    //Instruction 4430
    //MUL
    t16_22 = t16_22 * t16_22;
    //Instruction 4431
    //MAD
    t16_1.xyz = vec3(t16_22) * t16_4.xyz + t16_1.xyz;
    //Instruction 4432
    //ADD
    t16_22 = (-_Glossiness) + 1.0;
    //Instruction 4433
    //LOG
    t16_22 = log2(t16_22);
    //Instruction 4434
    //MUL
    t16_22 = t16_22 * 0.750000;
    //Instruction 4435
    //EXP
    t16_22 = exp2(t16_22);
    //Instruction 4436
    //MUL
    t16_22 = t16_22 * 7.000000;
    //Instruction 4437
    //SAMPLE_L
    t10_2 = textureLod(unity_SpecCube0, t16_3.xyz, t16_22);
    //Instruction 4438
    //MUL
    t16_22 = t10_2.w * unity_SpecCube0_HDR.x;
    //Instruction 4439
    //MUL
    t16_4.xyz = t10_2.xyz * vec3(t16_22);
    //Instruction 4440
    //MUL
    t16_4.xyz = t16_0.www * t16_4.xyz;
    //Instruction 4441
    //MUL
    t16_1.xyz = t16_1.xyz * t16_4.xyz;
    //Instruction 4442
    //MAD
    t16_1.xyz = t16_5.xyz * t16_0.xyz + t16_1.xyz;
    //Instruction 4443
    //EXP
    SV_Target3.xyz = exp2((-t16_1.xyz));
    //Instruction 4444
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 4445
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec3 t1;
mediump float t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 4761
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4762
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4763
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4764
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4765
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 4766
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 4767
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 4768
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4769
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4770
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4771
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4772
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4773
    //ADD
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4774
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 4775
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 4776
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 4777
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4778
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4779
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4780
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4781
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4782
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4783
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 4784
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4785
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4786
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4787
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 4788
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 4789
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 4790
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 4791
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 4792
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 4793
    //MUL
    t16_2 = t0.y * t0.y;
    //Instruction 4794
    //MAD
    t16_2 = t0.x * t0.x + (-t16_2);
    //Instruction 4795
    //MUL
    t16_0 = t0.yzzx * t0.xyzz;
    //Instruction 4796
    //DP4
    t16_3.x = dot(unity_SHBr, t16_0);
    //Instruction 4797
    //DP4
    t16_3.y = dot(unity_SHBg, t16_0);
    //Instruction 4798
    //DP4
    t16_3.z = dot(unity_SHBb, t16_0);
    //Instruction 4799
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_2) + t16_3.xyz;
    //Instruction 4800
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 4801
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp float t10_0;
mediump vec3 t16_1;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_22;
mediump float t16_24;
void main()
{
    //Instruction 4711
    //SAMPLE
    t10_0 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 4712
    //ADD
    t16_1.x = (-_OcclusionStrength) + 1.0;
    //Instruction 4713
    //MAD
    t16_0.w = t10_0 * _OcclusionStrength + t16_1.x;
    //Instruction 4714
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4715
    //MUL
    t16_3.xyz = t10_2.xyz * _Color.xyz;
    //Instruction 4716
    //MAD
    t16_1.xyz = _Color.xyz * t10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 4717
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 4718
    //MAD
    t16_22 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 4719
    //MUL
    t16_0.xyz = vec3(t16_22) * t16_3.xyz;
    //Instruction 4720
    //ADD
    t16_22 = (-t16_22) + _Glossiness;
    //Instruction 4721
    //ADD
    t16_22 = t16_22 + 1.0;
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 4722
    //ADD
    t16_4.xyz = (-t16_1.xyz) + vec3(t16_22);
    //Instruction 4723
    //MOV
    SV_Target0 = t16_0;
    //Instruction 4724
    //MOV
    SV_Target1.xyz = t16_1.xyz;
    //Instruction 4725
    //MOV
    SV_Target1.w = _Glossiness;
    //Instruction 4726
    //DP3
    t16_22 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 4727
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 4728
    //MUL
    t16_2.xyz = vec3(t16_22) * vs_TEXCOORD4.xyz;
    //Instruction 4729
    //MOV
    t16_2.w = 1.0;
    //Instruction 4730
    //MAD
    SV_Target2 = t16_2 * vec4(0.500000, 0.500000, 0.500000, 1.0) + vec4(0.500000, 0.500000, 0.500000, 0.0);
    //Instruction 4731
    //DP4
    t16_5.x = dot(unity_SHAr, t16_2);
    //Instruction 4732
    //DP4
    t16_5.y = dot(unity_SHAg, t16_2);
    //Instruction 4733
    //DP4
    t16_5.z = dot(unity_SHAb, t16_2);
    //Instruction 4734
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    //Instruction 4735
    //MUL
    t16_5.xyz = t16_0.www * t16_5.xyz;
    //Instruction 4736
    //DP3
    t16_22 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 4737
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 4738
    //MUL
    t16_6.xyz = vec3(t16_22) * vs_TEXCOORD1.xyz;
    //Instruction 4739
    //DP3
    t16_3.x = dot(t16_6.xyz, t16_2.xyz);
    //Instruction 4740
    //ADD
    t16_3.x = t16_3.x + t16_3.x;
    //Instruction 4741
    //MAD
    t16_3.xyz = t16_2.xyz * (-t16_3.xxx) + t16_6.xyz;
    //Instruction 4742
    //DP3
    t16_22 = dot(t16_2.xyz, (-t16_6.xyz));
    //Instruction 4743
    //MAX
    t16_24 = max(t16_22, 0.0);
    //Instruction 4744
    //ADD
    t16_22 = (-t16_24) + 1.0;
    //Instruction 4745
    //MUL
    t16_22 = t16_22 * t16_22;
    //Instruction 4746
    //MUL
    t16_22 = t16_22 * t16_22;
    //Instruction 4747
    //MAD
    t16_1.xyz = vec3(t16_22) * t16_4.xyz + t16_1.xyz;
    //Instruction 4748
    //ADD
    t16_22 = (-_Glossiness) + 1.0;
    //Instruction 4749
    //LOG
    t16_22 = log2(t16_22);
    //Instruction 4750
    //MUL
    t16_22 = t16_22 * 0.750000;
    //Instruction 4751
    //EXP
    t16_22 = exp2(t16_22);
    //Instruction 4752
    //MUL
    t16_22 = t16_22 * 7.000000;
    //Instruction 4753
    //SAMPLE_L
    t10_2 = textureLod(unity_SpecCube0, t16_3.xyz, t16_22);
    //Instruction 4754
    //MUL
    t16_22 = t10_2.w * unity_SpecCube0_HDR.x;
    //Instruction 4755
    //MUL
    t16_4.xyz = t10_2.xyz * vec3(t16_22);
    //Instruction 4756
    //MUL
    t16_4.xyz = t16_0.www * t16_4.xyz;
    //Instruction 4757
    //MUL
    t16_1.xyz = t16_1.xyz * t16_4.xyz;
    //Instruction 4758
    //MAD
    SV_Target3.xyz = t16_5.xyz * t16_0.xyz + t16_1.xyz;
    //Instruction 4759
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 4760
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_NORMALMAP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec3 t1;
highp vec3 t2;
mediump vec3 t16_3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 4552
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4553
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4554
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4555
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4556
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 4557
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 4558
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 4559
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4560
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4561
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4562
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4563
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4564
    //ADD
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4565
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 4566
    //MUL
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 4567
    //MAD
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    //Instruction 4568
    //MAD
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    //Instruction 4569
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 4570
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 4571
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 4572
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 4573
    //MOV
    vs_TEXCOORD2.w = 0.0;
    //Instruction 4574
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4575
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4576
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4577
    //MUL
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4578
    //MUL
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4579
    //MUL
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4580
    //ADD
    t1.xyz = t1.xyz + t2.xyz;
    //Instruction 4581
    //MUL
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4582
    //MUL
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4583
    //MUL
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4584
    //ADD
    t1.xyz = t1.xyz + t2.xyz;
    //Instruction 4585
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 4586
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 4587
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 4588
    //MUL
    t16_3.xyz = t0.yzx * t1.zxy;
    //Instruction 4589
    //MAD
    t16_3.xyz = t1.yzx * t0.zxy + (-t16_3.xyz);
    //Instruction 4590
    //MUL
    vs_TEXCOORD3.xyz = t16_3.xyz * in_TANGENT0.www;
    //Instruction 4591
    //MOV
    vs_TEXCOORD3.w = 0.0;
    //Instruction 4592
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 4593
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 4594
    //MUL
    t16_3.x = t1.y * t1.y;
    //Instruction 4595
    //MAD
    t16_3.x = t1.x * t1.x + (-t16_3.x);
    //Instruction 4596
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 4597
    //DP4
    t16_4.x = dot(unity_SHBr, t16_0);
    //Instruction 4598
    //DP4
    t16_4.y = dot(unity_SHBg, t16_0);
    //Instruction 4599
    //DP4
    t16_4.z = dot(unity_SHBb, t16_0);
    //Instruction 4600
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * t16_3.xxx + t16_4.xyz;
    //Instruction 4601
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 4602
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp float t10_0;
mediump vec3 t16_1;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec4 t16_5;
mediump vec3 t16_6;
mediump float t16_22;
mediump float t16_24;
void main()
{
    //Instruction 4497
    //SAMPLE
    t10_0 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 4498
    //ADD
    t16_1.x = (-_OcclusionStrength) + 1.0;
    //Instruction 4499
    //MAD
    t16_0.w = t10_0 * _OcclusionStrength + t16_1.x;
    //Instruction 4500
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4501
    //MUL
    t16_3.xyz = t10_2.xyz * _Color.xyz;
    //Instruction 4502
    //MAD
    t16_1.xyz = _Color.xyz * t10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 4503
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 4504
    //MAD
    t16_22 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 4505
    //MUL
    t16_0.xyz = vec3(t16_22) * t16_3.xyz;
    //Instruction 4506
    //ADD
    t16_22 = (-t16_22) + _Glossiness;
    //Instruction 4507
    //ADD
    t16_22 = t16_22 + 1.0;
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 4508
    //ADD
    t16_4.xyz = (-t16_1.xyz) + vec3(t16_22);
    //Instruction 4509
    //MOV
    SV_Target0 = t16_0;
    //Instruction 4510
    //MOV
    SV_Target1.xyz = t16_1.xyz;
    //Instruction 4511
    //MOV
    SV_Target1.w = _Glossiness;
    //Instruction 4512
    //SAMPLE
    t10_2.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    //Instruction 4513
    //MAD
    t16_5.xyz = t10_2.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 4514
    //MUL
    t16_6.xyz = t16_5.yyy * vs_TEXCOORD3.xyz;
    //Instruction 4515
    //MAD
    t16_5.xyw = t16_5.xxx * vs_TEXCOORD2.xyz + t16_6.xyz;
    //Instruction 4516
    //MAD
    t16_5.xyz = t16_5.zzz * vs_TEXCOORD4.xyz + t16_5.xyw;
    //Instruction 4517
    //DP3
    t16_22 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 4518
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 4519
    //MUL
    t16_2.xyz = vec3(t16_22) * t16_5.xyz;
    //Instruction 4520
    //MOV
    t16_2.w = 1.0;
    //Instruction 4521
    //MAD
    SV_Target2 = t16_2 * vec4(0.500000, 0.500000, 0.500000, 1.0) + vec4(0.500000, 0.500000, 0.500000, 0.0);
    //Instruction 4522
    //DP4
    t16_5.x = dot(unity_SHAr, t16_2);
    //Instruction 4523
    //DP4
    t16_5.y = dot(unity_SHAg, t16_2);
    //Instruction 4524
    //DP4
    t16_5.z = dot(unity_SHAb, t16_2);
    //Instruction 4525
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    //Instruction 4526
    //MUL
    t16_5.xyz = t16_0.www * t16_5.xyz;
    //Instruction 4527
    //DP3
    t16_22 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 4528
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 4529
    //MUL
    t16_6.xyz = vec3(t16_22) * vs_TEXCOORD1.xyz;
    //Instruction 4530
    //DP3
    t16_3.x = dot(t16_6.xyz, t16_2.xyz);
    //Instruction 4531
    //ADD
    t16_3.x = t16_3.x + t16_3.x;
    //Instruction 4532
    //MAD
    t16_3.xyz = t16_2.xyz * (-t16_3.xxx) + t16_6.xyz;
    //Instruction 4533
    //DP3
    t16_22 = dot(t16_2.xyz, (-t16_6.xyz));
    //Instruction 4534
    //MAX
    t16_24 = max(t16_22, 0.0);
    //Instruction 4535
    //ADD
    t16_22 = (-t16_24) + 1.0;
    //Instruction 4536
    //MUL
    t16_22 = t16_22 * t16_22;
    //Instruction 4537
    //MUL
    t16_22 = t16_22 * t16_22;
    //Instruction 4538
    //MAD
    t16_1.xyz = vec3(t16_22) * t16_4.xyz + t16_1.xyz;
    //Instruction 4539
    //ADD
    t16_22 = (-_Glossiness) + 1.0;
    //Instruction 4540
    //LOG
    t16_22 = log2(t16_22);
    //Instruction 4541
    //MUL
    t16_22 = t16_22 * 0.750000;
    //Instruction 4542
    //EXP
    t16_22 = exp2(t16_22);
    //Instruction 4543
    //MUL
    t16_22 = t16_22 * 7.000000;
    //Instruction 4544
    //SAMPLE_L
    t10_2 = textureLod(unity_SpecCube0, t16_3.xyz, t16_22);
    //Instruction 4545
    //MUL
    t16_22 = t10_2.w * unity_SpecCube0_HDR.x;
    //Instruction 4546
    //MUL
    t16_4.xyz = t10_2.xyz * vec3(t16_22);
    //Instruction 4547
    //MUL
    t16_4.xyz = t16_0.www * t16_4.xyz;
    //Instruction 4548
    //MUL
    t16_1.xyz = t16_1.xyz * t16_4.xyz;
    //Instruction 4549
    //MAD
    SV_Target3.xyz = t16_5.xyz * t16_0.xyz + t16_1.xyz;
    //Instruction 4550
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 4551
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_NORMALMAP" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_NORMALMAP" }
"!!GLES3"
}
}
 }
}
SubShader { 
 LOD 150
 Tags { "RenderType"="Opaque" "PerformanceChecks"="False" }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  ZWrite [_ZWrite]
  Blend [_SrcBlend] [_DstBlend]
  GpuProgramID 374778
Program "vp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_Object2World * _glesVertex);
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_10;
  texcoord_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_12;
  n_12 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_13;
  norm_13 = tmpvar_1;
  highp vec4 v_14;
  v_14.x = _World2Object[0].x;
  v_14.y = _World2Object[1].x;
  v_14.z = _World2Object[2].x;
  v_14.w = _World2Object[3].x;
  highp vec4 v_15;
  v_15.x = _World2Object[0].y;
  v_15.y = _World2Object[1].y;
  v_15.z = _World2Object[2].y;
  v_15.w = _World2Object[3].y;
  highp vec4 v_16;
  v_16.x = _World2Object[0].z;
  v_16.y = _World2Object[1].z;
  v_16.z = _World2Object[2].z;
  v_16.w = _World2Object[3].z;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(((
    (v_14.xyz * norm_13.x)
   + 
    (v_15.xyz * norm_13.y)
  ) + (v_16.xyz * norm_13.z)));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_17;
  mediump vec4 normal_19;
  normal_19 = tmpvar_18;
  mediump vec3 x2_20;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, normal_19);
  x1_21.y = dot (unity_SHAg, normal_19);
  x1_21.z = dot (unity_SHAb, normal_19);
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_19.xyzz * normal_19.yzzx);
  x2_20.x = dot (unity_SHBr, tmpvar_22);
  x2_20.y = dot (unity_SHBg, tmpvar_22);
  x2_20.z = dot (unity_SHBb, tmpvar_22);
  tmpvar_8.xyz = ((x2_20 + (unity_SHC.xyz * 
    ((normal_19.x * normal_19.x) - (normal_19.y * normal_19.y))
  )) + x1_21);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = normalize(n_12);
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 c_1;
  mediump vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_5;
  mediump float oneMinusReflectivity_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  oneMinusReflectivity_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_5 = (tmpvar_4 * oneMinusReflectivity_6);
  mediump vec3 tmpvar_8;
  tmpvar_8 = _LightColor0.xyz;
  mediump float tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_9 = tmpvar_10.y;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = -(xlv_TEXCOORD1);
  tmpvar_11 = tmpvar_13;
  tmpvar_12 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_14;
  mediump vec3 worldNormal_15;
  highp vec3 tmpvar_16;
  highp vec3 I_17;
  I_17 = -(tmpvar_11);
  tmpvar_16 = (I_17 - (2.0 * (
    dot (tmpvar_2, I_17)
   * tmpvar_2)));
  worldNormal_15 = tmpvar_16;
  mediump vec4 hdr_18;
  hdr_18 = tmpvar_12;
  highp float mip_19;
  mediump float tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (1.0 - _Glossiness);
  tmpvar_20 = (tmpvar_21 * 7.0);
  mip_19 = tmpvar_20;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = worldNormal_15;
  tmpvar_22.w = mip_19;
  lowp vec4 tmpvar_23;
  tmpvar_23 = textureCube (unity_SpecCube0, tmpvar_22.xyz, mip_19);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  tmpvar_14 = ((tmpvar_24.w * hdr_18.x) * tmpvar_24.xyz);
  tmpvar_14 = (tmpvar_14 * tmpvar_9);
  mediump vec2 tmpvar_25;
  tmpvar_25.x = dot ((tmpvar_13 - (2.0 * 
    (dot (tmpvar_2, tmpvar_13) * tmpvar_2)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_25.y = (1.0 - clamp (dot (tmpvar_2, tmpvar_13), 0.0, 1.0));
  mediump vec2 tmpvar_26;
  tmpvar_26 = ((tmpvar_25 * tmpvar_25) * (tmpvar_25 * tmpvar_25));
  mediump vec2 tmpvar_27;
  tmpvar_27.x = tmpvar_26.x;
  tmpvar_27.y = tmpvar_21;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_NHxRoughness, tmpvar_27);
  mediump vec3 tmpvar_29;
  tmpvar_29 = (((
    ((tmpvar_5 + ((tmpvar_28.w * 16.0) * tmpvar_7)) * tmpvar_8)
   * 
    clamp (dot (tmpvar_2, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_9)
   * tmpvar_5)) + (tmpvar_14 * mix (tmpvar_7, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_6)), 0.0, 1.0)
  ), tmpvar_26.yyy)));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = tmpvar_29;
  c_1.w = tmpvar_30.w;
  c_1.xyz = tmpvar_29;
  c_1.xyz = c_1.xyz;
  mediump vec4 xlat_varoutput_31;
  xlat_varoutput_31.xyz = c_1.xyz;
  xlat_varoutput_31.w = 1.0;
  gl_FragData[0] = xlat_varoutput_31;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
mediump vec3 t16_1;
highp vec3 t2;
mediump vec4 t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 4645
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4646
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4647
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4648
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4649
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 4650
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 4651
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 4652
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4653
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4654
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4655
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4656
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4657
    //ADD
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4658
    //DP3
    t16_1.x = dot(t0.xyz, t0.xyz);
    //Instruction 4659
    //RSQ
    t16_1.x = inversesqrt(t16_1.x);
    //Instruction 4660
    //MUL
    vs_TEXCOORD1.xyz = t0.xyz * t16_1.xxx;
    //Instruction 4661
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 4662
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 4663
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4664
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4665
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4666
    //MUL
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4667
    //MUL
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4668
    //MUL
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4669
    //ADD
    t0.xyz = t0.xyz + t2.xyz;
    //Instruction 4670
    //MUL
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4671
    //MUL
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4672
    //MUL
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4673
    //ADD
    t0.xyz = t0.xyz + t2.xyz;
    //Instruction 4674
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 4675
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 4676
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 4677
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 4678
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 4679
    //MUL
    t16_1.x = t0.y * t0.y;
    //Instruction 4680
    //MAD
    t16_1.x = t0.x * t0.x + (-t16_1.x);
    //Instruction 4681
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 4682
    //DP4
    t16_3.x = dot(unity_SHBr, t16_2);
    //Instruction 4683
    //DP4
    t16_3.y = dot(unity_SHBg, t16_2);
    //Instruction 4684
    //DP4
    t16_3.z = dot(unity_SHBb, t16_2);
    //Instruction 4685
    //MAD
    t16_1.xyz = unity_SHC.xyz * t16_1.xxx + t16_3.xyz;
    //Instruction 4686
    //MOV
    t0.w = 1.0;
    //Instruction 4687
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 4688
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 4689
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 4690
    //ADD
    vs_TEXCOORD5.xyz = t16_1.xyz + t16_3.xyz;
    //Instruction 4691
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 4692
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec4 t10_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump float t16_3;
lowp float t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_9;
mediump vec3 t16_10;
lowp vec3 t10_10;
mediump float t16_21;
mediump float t16_22;
void main()
{
    //Instruction 4603
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 4604
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 4605
    //MUL
    t16_0.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 4606
    //DP3
    t16_21 = dot((-vs_TEXCOORD1.xyz), t16_0.xyz);
    //Instruction 4607
    //ADD
    t16_1.x = t16_21 + t16_21;
    //Instruction 4608
    //MOV
    t16_21 = t16_21;
    t16_21 = clamp(t16_21, 0.0, 1.0);
    //Instruction 4609
    //ADD
    t16_2.y = (-t16_21) + 1.0;
    //Instruction 4610
    //MAD
    t16_1.xyz = t16_0.xyz * (-t16_1.xxx) + (-vs_TEXCOORD1.xyz);
    //Instruction 4611
    //DP3
    t16_2.x = dot(t16_1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 4612
    //MUL
    t16_1.xy = t16_2.xy * t16_2.xy;
    //Instruction 4613
    //MUL
    t16_1.yz = t16_1.xy * t16_1.xy;
    //Instruction 4614
    //ADD
    t16_1.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    //Instruction 4615
    //SAMPLE
    t10_3 = texture(unity_NHxRoughness, t16_1.yw).w;
    //Instruction 4616
    //MUL
    t16_21 = t16_1.x * 7.000000;
    //Instruction 4617
    //MUL
    t16_3 = t10_3 * 16.000000;
    //Instruction 4618
    //SAMPLE
    t10_10.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4619
    //MUL
    t16_4.xyz = t10_10.xyz * _Color.xyz;
    //Instruction 4620
    //MAD
    t16_1.xyw = _Color.xyz * t10_10.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 4621
    //MAD
    t16_1.xyw = vec3(_Metallic) * t16_1.xyw + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 4622
    //MAD
    t16_2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 4623
    //MUL
    t16_9.xyz = t16_2.xxx * t16_4.xyz;
    //Instruction 4624
    //ADD
    t16_2.x = (-t16_2.x) + _Glossiness;
    //Instruction 4625
    //ADD
    t16_2.x = t16_2.x + 1.0;
    t16_2.x = clamp(t16_2.x, 0.0, 1.0);
    //Instruction 4626
    //ADD
    t16_5.xyz = (-t16_1.xyw) + t16_2.xxx;
    //Instruction 4627
    //MAD
    t16_5.xyz = t16_1.zzz * t16_5.xyz + t16_1.xyw;
    //Instruction 4628
    //MAD
    t16_1.xyz = vec3(t16_3) * t16_1.xyw + t16_9.xyz;
    //Instruction 4629
    //MUL
    t16_1.xyz = t16_1.xyz * _LightColor0.xyz;
    //Instruction 4630
    //SAMPLE
    t10_3 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 4631
    //MUL
    t16_6.xyz = vec3(t10_3) * vs_TEXCOORD5.xyz;
    //Instruction 4632
    //MUL
    t16_2.xyz = t16_9.xyz * t16_6.xyz;
    //Instruction 4633
    //DP3
    t16_22 = dot(t16_0.xyz, _WorldSpaceLightPos0.xyz);
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 4634
    //MAD
    t16_1.xyz = t16_1.xyz * vec3(t16_22) + t16_2.xyz;
    //Instruction 4635
    //DP3
    t16_10.x = dot(vs_TEXCOORD1.xyz, t16_0.xyz);
    //Instruction 4636
    //ADD
    t16_10.x = t16_10.x + t16_10.x;
    //Instruction 4637
    //MAD
    t16_10.xyz = t16_0.xyz * (-t16_10.xxx) + vs_TEXCOORD1.xyz;
    //Instruction 4638
    //SAMPLE_L
    t10_0 = textureLod(unity_SpecCube0, t16_10.xyz, t16_21);
    //Instruction 4639
    //MUL
    t16_22 = t10_0.w * unity_SpecCube0_HDR.x;
    //Instruction 4640
    //MUL
    t16_2.xyz = t10_0.xyz * vec3(t16_22);
    //Instruction 4641
    //MUL
    t16_2.xyz = vec3(t10_3) * t16_2.xyz;
    //Instruction 4642
    //MAD
    SV_Target0.xyz = t16_2.xyz * t16_5.xyz + t16_1.xyz;
    //Instruction 4643
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4644
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_13;
  n_13 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_14;
  norm_14 = tmpvar_1;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_18;
  mediump vec4 normal_20;
  normal_20 = tmpvar_19;
  mediump vec3 x2_21;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, normal_20);
  x1_22.y = dot (unity_SHAg, normal_20);
  x1_22.z = dot (unity_SHAb, normal_20);
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_20.xyzz * normal_20.yzzx);
  x2_21.x = dot (unity_SHBr, tmpvar_23);
  x2_21.y = dot (unity_SHBg, tmpvar_23);
  x2_21.z = dot (unity_SHBb, tmpvar_23);
  tmpvar_8.xyz = ((x2_21 + (unity_SHC.xyz * 
    ((normal_20.x * normal_20.x) - (normal_20.y * normal_20.y))
  )) + x1_22);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = normalize(n_13);
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  mediump float atten_2;
  mediump vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_6;
  mediump float oneMinusReflectivity_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  oneMinusReflectivity_7 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * oneMinusReflectivity_7);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  lowp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_10 = tmpvar_11;
  atten_2 = tmpvar_10;
  mediump float tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_12 = tmpvar_13.y;
  highp vec3 tmpvar_14;
  highp vec4 tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = -(xlv_TEXCOORD1);
  tmpvar_14 = tmpvar_16;
  tmpvar_15 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_17;
  mediump vec3 worldNormal_18;
  highp vec3 tmpvar_19;
  highp vec3 I_20;
  I_20 = -(tmpvar_14);
  tmpvar_19 = (I_20 - (2.0 * (
    dot (tmpvar_3, I_20)
   * tmpvar_3)));
  worldNormal_18 = tmpvar_19;
  mediump vec4 hdr_21;
  hdr_21 = tmpvar_15;
  highp float mip_22;
  mediump float tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = (1.0 - _Glossiness);
  tmpvar_23 = (tmpvar_24 * 7.0);
  mip_22 = tmpvar_23;
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = worldNormal_18;
  tmpvar_25.w = mip_22;
  lowp vec4 tmpvar_26;
  tmpvar_26 = textureCube (unity_SpecCube0, tmpvar_25.xyz, mip_22);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  tmpvar_17 = ((tmpvar_27.w * hdr_21.x) * tmpvar_27.xyz);
  tmpvar_17 = (tmpvar_17 * tmpvar_12);
  mediump vec2 tmpvar_28;
  tmpvar_28.x = dot ((tmpvar_16 - (2.0 * 
    (dot (tmpvar_3, tmpvar_16) * tmpvar_3)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_28.y = (1.0 - clamp (dot (tmpvar_3, tmpvar_16), 0.0, 1.0));
  mediump vec2 tmpvar_29;
  tmpvar_29 = ((tmpvar_28 * tmpvar_28) * (tmpvar_28 * tmpvar_28));
  mediump vec2 tmpvar_30;
  tmpvar_30.x = tmpvar_29.x;
  tmpvar_30.y = tmpvar_24;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (unity_NHxRoughness, tmpvar_30);
  mediump vec3 tmpvar_32;
  tmpvar_32 = (((
    ((tmpvar_6 + ((tmpvar_31.w * 16.0) * tmpvar_8)) * (tmpvar_9 * atten_2))
   * 
    clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_12)
   * tmpvar_6)) + (tmpvar_17 * mix (tmpvar_8, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_7)), 0.0, 1.0)
  ), tmpvar_29.yyy)));
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = tmpvar_32;
  c_1.w = tmpvar_33.w;
  c_1.xyz = tmpvar_32;
  c_1.xyz = c_1.xyz;
  mediump vec4 xlat_varoutput_34;
  xlat_varoutput_34.xyz = c_1.xyz;
  xlat_varoutput_34.w = 1.0;
  gl_FragData[0] = xlat_varoutput_34;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_Object2World * _glesVertex);
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_10;
  texcoord_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_12;
  n_12 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_13;
  norm_13 = tmpvar_1;
  highp vec4 v_14;
  v_14.x = _World2Object[0].x;
  v_14.y = _World2Object[1].x;
  v_14.z = _World2Object[2].x;
  v_14.w = _World2Object[3].x;
  highp vec4 v_15;
  v_15.x = _World2Object[0].y;
  v_15.y = _World2Object[1].y;
  v_15.z = _World2Object[2].y;
  v_15.w = _World2Object[3].y;
  highp vec4 v_16;
  v_16.x = _World2Object[0].z;
  v_16.y = _World2Object[1].z;
  v_16.z = _World2Object[2].z;
  v_16.w = _World2Object[3].z;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(((
    (v_14.xyz * norm_13.x)
   + 
    (v_15.xyz * norm_13.y)
  ) + (v_16.xyz * norm_13.z)));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_17;
  mediump vec4 normal_19;
  normal_19 = tmpvar_18;
  mediump vec3 x2_20;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, normal_19);
  x1_21.y = dot (unity_SHAg, normal_19);
  x1_21.z = dot (unity_SHAb, normal_19);
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_19.xyzz * normal_19.yzzx);
  x2_20.x = dot (unity_SHBr, tmpvar_22);
  x2_20.y = dot (unity_SHBg, tmpvar_22);
  x2_20.z = dot (unity_SHBb, tmpvar_22);
  tmpvar_8.xyz = ((x2_20 + (unity_SHC.xyz * 
    ((normal_19.x * normal_19.x) - (normal_19.y * normal_19.y))
  )) + x1_21);
  highp vec3 lightColor0_23;
  lightColor0_23 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_24;
  lightColor1_24 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_25;
  lightColor2_25 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_26;
  lightColor3_26 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_27;
  lightAttenSq_27 = unity_4LightAtten0;
  highp vec3 col_28;
  highp vec4 ndotl_29;
  highp vec4 lengthSq_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  ndotl_29 = (tmpvar_31 * tmpvar_17.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * tmpvar_17.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * tmpvar_17.z));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * inversesqrt(lengthSq_30)));
  ndotl_29 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (lengthSq_30 * lightAttenSq_27)
  ))));
  col_28 = (lightColor0_23 * tmpvar_35.x);
  col_28 = (col_28 + (lightColor1_24 * tmpvar_35.y));
  col_28 = (col_28 + (lightColor2_25 * tmpvar_35.z));
  col_28 = (col_28 + (lightColor3_26 * tmpvar_35.w));
  tmpvar_8.xyz = (tmpvar_8.xyz + col_28);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = normalize(n_12);
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 c_1;
  mediump vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_5;
  mediump float oneMinusReflectivity_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  oneMinusReflectivity_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_5 = (tmpvar_4 * oneMinusReflectivity_6);
  mediump vec3 tmpvar_8;
  tmpvar_8 = _LightColor0.xyz;
  mediump float tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_9 = tmpvar_10.y;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = -(xlv_TEXCOORD1);
  tmpvar_11 = tmpvar_13;
  tmpvar_12 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_14;
  mediump vec3 worldNormal_15;
  highp vec3 tmpvar_16;
  highp vec3 I_17;
  I_17 = -(tmpvar_11);
  tmpvar_16 = (I_17 - (2.0 * (
    dot (tmpvar_2, I_17)
   * tmpvar_2)));
  worldNormal_15 = tmpvar_16;
  mediump vec4 hdr_18;
  hdr_18 = tmpvar_12;
  highp float mip_19;
  mediump float tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (1.0 - _Glossiness);
  tmpvar_20 = (tmpvar_21 * 7.0);
  mip_19 = tmpvar_20;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = worldNormal_15;
  tmpvar_22.w = mip_19;
  lowp vec4 tmpvar_23;
  tmpvar_23 = textureCube (unity_SpecCube0, tmpvar_22.xyz, mip_19);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  tmpvar_14 = ((tmpvar_24.w * hdr_18.x) * tmpvar_24.xyz);
  tmpvar_14 = (tmpvar_14 * tmpvar_9);
  mediump vec2 tmpvar_25;
  tmpvar_25.x = dot ((tmpvar_13 - (2.0 * 
    (dot (tmpvar_2, tmpvar_13) * tmpvar_2)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_25.y = (1.0 - clamp (dot (tmpvar_2, tmpvar_13), 0.0, 1.0));
  mediump vec2 tmpvar_26;
  tmpvar_26 = ((tmpvar_25 * tmpvar_25) * (tmpvar_25 * tmpvar_25));
  mediump vec2 tmpvar_27;
  tmpvar_27.x = tmpvar_26.x;
  tmpvar_27.y = tmpvar_21;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_NHxRoughness, tmpvar_27);
  mediump vec3 tmpvar_29;
  tmpvar_29 = (((
    ((tmpvar_5 + ((tmpvar_28.w * 16.0) * tmpvar_7)) * tmpvar_8)
   * 
    clamp (dot (tmpvar_2, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_9)
   * tmpvar_5)) + (tmpvar_14 * mix (tmpvar_7, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_6)), 0.0, 1.0)
  ), tmpvar_26.yyy)));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = tmpvar_29;
  c_1.w = tmpvar_30.w;
  c_1.xyz = tmpvar_29;
  c_1.xyz = c_1.xyz;
  mediump vec4 xlat_varoutput_31;
  xlat_varoutput_31.xyz = c_1.xyz;
  xlat_varoutput_31.w = 1.0;
  gl_FragData[0] = xlat_varoutput_31;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec4 t4;
mediump vec3 t16_4;
highp vec4 t5;
highp float t18;
void main()
{
    //Instruction 4735
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4736
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4737
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4738
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4739
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 4740
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 4741
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 4742
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4743
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4744
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4745
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4746
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4747
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4748
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 4749
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 4750
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 4751
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 4752
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 4753
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 4754
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4755
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4756
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4757
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4758
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4759
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4760
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 4761
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4762
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4763
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4764
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 4765
    //DP3
    t18 = dot(t1.xyz, t1.xyz);
    //Instruction 4766
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 4767
    //MUL
    t1.xyz = vec3(t18) * t1.xyz;
    //Instruction 4768
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 4769
    //MUL
    t16_2.x = t1.y * t1.y;
    //Instruction 4770
    //MAD
    t16_2.x = t1.x * t1.x + (-t16_2.x);
    //Instruction 4771
    //MUL
    t16_3 = t1.yzzx * t1.xyzz;
    //Instruction 4772
    //DP4
    t16_4.x = dot(unity_SHBr, t16_3);
    //Instruction 4773
    //DP4
    t16_4.y = dot(unity_SHBg, t16_3);
    //Instruction 4774
    //DP4
    t16_4.z = dot(unity_SHBb, t16_3);
    //Instruction 4775
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_4.xyz;
    //Instruction 4776
    //MOV
    t1.w = 1.0;
    //Instruction 4777
    //DP4
    t16_4.x = dot(unity_SHAr, t1);
    //Instruction 4778
    //DP4
    t16_4.y = dot(unity_SHAg, t1);
    //Instruction 4779
    //DP4
    t16_4.z = dot(unity_SHAb, t1);
    //Instruction 4780
    //ADD
    t16_2.xyz = t16_2.xyz + t16_4.xyz;
    //Instruction 4781
    //ADD
    t3 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 4782
    //MUL
    t4 = t1.yyyy * t3;
    //Instruction 4783
    //MUL
    t3 = t3 * t3;
    //Instruction 4784
    //ADD
    t5 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 4785
    //ADD
    t0 = (-t0.zzzz) + unity_4LightPosZ0;
    //Instruction 4786
    //MAD
    t4 = t5 * t1.xxxx + t4;
    //Instruction 4787
    //MAD
    t1 = t0 * t1.zzzz + t4;
    //Instruction 4788
    //MAD
    t3 = t5 * t5 + t3;
    //Instruction 4789
    //MAD
    t0 = t0 * t0 + t3;
    //Instruction 4790
    //RSQ
    t3 = inversesqrt(t0);
    //Instruction 4791
    //MAD
    t0 = t0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 4792
    //DIV
    t0 = vec4(1.0, 1.0, 1.0, 1.0) / t0;
    //Instruction 4793
    //MUL
    t1 = t1 * t3;
    //Instruction 4794
    //MAX
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 4795
    //MUL
    t0 = t0 * t1;
    //Instruction 4796
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 4797
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 4798
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 4799
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 4800
    //ADD
    t0.xyz = t0.xyz + t16_2.xyz;
    //Instruction 4801
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 4802
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 4803
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec4 t10_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump float t16_3;
lowp float t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_9;
mediump vec3 t16_10;
lowp vec3 t10_10;
mediump float t16_21;
mediump float t16_22;
void main()
{
    //Instruction 4693
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 4694
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 4695
    //MUL
    t16_0.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 4696
    //DP3
    t16_21 = dot((-vs_TEXCOORD1.xyz), t16_0.xyz);
    //Instruction 4697
    //ADD
    t16_1.x = t16_21 + t16_21;
    //Instruction 4698
    //MOV
    t16_21 = t16_21;
    t16_21 = clamp(t16_21, 0.0, 1.0);
    //Instruction 4699
    //ADD
    t16_2.y = (-t16_21) + 1.0;
    //Instruction 4700
    //MAD
    t16_1.xyz = t16_0.xyz * (-t16_1.xxx) + (-vs_TEXCOORD1.xyz);
    //Instruction 4701
    //DP3
    t16_2.x = dot(t16_1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 4702
    //MUL
    t16_1.xy = t16_2.xy * t16_2.xy;
    //Instruction 4703
    //MUL
    t16_1.yz = t16_1.xy * t16_1.xy;
    //Instruction 4704
    //ADD
    t16_1.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    //Instruction 4705
    //SAMPLE
    t10_3 = texture(unity_NHxRoughness, t16_1.yw).w;
    //Instruction 4706
    //MUL
    t16_21 = t16_1.x * 7.000000;
    //Instruction 4707
    //MUL
    t16_3 = t10_3 * 16.000000;
    //Instruction 4708
    //SAMPLE
    t10_10.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4709
    //MUL
    t16_4.xyz = t10_10.xyz * _Color.xyz;
    //Instruction 4710
    //MAD
    t16_1.xyw = _Color.xyz * t10_10.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 4711
    //MAD
    t16_1.xyw = vec3(_Metallic) * t16_1.xyw + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 4712
    //MAD
    t16_2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 4713
    //MUL
    t16_9.xyz = t16_2.xxx * t16_4.xyz;
    //Instruction 4714
    //ADD
    t16_2.x = (-t16_2.x) + _Glossiness;
    //Instruction 4715
    //ADD
    t16_2.x = t16_2.x + 1.0;
    t16_2.x = clamp(t16_2.x, 0.0, 1.0);
    //Instruction 4716
    //ADD
    t16_5.xyz = (-t16_1.xyw) + t16_2.xxx;
    //Instruction 4717
    //MAD
    t16_5.xyz = t16_1.zzz * t16_5.xyz + t16_1.xyw;
    //Instruction 4718
    //MAD
    t16_1.xyz = vec3(t16_3) * t16_1.xyw + t16_9.xyz;
    //Instruction 4719
    //MUL
    t16_1.xyz = t16_1.xyz * _LightColor0.xyz;
    //Instruction 4720
    //SAMPLE
    t10_3 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 4721
    //MUL
    t16_6.xyz = vec3(t10_3) * vs_TEXCOORD5.xyz;
    //Instruction 4722
    //MUL
    t16_2.xyz = t16_9.xyz * t16_6.xyz;
    //Instruction 4723
    //DP3
    t16_22 = dot(t16_0.xyz, _WorldSpaceLightPos0.xyz);
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 4724
    //MAD
    t16_1.xyz = t16_1.xyz * vec3(t16_22) + t16_2.xyz;
    //Instruction 4725
    //DP3
    t16_10.x = dot(vs_TEXCOORD1.xyz, t16_0.xyz);
    //Instruction 4726
    //ADD
    t16_10.x = t16_10.x + t16_10.x;
    //Instruction 4727
    //MAD
    t16_10.xyz = t16_0.xyz * (-t16_10.xxx) + vs_TEXCOORD1.xyz;
    //Instruction 4728
    //SAMPLE_L
    t10_0 = textureLod(unity_SpecCube0, t16_10.xyz, t16_21);
    //Instruction 4729
    //MUL
    t16_22 = t10_0.w * unity_SpecCube0_HDR.x;
    //Instruction 4730
    //MUL
    t16_2.xyz = t10_0.xyz * vec3(t16_22);
    //Instruction 4731
    //MUL
    t16_2.xyz = vec3(t10_3) * t16_2.xyz;
    //Instruction 4732
    //MAD
    SV_Target0.xyz = t16_2.xyz * t16_5.xyz + t16_1.xyz;
    //Instruction 4733
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4734
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_13;
  n_13 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_14;
  norm_14 = tmpvar_1;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_18;
  mediump vec4 normal_20;
  normal_20 = tmpvar_19;
  mediump vec3 x2_21;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, normal_20);
  x1_22.y = dot (unity_SHAg, normal_20);
  x1_22.z = dot (unity_SHAb, normal_20);
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_20.xyzz * normal_20.yzzx);
  x2_21.x = dot (unity_SHBr, tmpvar_23);
  x2_21.y = dot (unity_SHBg, tmpvar_23);
  x2_21.z = dot (unity_SHBb, tmpvar_23);
  tmpvar_8.xyz = ((x2_21 + (unity_SHC.xyz * 
    ((normal_20.x * normal_20.x) - (normal_20.y * normal_20.y))
  )) + x1_22);
  highp vec3 lightColor0_24;
  lightColor0_24 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_25;
  lightColor1_25 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_26;
  lightColor2_26 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_27;
  lightColor3_27 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_28;
  lightAttenSq_28 = unity_4LightAtten0;
  highp vec3 col_29;
  highp vec4 ndotl_30;
  highp vec4 lengthSq_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosX0 - tmpvar_10.x);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosY0 - tmpvar_10.y);
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_4LightPosZ0 - tmpvar_10.z);
  lengthSq_31 = (tmpvar_32 * tmpvar_32);
  lengthSq_31 = (lengthSq_31 + (tmpvar_33 * tmpvar_33));
  lengthSq_31 = (lengthSq_31 + (tmpvar_34 * tmpvar_34));
  ndotl_30 = (tmpvar_32 * tmpvar_18.x);
  ndotl_30 = (ndotl_30 + (tmpvar_33 * tmpvar_18.y));
  ndotl_30 = (ndotl_30 + (tmpvar_34 * tmpvar_18.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_30 * inversesqrt(lengthSq_31)));
  ndotl_30 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (lengthSq_31 * lightAttenSq_28)
  ))));
  col_29 = (lightColor0_24 * tmpvar_36.x);
  col_29 = (col_29 + (lightColor1_25 * tmpvar_36.y));
  col_29 = (col_29 + (lightColor2_26 * tmpvar_36.z));
  col_29 = (col_29 + (lightColor3_27 * tmpvar_36.w));
  tmpvar_8.xyz = (tmpvar_8.xyz + col_29);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = normalize(n_13);
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  mediump float atten_2;
  mediump vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_6;
  mediump float oneMinusReflectivity_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  oneMinusReflectivity_7 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * oneMinusReflectivity_7);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  lowp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_10 = tmpvar_11;
  atten_2 = tmpvar_10;
  mediump float tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_12 = tmpvar_13.y;
  highp vec3 tmpvar_14;
  highp vec4 tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = -(xlv_TEXCOORD1);
  tmpvar_14 = tmpvar_16;
  tmpvar_15 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_17;
  mediump vec3 worldNormal_18;
  highp vec3 tmpvar_19;
  highp vec3 I_20;
  I_20 = -(tmpvar_14);
  tmpvar_19 = (I_20 - (2.0 * (
    dot (tmpvar_3, I_20)
   * tmpvar_3)));
  worldNormal_18 = tmpvar_19;
  mediump vec4 hdr_21;
  hdr_21 = tmpvar_15;
  highp float mip_22;
  mediump float tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = (1.0 - _Glossiness);
  tmpvar_23 = (tmpvar_24 * 7.0);
  mip_22 = tmpvar_23;
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = worldNormal_18;
  tmpvar_25.w = mip_22;
  lowp vec4 tmpvar_26;
  tmpvar_26 = textureCube (unity_SpecCube0, tmpvar_25.xyz, mip_22);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  tmpvar_17 = ((tmpvar_27.w * hdr_21.x) * tmpvar_27.xyz);
  tmpvar_17 = (tmpvar_17 * tmpvar_12);
  mediump vec2 tmpvar_28;
  tmpvar_28.x = dot ((tmpvar_16 - (2.0 * 
    (dot (tmpvar_3, tmpvar_16) * tmpvar_3)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_28.y = (1.0 - clamp (dot (tmpvar_3, tmpvar_16), 0.0, 1.0));
  mediump vec2 tmpvar_29;
  tmpvar_29 = ((tmpvar_28 * tmpvar_28) * (tmpvar_28 * tmpvar_28));
  mediump vec2 tmpvar_30;
  tmpvar_30.x = tmpvar_29.x;
  tmpvar_30.y = tmpvar_24;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (unity_NHxRoughness, tmpvar_30);
  mediump vec3 tmpvar_32;
  tmpvar_32 = (((
    ((tmpvar_6 + ((tmpvar_31.w * 16.0) * tmpvar_8)) * (tmpvar_9 * atten_2))
   * 
    clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_12)
   * tmpvar_6)) + (tmpvar_17 * mix (tmpvar_8, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_7)), 0.0, 1.0)
  ), tmpvar_29.yyy)));
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = tmpvar_32;
  c_1.w = tmpvar_33.w;
  c_1.xyz = tmpvar_32;
  c_1.xyz = c_1.xyz;
  mediump vec4 xlat_varoutput_34;
  xlat_varoutput_34.xyz = c_1.xyz;
  xlat_varoutput_34.w = 1.0;
  gl_FragData[0] = xlat_varoutput_34;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_13;
  n_13 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_14;
  norm_14 = tmpvar_1;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_18;
  mediump vec4 normal_20;
  normal_20 = tmpvar_19;
  mediump vec3 x2_21;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, normal_20);
  x1_22.y = dot (unity_SHAg, normal_20);
  x1_22.z = dot (unity_SHAb, normal_20);
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_20.xyzz * normal_20.yzzx);
  x2_21.x = dot (unity_SHBr, tmpvar_23);
  x2_21.y = dot (unity_SHBg, tmpvar_23);
  x2_21.z = dot (unity_SHBb, tmpvar_23);
  tmpvar_8.xyz = ((x2_21 + (unity_SHC.xyz * 
    ((normal_20.x * normal_20.x) - (normal_20.y * normal_20.y))
  )) + x1_22);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = normalize(n_13);
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform lowp sampler2DShadow _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  mediump float atten_2;
  mediump vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_6;
  mediump float oneMinusReflectivity_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  oneMinusReflectivity_7 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * oneMinusReflectivity_7);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  lowp float shadow_10;
  shadow_10 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  atten_2 = shadow_10;
  mediump float tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_11 = tmpvar_12.y;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = -(xlv_TEXCOORD1);
  tmpvar_13 = tmpvar_15;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_16;
  mediump vec3 worldNormal_17;
  highp vec3 tmpvar_18;
  highp vec3 I_19;
  I_19 = -(tmpvar_13);
  tmpvar_18 = (I_19 - (2.0 * (
    dot (tmpvar_3, I_19)
   * tmpvar_3)));
  worldNormal_17 = tmpvar_18;
  mediump vec4 hdr_20;
  hdr_20 = tmpvar_14;
  highp float mip_21;
  mediump float tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = (1.0 - _Glossiness);
  tmpvar_22 = (tmpvar_23 * 7.0);
  mip_21 = tmpvar_22;
  highp vec4 tmpvar_24;
  tmpvar_24.xyz = worldNormal_17;
  tmpvar_24.w = mip_21;
  lowp vec4 tmpvar_25;
  tmpvar_25 = textureCube (unity_SpecCube0, tmpvar_24.xyz, mip_21);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  tmpvar_16 = ((tmpvar_26.w * hdr_20.x) * tmpvar_26.xyz);
  tmpvar_16 = (tmpvar_16 * tmpvar_11);
  mediump vec2 tmpvar_27;
  tmpvar_27.x = dot ((tmpvar_15 - (2.0 * 
    (dot (tmpvar_3, tmpvar_15) * tmpvar_3)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_27.y = (1.0 - clamp (dot (tmpvar_3, tmpvar_15), 0.0, 1.0));
  mediump vec2 tmpvar_28;
  tmpvar_28 = ((tmpvar_27 * tmpvar_27) * (tmpvar_27 * tmpvar_27));
  mediump vec2 tmpvar_29;
  tmpvar_29.x = tmpvar_28.x;
  tmpvar_29.y = tmpvar_23;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (unity_NHxRoughness, tmpvar_29);
  mediump vec3 tmpvar_31;
  tmpvar_31 = (((
    ((tmpvar_6 + ((tmpvar_30.w * 16.0) * tmpvar_8)) * (tmpvar_9 * atten_2))
   * 
    clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_11)
   * tmpvar_6)) + (tmpvar_16 * mix (tmpvar_8, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_7)), 0.0, 1.0)
  ), tmpvar_28.yyy)));
  mediump vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = tmpvar_31;
  c_1.w = tmpvar_32.w;
  c_1.xyz = tmpvar_31;
  c_1.xyz = c_1.xyz;
  mediump vec4 xlat_varoutput_33;
  xlat_varoutput_33.xyz = c_1.xyz;
  xlat_varoutput_33.w = 1.0;
  gl_FragData[0] = xlat_varoutput_33;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_1;
highp vec3 t2;
mediump vec4 t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 4848
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4849
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4850
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4851
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4852
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 4853
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 4854
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 4855
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4856
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4857
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4858
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4859
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4860
    //ADD
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4861
    //DP3
    t16_1.x = dot(t0.xyz, t0.xyz);
    //Instruction 4862
    //RSQ
    t16_1.x = inversesqrt(t16_1.x);
    //Instruction 4863
    //MUL
    vs_TEXCOORD1.xyz = t0.xyz * t16_1.xxx;
    //Instruction 4864
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 4865
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 4866
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4867
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4868
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4869
    //MUL
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4870
    //MUL
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4871
    //MUL
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4872
    //ADD
    t0.xyz = t0.xyz + t2.xyz;
    //Instruction 4873
    //MUL
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4874
    //MUL
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4875
    //MUL
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4876
    //ADD
    t0.xyz = t0.xyz + t2.xyz;
    //Instruction 4877
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 4878
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 4879
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 4880
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 4881
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 4882
    //MUL
    t16_1.x = t0.y * t0.y;
    //Instruction 4883
    //MAD
    t16_1.x = t0.x * t0.x + (-t16_1.x);
    //Instruction 4884
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 4885
    //DP4
    t16_3.x = dot(unity_SHBr, t16_2);
    //Instruction 4886
    //DP4
    t16_3.y = dot(unity_SHBg, t16_2);
    //Instruction 4887
    //DP4
    t16_3.z = dot(unity_SHBb, t16_2);
    //Instruction 4888
    //MAD
    t16_1.xyz = unity_SHC.xyz * t16_1.xxx + t16_3.xyz;
    //Instruction 4889
    //MOV
    t0.w = 1.0;
    //Instruction 4890
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 4891
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 4892
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 4893
    //ADD
    vs_TEXCOORD5.xyz = t16_1.xyz + t16_3.xyz;
    //Instruction 4894
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 4895
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 4896
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 4897
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 4898
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 4899
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 4900
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 4901
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 4902
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 4903
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 4904
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
mediump vec4 t16_2;
mediump vec3 t16_3;
mediump float t16_4;
lowp float t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_7;
mediump vec3 t16_11;
lowp vec3 t10_11;
mediump float t16_21;
mediump float t16_22;
void main()
{
    //Instruction 4802
    //SAMPLE_C_LZ
    vec3 txVec16 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec16, 0.0);
    //Instruction 4803
    //ADD
    t16_7 = (-_LightShadowData.x) + 1.0;
    //Instruction 4804
    //MAD
    t16_0.x = t16_0.x * t16_7 + _LightShadowData.x;
    //Instruction 4805
    //MUL
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 4806
    //DP3
    t16_21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 4807
    //RSQ
    t16_21 = inversesqrt(t16_21);
    //Instruction 4808
    //MUL
    t16_1.xyz = vec3(t16_21) * vs_TEXCOORD4.xyz;
    //Instruction 4809
    //DP3
    t16_21 = dot((-vs_TEXCOORD1.xyz), t16_1.xyz);
    //Instruction 4810
    //ADD
    t16_22 = t16_21 + t16_21;
    //Instruction 4811
    //MOV
    t16_21 = t16_21;
    t16_21 = clamp(t16_21, 0.0, 1.0);
    //Instruction 4812
    //ADD
    t16_2.y = (-t16_21) + 1.0;
    //Instruction 4813
    //MAD
    t16_3.xyz = t16_1.xyz * (-vec3(t16_22)) + (-vs_TEXCOORD1.xyz);
    //Instruction 4814
    //DP3
    t16_2.x = dot(t16_3.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 4815
    //MUL
    t16_2.xy = t16_2.xy * t16_2.xy;
    //Instruction 4816
    //MUL
    t16_2.yz = t16_2.xy * t16_2.xy;
    //Instruction 4817
    //ADD
    t16_2.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    //Instruction 4818
    //SAMPLE
    t10_4 = texture(unity_NHxRoughness, t16_2.yw).w;
    //Instruction 4819
    //MUL
    t16_21 = t16_2.x * 7.000000;
    //Instruction 4820
    //MUL
    t16_4 = t10_4 * 16.000000;
    //Instruction 4821
    //SAMPLE
    t10_11.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4822
    //MUL
    t16_5.xyz = t10_11.xyz * _Color.xyz;
    //Instruction 4823
    //MAD
    t16_2.xyw = _Color.xyz * t10_11.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 4824
    //MAD
    t16_2.xyw = vec3(_Metallic) * t16_2.xyw + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 4825
    //MAD
    t16_22 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 4826
    //MUL
    t16_3.xyz = vec3(t16_22) * t16_5.xyz;
    //Instruction 4827
    //ADD
    t16_22 = (-t16_22) + _Glossiness;
    //Instruction 4828
    //ADD
    t16_22 = t16_22 + 1.0;
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 4829
    //ADD
    t16_6.xyz = (-t16_2.xyw) + vec3(t16_22);
    //Instruction 4830
    //MAD
    t16_6.xyz = t16_2.zzz * t16_6.xyz + t16_2.xyw;
    //Instruction 4831
    //MAD
    t16_2.xyz = vec3(t16_4) * t16_2.xyw + t16_3.xyz;
    //Instruction 4832
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 4833
    //SAMPLE
    t10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 4834
    //MUL
    t16_2.xyz = vec3(t10_4) * vs_TEXCOORD5.xyz;
    //Instruction 4835
    //MUL
    t16_2.xyz = t16_3.xyz * t16_2.xyz;
    //Instruction 4836
    //DP3
    t16_22 = dot(t16_1.xyz, _WorldSpaceLightPos0.xyz);
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 4837
    //MAD
    t16_0.xyz = t16_0.xyz * vec3(t16_22) + t16_2.xyz;
    //Instruction 4838
    //DP3
    t16_11.x = dot(vs_TEXCOORD1.xyz, t16_1.xyz);
    //Instruction 4839
    //ADD
    t16_11.x = t16_11.x + t16_11.x;
    //Instruction 4840
    //MAD
    t16_11.xyz = t16_1.xyz * (-t16_11.xxx) + vs_TEXCOORD1.xyz;
    //Instruction 4841
    //SAMPLE_L
    t10_1 = textureLod(unity_SpecCube0, t16_11.xyz, t16_21);
    //Instruction 4842
    //MUL
    t16_21 = t10_1.w * unity_SpecCube0_HDR.x;
    //Instruction 4843
    //MUL
    t16_2.xyz = t10_1.xyz * vec3(t16_21);
    //Instruction 4844
    //MUL
    t16_2.xyz = vec3(t10_4) * t16_2.xyz;
    //Instruction 4845
    //MAD
    SV_Target0.xyz = t16_2.xyz * t16_6.xyz + t16_0.xyz;
    //Instruction 4846
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4847
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_13;
  n_13 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_14;
  norm_14 = tmpvar_1;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_18;
  mediump vec4 normal_20;
  normal_20 = tmpvar_19;
  mediump vec3 x2_21;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, normal_20);
  x1_22.y = dot (unity_SHAg, normal_20);
  x1_22.z = dot (unity_SHAb, normal_20);
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_20.xyzz * normal_20.yzzx);
  x2_21.x = dot (unity_SHBr, tmpvar_23);
  x2_21.y = dot (unity_SHBg, tmpvar_23);
  x2_21.z = dot (unity_SHBb, tmpvar_23);
  tmpvar_8.xyz = ((x2_21 + (unity_SHC.xyz * 
    ((normal_20.x * normal_20.x) - (normal_20.y * normal_20.y))
  )) + x1_22);
  highp vec3 lightColor0_24;
  lightColor0_24 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_25;
  lightColor1_25 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_26;
  lightColor2_26 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_27;
  lightColor3_27 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_28;
  lightAttenSq_28 = unity_4LightAtten0;
  highp vec3 col_29;
  highp vec4 ndotl_30;
  highp vec4 lengthSq_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosX0 - tmpvar_10.x);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosY0 - tmpvar_10.y);
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_4LightPosZ0 - tmpvar_10.z);
  lengthSq_31 = (tmpvar_32 * tmpvar_32);
  lengthSq_31 = (lengthSq_31 + (tmpvar_33 * tmpvar_33));
  lengthSq_31 = (lengthSq_31 + (tmpvar_34 * tmpvar_34));
  ndotl_30 = (tmpvar_32 * tmpvar_18.x);
  ndotl_30 = (ndotl_30 + (tmpvar_33 * tmpvar_18.y));
  ndotl_30 = (ndotl_30 + (tmpvar_34 * tmpvar_18.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_30 * inversesqrt(lengthSq_31)));
  ndotl_30 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (lengthSq_31 * lightAttenSq_28)
  ))));
  col_29 = (lightColor0_24 * tmpvar_36.x);
  col_29 = (col_29 + (lightColor1_25 * tmpvar_36.y));
  col_29 = (col_29 + (lightColor2_26 * tmpvar_36.z));
  col_29 = (col_29 + (lightColor3_27 * tmpvar_36.w));
  tmpvar_8.xyz = (tmpvar_8.xyz + col_29);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = normalize(n_13);
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform lowp sampler2DShadow _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  mediump float atten_2;
  mediump vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_6;
  mediump float oneMinusReflectivity_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  oneMinusReflectivity_7 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * oneMinusReflectivity_7);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  lowp float shadow_10;
  shadow_10 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  atten_2 = shadow_10;
  mediump float tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_11 = tmpvar_12.y;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = -(xlv_TEXCOORD1);
  tmpvar_13 = tmpvar_15;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_16;
  mediump vec3 worldNormal_17;
  highp vec3 tmpvar_18;
  highp vec3 I_19;
  I_19 = -(tmpvar_13);
  tmpvar_18 = (I_19 - (2.0 * (
    dot (tmpvar_3, I_19)
   * tmpvar_3)));
  worldNormal_17 = tmpvar_18;
  mediump vec4 hdr_20;
  hdr_20 = tmpvar_14;
  highp float mip_21;
  mediump float tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = (1.0 - _Glossiness);
  tmpvar_22 = (tmpvar_23 * 7.0);
  mip_21 = tmpvar_22;
  highp vec4 tmpvar_24;
  tmpvar_24.xyz = worldNormal_17;
  tmpvar_24.w = mip_21;
  lowp vec4 tmpvar_25;
  tmpvar_25 = textureCube (unity_SpecCube0, tmpvar_24.xyz, mip_21);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  tmpvar_16 = ((tmpvar_26.w * hdr_20.x) * tmpvar_26.xyz);
  tmpvar_16 = (tmpvar_16 * tmpvar_11);
  mediump vec2 tmpvar_27;
  tmpvar_27.x = dot ((tmpvar_15 - (2.0 * 
    (dot (tmpvar_3, tmpvar_15) * tmpvar_3)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_27.y = (1.0 - clamp (dot (tmpvar_3, tmpvar_15), 0.0, 1.0));
  mediump vec2 tmpvar_28;
  tmpvar_28 = ((tmpvar_27 * tmpvar_27) * (tmpvar_27 * tmpvar_27));
  mediump vec2 tmpvar_29;
  tmpvar_29.x = tmpvar_28.x;
  tmpvar_29.y = tmpvar_23;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (unity_NHxRoughness, tmpvar_29);
  mediump vec3 tmpvar_31;
  tmpvar_31 = (((
    ((tmpvar_6 + ((tmpvar_30.w * 16.0) * tmpvar_8)) * (tmpvar_9 * atten_2))
   * 
    clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_11)
   * tmpvar_6)) + (tmpvar_16 * mix (tmpvar_8, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_7)), 0.0, 1.0)
  ), tmpvar_28.yyy)));
  mediump vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = tmpvar_31;
  c_1.w = tmpvar_32.w;
  c_1.xyz = tmpvar_31;
  c_1.xyz = c_1.xyz;
  mediump vec4 xlat_varoutput_33;
  xlat_varoutput_33.xyz = c_1.xyz;
  xlat_varoutput_33.w = 1.0;
  gl_FragData[0] = xlat_varoutput_33;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec4 t4;
mediump vec3 t16_4;
highp vec4 t5;
highp float t18;
void main()
{
    //Instruction 4951
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4952
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4953
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4954
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4955
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 4956
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 4957
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 4958
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4959
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4960
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4961
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4962
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4963
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4964
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 4965
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 4966
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 4967
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 4968
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 4969
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 4970
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4971
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4972
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4973
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4974
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4975
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4976
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 4977
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4978
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4979
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4980
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 4981
    //DP3
    t18 = dot(t1.xyz, t1.xyz);
    //Instruction 4982
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 4983
    //MUL
    t1.xyz = vec3(t18) * t1.xyz;
    //Instruction 4984
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 4985
    //MUL
    t16_2.x = t1.y * t1.y;
    //Instruction 4986
    //MAD
    t16_2.x = t1.x * t1.x + (-t16_2.x);
    //Instruction 4987
    //MUL
    t16_3 = t1.yzzx * t1.xyzz;
    //Instruction 4988
    //DP4
    t16_4.x = dot(unity_SHBr, t16_3);
    //Instruction 4989
    //DP4
    t16_4.y = dot(unity_SHBg, t16_3);
    //Instruction 4990
    //DP4
    t16_4.z = dot(unity_SHBb, t16_3);
    //Instruction 4991
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_4.xyz;
    //Instruction 4992
    //MOV
    t1.w = 1.0;
    //Instruction 4993
    //DP4
    t16_4.x = dot(unity_SHAr, t1);
    //Instruction 4994
    //DP4
    t16_4.y = dot(unity_SHAg, t1);
    //Instruction 4995
    //DP4
    t16_4.z = dot(unity_SHAb, t1);
    //Instruction 4996
    //ADD
    t16_2.xyz = t16_2.xyz + t16_4.xyz;
    //Instruction 4997
    //ADD
    t3 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 4998
    //MUL
    t4 = t1.yyyy * t3;
    //Instruction 4999
    //MUL
    t3 = t3 * t3;
    //Instruction 5000
    //ADD
    t5 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 5001
    //ADD
    t0 = (-t0.zzzz) + unity_4LightPosZ0;
    //Instruction 5002
    //MAD
    t4 = t5 * t1.xxxx + t4;
    //Instruction 5003
    //MAD
    t1 = t0 * t1.zzzz + t4;
    //Instruction 5004
    //MAD
    t3 = t5 * t5 + t3;
    //Instruction 5005
    //MAD
    t0 = t0 * t0 + t3;
    //Instruction 5006
    //RSQ
    t3 = inversesqrt(t0);
    //Instruction 5007
    //MAD
    t0 = t0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 5008
    //DIV
    t0 = vec4(1.0, 1.0, 1.0, 1.0) / t0;
    //Instruction 5009
    //MUL
    t1 = t1 * t3;
    //Instruction 5010
    //MAX
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 5011
    //MUL
    t0 = t0 * t1;
    //Instruction 5012
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 5013
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 5014
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 5015
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 5016
    //ADD
    t0.xyz = t0.xyz + t16_2.xyz;
    //Instruction 5017
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 5018
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 5019
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 5020
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 5021
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 5022
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 5023
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 5024
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 5025
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 5026
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 5027
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 5028
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
mediump vec4 t16_2;
mediump vec3 t16_3;
mediump float t16_4;
lowp float t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_7;
mediump vec3 t16_11;
lowp vec3 t10_11;
mediump float t16_21;
mediump float t16_22;
void main()
{
    //Instruction 4905
    //SAMPLE_C_LZ
    vec3 txVec17 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec17, 0.0);
    //Instruction 4906
    //ADD
    t16_7 = (-_LightShadowData.x) + 1.0;
    //Instruction 4907
    //MAD
    t16_0.x = t16_0.x * t16_7 + _LightShadowData.x;
    //Instruction 4908
    //MUL
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 4909
    //DP3
    t16_21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 4910
    //RSQ
    t16_21 = inversesqrt(t16_21);
    //Instruction 4911
    //MUL
    t16_1.xyz = vec3(t16_21) * vs_TEXCOORD4.xyz;
    //Instruction 4912
    //DP3
    t16_21 = dot((-vs_TEXCOORD1.xyz), t16_1.xyz);
    //Instruction 4913
    //ADD
    t16_22 = t16_21 + t16_21;
    //Instruction 4914
    //MOV
    t16_21 = t16_21;
    t16_21 = clamp(t16_21, 0.0, 1.0);
    //Instruction 4915
    //ADD
    t16_2.y = (-t16_21) + 1.0;
    //Instruction 4916
    //MAD
    t16_3.xyz = t16_1.xyz * (-vec3(t16_22)) + (-vs_TEXCOORD1.xyz);
    //Instruction 4917
    //DP3
    t16_2.x = dot(t16_3.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 4918
    //MUL
    t16_2.xy = t16_2.xy * t16_2.xy;
    //Instruction 4919
    //MUL
    t16_2.yz = t16_2.xy * t16_2.xy;
    //Instruction 4920
    //ADD
    t16_2.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    //Instruction 4921
    //SAMPLE
    t10_4 = texture(unity_NHxRoughness, t16_2.yw).w;
    //Instruction 4922
    //MUL
    t16_21 = t16_2.x * 7.000000;
    //Instruction 4923
    //MUL
    t16_4 = t10_4 * 16.000000;
    //Instruction 4924
    //SAMPLE
    t10_11.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4925
    //MUL
    t16_5.xyz = t10_11.xyz * _Color.xyz;
    //Instruction 4926
    //MAD
    t16_2.xyw = _Color.xyz * t10_11.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 4927
    //MAD
    t16_2.xyw = vec3(_Metallic) * t16_2.xyw + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 4928
    //MAD
    t16_22 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 4929
    //MUL
    t16_3.xyz = vec3(t16_22) * t16_5.xyz;
    //Instruction 4930
    //ADD
    t16_22 = (-t16_22) + _Glossiness;
    //Instruction 4931
    //ADD
    t16_22 = t16_22 + 1.0;
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 4932
    //ADD
    t16_6.xyz = (-t16_2.xyw) + vec3(t16_22);
    //Instruction 4933
    //MAD
    t16_6.xyz = t16_2.zzz * t16_6.xyz + t16_2.xyw;
    //Instruction 4934
    //MAD
    t16_2.xyz = vec3(t16_4) * t16_2.xyw + t16_3.xyz;
    //Instruction 4935
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 4936
    //SAMPLE
    t10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 4937
    //MUL
    t16_2.xyz = vec3(t10_4) * vs_TEXCOORD5.xyz;
    //Instruction 4938
    //MUL
    t16_2.xyz = t16_3.xyz * t16_2.xyz;
    //Instruction 4939
    //DP3
    t16_22 = dot(t16_1.xyz, _WorldSpaceLightPos0.xyz);
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 4940
    //MAD
    t16_0.xyz = t16_0.xyz * vec3(t16_22) + t16_2.xyz;
    //Instruction 4941
    //DP3
    t16_11.x = dot(vs_TEXCOORD1.xyz, t16_1.xyz);
    //Instruction 4942
    //ADD
    t16_11.x = t16_11.x + t16_11.x;
    //Instruction 4943
    //MAD
    t16_11.xyz = t16_1.xyz * (-t16_11.xxx) + vs_TEXCOORD1.xyz;
    //Instruction 4944
    //SAMPLE_L
    t10_1 = textureLod(unity_SpecCube0, t16_11.xyz, t16_21);
    //Instruction 4945
    //MUL
    t16_21 = t10_1.w * unity_SpecCube0_HDR.x;
    //Instruction 4946
    //MUL
    t16_2.xyz = t10_1.xyz * vec3(t16_21);
    //Instruction 4947
    //MUL
    t16_2.xyz = vec3(t10_4) * t16_2.xyz;
    //Instruction 4948
    //MAD
    SV_Target0.xyz = t16_2.xyz * t16_6.xyz + t16_0.xyz;
    //Instruction 4949
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4950
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_Object2World * _glesVertex);
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_10;
  texcoord_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_12;
  n_12 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_13;
  norm_13 = tmpvar_1;
  highp vec4 v_14;
  v_14.x = _World2Object[0].x;
  v_14.y = _World2Object[1].x;
  v_14.z = _World2Object[2].x;
  v_14.w = _World2Object[3].x;
  highp vec4 v_15;
  v_15.x = _World2Object[0].y;
  v_15.y = _World2Object[1].y;
  v_15.z = _World2Object[2].y;
  v_15.w = _World2Object[3].y;
  highp vec4 v_16;
  v_16.x = _World2Object[0].z;
  v_16.y = _World2Object[1].z;
  v_16.z = _World2Object[2].z;
  v_16.w = _World2Object[3].z;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(((
    (v_14.xyz * norm_13.x)
   + 
    (v_15.xyz * norm_13.y)
  ) + (v_16.xyz * norm_13.z)));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_17;
  mediump vec4 normal_19;
  normal_19 = tmpvar_18;
  mediump vec3 x2_20;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, normal_19);
  x1_21.y = dot (unity_SHAg, normal_19);
  x1_21.z = dot (unity_SHAb, normal_19);
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_19.xyzz * normal_19.yzzx);
  x2_20.x = dot (unity_SHBr, tmpvar_22);
  x2_20.y = dot (unity_SHBg, tmpvar_22);
  x2_20.z = dot (unity_SHBb, tmpvar_22);
  tmpvar_8.xyz = ((x2_20 + (unity_SHC.xyz * 
    ((normal_19.x * normal_19.x) - (normal_19.y * normal_19.y))
  )) + x1_21);
  highp float tmpvar_23;
  tmpvar_23 = (unity_FogParams.x * tmpvar_4.z);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = normalize(n_12);
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD7 = exp2((-(tmpvar_23) * tmpvar_23));
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  mediump vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_5;
  mediump float oneMinusReflectivity_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  oneMinusReflectivity_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_5 = (tmpvar_4 * oneMinusReflectivity_6);
  mediump vec3 tmpvar_8;
  tmpvar_8 = _LightColor0.xyz;
  mediump float tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_9 = tmpvar_10.y;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = -(xlv_TEXCOORD1);
  tmpvar_11 = tmpvar_13;
  tmpvar_12 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_14;
  mediump vec3 worldNormal_15;
  highp vec3 tmpvar_16;
  highp vec3 I_17;
  I_17 = -(tmpvar_11);
  tmpvar_16 = (I_17 - (2.0 * (
    dot (tmpvar_2, I_17)
   * tmpvar_2)));
  worldNormal_15 = tmpvar_16;
  mediump vec4 hdr_18;
  hdr_18 = tmpvar_12;
  highp float mip_19;
  mediump float tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (1.0 - _Glossiness);
  tmpvar_20 = (tmpvar_21 * 7.0);
  mip_19 = tmpvar_20;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = worldNormal_15;
  tmpvar_22.w = mip_19;
  lowp vec4 tmpvar_23;
  tmpvar_23 = textureCube (unity_SpecCube0, tmpvar_22.xyz, mip_19);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  tmpvar_14 = ((tmpvar_24.w * hdr_18.x) * tmpvar_24.xyz);
  tmpvar_14 = (tmpvar_14 * tmpvar_9);
  mediump vec2 tmpvar_25;
  tmpvar_25.x = dot ((tmpvar_13 - (2.0 * 
    (dot (tmpvar_2, tmpvar_13) * tmpvar_2)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_25.y = (1.0 - clamp (dot (tmpvar_2, tmpvar_13), 0.0, 1.0));
  mediump vec2 tmpvar_26;
  tmpvar_26 = ((tmpvar_25 * tmpvar_25) * (tmpvar_25 * tmpvar_25));
  mediump vec2 tmpvar_27;
  tmpvar_27.x = tmpvar_26.x;
  tmpvar_27.y = tmpvar_21;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_NHxRoughness, tmpvar_27);
  mediump vec3 tmpvar_29;
  tmpvar_29 = (((
    ((tmpvar_5 + ((tmpvar_28.w * 16.0) * tmpvar_7)) * tmpvar_8)
   * 
    clamp (dot (tmpvar_2, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_9)
   * tmpvar_5)) + (tmpvar_14 * mix (tmpvar_7, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_6)), 0.0, 1.0)
  ), tmpvar_26.yyy)));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = tmpvar_29;
  c_1.w = tmpvar_30.w;
  c_1.xyz = tmpvar_29;
  c_1.xyz = c_1.xyz;
  highp float tmpvar_31;
  tmpvar_31 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_31));
  mediump vec4 xlat_varoutput_32;
  xlat_varoutput_32.xyz = c_1.xyz;
  xlat_varoutput_32.w = 1.0;
  gl_FragData[0] = xlat_varoutput_32;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp float vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
mediump vec3 t16_1;
highp vec3 t2;
mediump vec4 t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 5075
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 5076
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 5077
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 5078
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 5079
    //MOV
    gl_Position = t0;
    //Instruction 5080
    //MUL
    t0.x = t0.z * unity_FogParams.x;
    //Instruction 5081
    //MUL
    t0.x = t0.x * (-t0.x);
    //Instruction 5082
    //EXP
    vs_TEXCOORD7 = exp2(t0.x);
    //Instruction 5083
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 5084
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 5085
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 5086
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 5087
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 5088
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 5089
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 5090
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 5091
    //ADD
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 5092
    //DP3
    t16_1.x = dot(t0.xyz, t0.xyz);
    //Instruction 5093
    //RSQ
    t16_1.x = inversesqrt(t16_1.x);
    //Instruction 5094
    //MUL
    vs_TEXCOORD1.xyz = t0.xyz * t16_1.xxx;
    //Instruction 5095
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 5096
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 5097
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 5098
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 5099
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 5100
    //MUL
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 5101
    //MUL
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 5102
    //MUL
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 5103
    //ADD
    t0.xyz = t0.xyz + t2.xyz;
    //Instruction 5104
    //MUL
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 5105
    //MUL
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 5106
    //MUL
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 5107
    //ADD
    t0.xyz = t0.xyz + t2.xyz;
    //Instruction 5108
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 5109
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 5110
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 5111
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 5112
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 5113
    //MUL
    t16_1.x = t0.y * t0.y;
    //Instruction 5114
    //MAD
    t16_1.x = t0.x * t0.x + (-t16_1.x);
    //Instruction 5115
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 5116
    //DP4
    t16_3.x = dot(unity_SHBr, t16_2);
    //Instruction 5117
    //DP4
    t16_3.y = dot(unity_SHBg, t16_2);
    //Instruction 5118
    //DP4
    t16_3.z = dot(unity_SHBb, t16_2);
    //Instruction 5119
    //MAD
    t16_1.xyz = unity_SHC.xyz * t16_1.xxx + t16_3.xyz;
    //Instruction 5120
    //MOV
    t0.w = 1.0;
    //Instruction 5121
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 5122
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 5123
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 5124
    //ADD
    vs_TEXCOORD5.xyz = t16_1.xyz + t16_3.xyz;
    //Instruction 5125
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 5126
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp float vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec4 t10_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
highp vec3 t3;
mediump vec3 t16_3;
lowp float t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_9;
mediump vec3 t16_10;
lowp vec3 t10_10;
mediump float t16_21;
mediump float t16_22;
highp float t24;
void main()
{
    //Instruction 5029
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 5030
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 5031
    //MUL
    t16_0.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 5032
    //DP3
    t16_21 = dot((-vs_TEXCOORD1.xyz), t16_0.xyz);
    //Instruction 5033
    //ADD
    t16_1.x = t16_21 + t16_21;
    //Instruction 5034
    //MOV
    t16_21 = t16_21;
    t16_21 = clamp(t16_21, 0.0, 1.0);
    //Instruction 5035
    //ADD
    t16_2.y = (-t16_21) + 1.0;
    //Instruction 5036
    //MAD
    t16_1.xyz = t16_0.xyz * (-t16_1.xxx) + (-vs_TEXCOORD1.xyz);
    //Instruction 5037
    //DP3
    t16_2.x = dot(t16_1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 5038
    //MUL
    t16_1.xy = t16_2.xy * t16_2.xy;
    //Instruction 5039
    //MUL
    t16_1.yz = t16_1.xy * t16_1.xy;
    //Instruction 5040
    //ADD
    t16_1.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    //Instruction 5041
    //SAMPLE
    t10_3 = texture(unity_NHxRoughness, t16_1.yw).w;
    //Instruction 5042
    //MUL
    t16_21 = t16_1.x * 7.000000;
    //Instruction 5043
    //MUL
    t16_3.x = t10_3 * 16.000000;
    //Instruction 5044
    //SAMPLE
    t10_10.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 5045
    //MUL
    t16_4.xyz = t10_10.xyz * _Color.xyz;
    //Instruction 5046
    //MAD
    t16_1.xyw = _Color.xyz * t10_10.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 5047
    //MAD
    t16_1.xyw = vec3(_Metallic) * t16_1.xyw + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 5048
    //MAD
    t16_2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 5049
    //MUL
    t16_9.xyz = t16_2.xxx * t16_4.xyz;
    //Instruction 5050
    //ADD
    t16_2.x = (-t16_2.x) + _Glossiness;
    //Instruction 5051
    //ADD
    t16_2.x = t16_2.x + 1.0;
    t16_2.x = clamp(t16_2.x, 0.0, 1.0);
    //Instruction 5052
    //ADD
    t16_5.xyz = (-t16_1.xyw) + t16_2.xxx;
    //Instruction 5053
    //MAD
    t16_5.xyz = t16_1.zzz * t16_5.xyz + t16_1.xyw;
    //Instruction 5054
    //MAD
    t16_1.xyz = t16_3.xxx * t16_1.xyw + t16_9.xyz;
    //Instruction 5055
    //MUL
    t16_1.xyz = t16_1.xyz * _LightColor0.xyz;
    //Instruction 5056
    //SAMPLE
    t10_3 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 5057
    //MUL
    t16_6.xyz = vec3(t10_3) * vs_TEXCOORD5.xyz;
    //Instruction 5058
    //MUL
    t16_2.xyz = t16_9.xyz * t16_6.xyz;
    //Instruction 5059
    //DP3
    t16_22 = dot(t16_0.xyz, _WorldSpaceLightPos0.xyz);
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 5060
    //MAD
    t16_1.xyz = t16_1.xyz * vec3(t16_22) + t16_2.xyz;
    //Instruction 5061
    //DP3
    t16_10.x = dot(vs_TEXCOORD1.xyz, t16_0.xyz);
    //Instruction 5062
    //ADD
    t16_10.x = t16_10.x + t16_10.x;
    //Instruction 5063
    //MAD
    t16_10.xyz = t16_0.xyz * (-t16_10.xxx) + vs_TEXCOORD1.xyz;
    //Instruction 5064
    //SAMPLE_L
    t10_0 = textureLod(unity_SpecCube0, t16_10.xyz, t16_21);
    //Instruction 5065
    //MUL
    t16_22 = t10_0.w * unity_SpecC